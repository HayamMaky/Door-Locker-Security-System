
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00005d2a  00005dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800134  00800134  00005e92  2**0
                  ALLOC
  3 .stab         00004aa0  00000000  00000000  00005e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000172a  00000000  00000000  0000a934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c05e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c19e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c30e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000df57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ee42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_4>
      14:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_9>
      28:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_10>
      2c:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 13 	call	0x2796	; 0x2796 <main>
      8a:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 2e 	jmp	0x5c2e	; 0x5c2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 2e 	jmp	0x5c66	; 0x5c66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 2e 	jmp	0x5c2e	; 0x5c2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 2e 	jmp	0x5c66	; 0x5c66 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 2e 	jmp	0x5c7e	; 0x5c7e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
	/*Check if the pointer is valid*/
	if (Config_Ptr == NULL)
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	09 f4       	brne	.+2      	; 0xb68 <UART_init+0x22>
     b66:	2b c1       	rjmp	.+598    	; 0xdbe <UART_init+0x278>
	{
		return; // Handle error appropriately }
	}

	uint16 ubrr_value = 0;
     b68:	1a 82       	std	Y+2, r1	; 0x02
     b6a:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
     b6c:	eb 81       	ldd	r30, Y+3	; 0x03
     b6e:	fc 81       	ldd	r31, Y+4	; 0x04
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	94 81       	ldd	r25, Z+4	; 0x04
     b74:	a5 81       	ldd	r26, Z+5	; 0x05
     b76:	b6 81       	ldd	r27, Z+6	; 0x06
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	aa 1f       	adc	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	9c 01       	movw	r18, r24
     b92:	ad 01       	movw	r20, r26
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	92 e1       	ldi	r25, 0x12	; 18
     b98:	aa e7       	ldi	r26, 0x7A	; 122
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	bc 01       	movw	r22, r24
     b9e:	cd 01       	movw	r24, r26
     ba0:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <__udivmodsi4>
     ba4:	da 01       	movw	r26, r20
     ba6:	c9 01       	movw	r24, r18
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UCSRC=0;
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	10 82       	st	Z, r1
	UBRRH = ubrr_value>>8;
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	89 2f       	mov	r24, r25
     bbe:	99 27       	eor	r25, r25
     bc0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bc2:	e9 e2       	ldi	r30, 0x29	; 41
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	80 83       	st	Z, r24

	/*to write on UCSRC*/
	UCSRC |= (1 << URSEL);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 68       	ori	r24, 0x80	; 128
     bd6:	8c 93       	st	X, r24

	/*Configure stop bits*/
	if (Config_Ptr->stop_bit == TWO_STOP_BITS)
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	41 f4       	brne	.+16     	; 0xbf2 <UART_init+0xac>
	{
		UCSRC |= (1 << USBS); // Set for 2 stop bits
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 60       	ori	r24, 0x08	; 8
     bee:	8c 93       	st	X, r24
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <UART_init+0xba>
	}
	else
	{
		UCSRC &= ~(1 << USBS); // Set for 1 stop bit
     bf2:	a0 e4       	ldi	r26, 0x40	; 64
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	87 7f       	andi	r24, 0xF7	; 247
     bfe:	8c 93       	st	X, r24
	}

	/* Set parity */
	switch(Config_Ptr->parity)
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	81 81       	ldd	r24, Z+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	38 87       	std	Y+8, r19	; 0x08
     c0c:	2f 83       	std	Y+7, r18	; 0x07
     c0e:	8f 81       	ldd	r24, Y+7	; 0x07
     c10:	98 85       	ldd	r25, Y+8	; 0x08
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	89 f0       	breq	.+34     	; 0xc3a <UART_init+0xf4>
     c18:	2f 81       	ldd	r18, Y+7	; 0x07
     c1a:	38 85       	ldd	r19, Y+8	; 0x08
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	d9 f0       	breq	.+54     	; 0xc58 <UART_init+0x112>
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	98 85       	ldd	r25, Y+8	; 0x08
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	29 f5       	brne	.+74     	; 0xc74 <UART_init+0x12e>
	{
	case NO_PARITY:
		UCSRC &= ~(1 << UPM0) & ~(1 << UPM1);
     c2a:	a0 e4       	ldi	r26, 0x40	; 64
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e0 e4       	ldi	r30, 0x40	; 64
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8f 7c       	andi	r24, 0xCF	; 207
     c36:	8c 93       	st	X, r24
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <UART_init+0x12e>
		break;
	case EVEN_PARITY:
		UCSRC &= ~(1 << UPM0);
     c3a:	a0 e4       	ldi	r26, 0x40	; 64
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e0 e4       	ldi	r30, 0x40	; 64
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8f 7e       	andi	r24, 0xEF	; 239
     c46:	8c 93       	st	X, r24
		UCSRC |= (1 << UPM1);
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	8c 93       	st	X, r24
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <UART_init+0x12e>
		break;
	case  ODD_PARITY:
		UCSRC |= (1 << UPM0);
     c58:	a0 e4       	ldi	r26, 0x40	; 64
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e0 e4       	ldi	r30, 0x40	; 64
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8c 93       	st	X, r24
		UCSRC |= (1 << UPM1);
     c66:	a0 e4       	ldi	r26, 0x40	; 64
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e0 e4       	ldi	r30, 0x40	; 64
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 62       	ori	r24, 0x20	; 32
     c72:	8c 93       	st	X, r24
	}
	/* set data bits*/
	switch(Config_Ptr->bit_data)
     c74:	eb 81       	ldd	r30, Y+3	; 0x03
     c76:	fc 81       	ldd	r31, Y+4	; 0x04
     c78:	80 81       	ld	r24, Z
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	2d 83       	std	Y+5, r18	; 0x05
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	87 30       	cpi	r24, 0x07	; 7
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <UART_init+0x148>
     c8c:	49 c0       	rjmp	.+146    	; 0xd20 <UART_init+0x1da>
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	3e 81       	ldd	r19, Y+6	; 0x06
     c92:	28 30       	cpi	r18, 0x08	; 8
     c94:	31 05       	cpc	r19, r1
     c96:	5c f4       	brge	.+22     	; 0xcae <UART_init+0x168>
     c98:	8d 81       	ldd	r24, Y+5	; 0x05
     c9a:	9e 81       	ldd	r25, Y+6	; 0x06
     c9c:	85 30       	cpi	r24, 0x05	; 5
     c9e:	91 05       	cpc	r25, r1
     ca0:	99 f0       	breq	.+38     	; 0xcc8 <UART_init+0x182>
     ca2:	2d 81       	ldd	r18, Y+5	; 0x05
     ca4:	3e 81       	ldd	r19, Y+6	; 0x06
     ca6:	26 30       	cpi	r18, 0x06	; 6
     ca8:	31 05       	cpc	r19, r1
     caa:	21 f1       	breq	.+72     	; 0xcf4 <UART_init+0x1ae>
     cac:	7a c0       	rjmp	.+244    	; 0xda2 <UART_init+0x25c>
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	91 05       	cpc	r25, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <UART_init+0x174>
     cb8:	49 c0       	rjmp	.+146    	; 0xd4c <UART_init+0x206>
     cba:	2d 81       	ldd	r18, Y+5	; 0x05
     cbc:	3e 81       	ldd	r19, Y+6	; 0x06
     cbe:	29 30       	cpi	r18, 0x09	; 9
     cc0:	31 05       	cpc	r19, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <UART_init+0x180>
     cc4:	59 c0       	rjmp	.+178    	; 0xd78 <UART_init+0x232>
     cc6:	6d c0       	rjmp	.+218    	; 0xda2 <UART_init+0x25c>
	{
	case _5_DATA_BITS:
		UCSRC &= ~(1 << UCSZ0);
     cc8:	a0 e4       	ldi	r26, 0x40	; 64
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	8c 93       	st	X, r24
		UCSRC &= ~(1 << UCSZ1);
     cd6:	a0 e4       	ldi	r26, 0x40	; 64
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e0 e4       	ldi	r30, 0x40	; 64
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8b 7f       	andi	r24, 0xFB	; 251
     ce2:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
     ce4:	aa e2       	ldi	r26, 0x2A	; 42
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ea e2       	ldi	r30, 0x2A	; 42
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8b 7f       	andi	r24, 0xFB	; 251
     cf0:	8c 93       	st	X, r24
     cf2:	57 c0       	rjmp	.+174    	; 0xda2 <UART_init+0x25c>
		break;
	case _6_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
     cf4:	a0 e4       	ldi	r26, 0x40	; 64
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e4       	ldi	r30, 0x40	; 64
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	8c 93       	st	X, r24
		UCSRC &= ~(1 << UCSZ1);
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e0 e4       	ldi	r30, 0x40	; 64
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
     d10:	aa e2       	ldi	r26, 0x2A	; 42
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e2       	ldi	r30, 0x2A	; 42
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8b 7f       	andi	r24, 0xFB	; 251
     d1c:	8c 93       	st	X, r24
     d1e:	41 c0       	rjmp	.+130    	; 0xda2 <UART_init+0x25c>
		break;
	case _7_DATA_BITS:
		UCSRC &= ~(1 << UCSZ0);
     d20:	a0 e4       	ldi	r26, 0x40	; 64
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e0 e4       	ldi	r30, 0x40	; 64
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8d 7f       	andi	r24, 0xFD	; 253
     d2c:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
     d2e:	a0 e4       	ldi	r26, 0x40	; 64
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e0 e4       	ldi	r30, 0x40	; 64
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
     d3c:	aa e2       	ldi	r26, 0x2A	; 42
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ea e2       	ldi	r30, 0x2A	; 42
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8b 7f       	andi	r24, 0xFB	; 251
     d48:	8c 93       	st	X, r24
     d4a:	2b c0       	rjmp	.+86     	; 0xda2 <UART_init+0x25c>
		break;
	case _8_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
     d4c:	a0 e4       	ldi	r26, 0x40	; 64
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e0 e4       	ldi	r30, 0x40	; 64
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
     d5a:	a0 e4       	ldi	r26, 0x40	; 64
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e0 e4       	ldi	r30, 0x40	; 64
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	84 60       	ori	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
     d68:	aa e2       	ldi	r26, 0x2A	; 42
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ea e2       	ldi	r30, 0x2A	; 42
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8b 7f       	andi	r24, 0xFB	; 251
     d74:	8c 93       	st	X, r24
     d76:	15 c0       	rjmp	.+42     	; 0xda2 <UART_init+0x25c>
		break;
	case  _9_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
     d78:	a0 e4       	ldi	r26, 0x40	; 64
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
     d86:	a0 e4       	ldi	r26, 0x40	; 64
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e0 e4       	ldi	r30, 0x40	; 64
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
		UCSRB |= (1 << UCSZ2);
     d94:	aa e2       	ldi	r26, 0x2A	; 42
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ea e2       	ldi	r30, 0x2A	; 42
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	84 60       	ori	r24, 0x04	; 4
     da0:	8c 93       	st	X, r24
		break;
	}

	/* U2X = 1 for double transmission speed */
		UCSRA |= (1<<U2X);
     da2:	ab e2       	ldi	r26, 0x2B	; 43
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e2       	ldi	r30, 0x2B	; 43
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	8c 93       	st	X, r24
		/* Enable receiver and transmitter*/
		UCSRB |= (1<<RXEN) | (1<<TXEN);
     db0:	aa e2       	ldi	r26, 0x2A	; 42
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ea e2       	ldi	r30, 0x2A	; 42
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 61       	ori	r24, 0x18	; 24
     dbc:	8c 93       	st	X, r24


}
     dbe:	28 96       	adiw	r28, 0x08	; 8
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	0f 92       	push	r0
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     ddc:	eb e2       	ldi	r30, 0x2B	; 43
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	80 72       	andi	r24, 0x20	; 32
     de8:	90 70       	andi	r25, 0x00	; 0
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	b9 f3       	breq	.-18     	; 0xddc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     dee:	ec e2       	ldi	r30, 0x2C	; 44
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     e06:	eb e2       	ldi	r30, 0x2B	; 43
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 23       	and	r24, r24
     e0e:	dc f7       	brge	.-10     	; 0xe06 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     e10:	ec e2       	ldi	r30, 0x2C	; 44
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <UART_sendString+0x6>
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	0e c0       	rjmp	.+28     	; 0xe4c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	fc 01       	movw	r30, r24
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	80 81       	ld	r24, Z
     e42:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
		i++;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	9b 81       	ldd	r25, Y+3	; 0x03
     e56:	fc 01       	movw	r30, r24
     e58:	e2 0f       	add	r30, r18
     e5a:	f3 1f       	adc	r31, r19
     e5c:	80 81       	ld	r24, Z
     e5e:	88 23       	and	r24, r24
     e60:	39 f7       	brne	.-50     	; 0xe30 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <UART_receiveString+0xa>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	9b 83       	std	Y+3, r25	; 0x03
     e80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e82:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	8c 01       	movw	r16, r24
     e90:	02 0f       	add	r16, r18
     e92:	13 1f       	adc	r17, r19
     e94:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
     e98:	f8 01       	movw	r30, r16
     e9a:	80 83       	st	Z, r24
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	8c 01       	movw	r16, r24
     eb0:	02 0f       	add	r16, r18
     eb2:	13 1f       	adc	r17, r19
     eb4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 81       	ld	r24, Z
     ece:	83 32       	cpi	r24, 0x23	; 35
     ed0:	31 f7       	brne	.-52     	; 0xe9e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	10 82       	st	Z, r1
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <Timer_init>:
static void (*g_Timer0_CallBack)(void) = NULL;
static void (*g_Timer1_CallBack)(void) = NULL;
static void (*g_Timer2_CallBack)(void) = NULL;

/* Function to initialize the Timer*/
void Timer_init(const Timer_ConfigType * Config_Ptr) {
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <Timer_init+0x6>
     efa:	00 d0       	rcall	.+0      	; 0xefc <Timer_init+0x8>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) {
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	84 81       	ldd	r24, Z+4	; 0x04
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3c 83       	std	Y+4, r19	; 0x04
     f10:	2b 83       	std	Y+3, r18	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <Timer_init+0x2a>
     f1c:	55 c0       	rjmp	.+170    	; 0xfc8 <Timer_init+0xd4>
     f1e:	2b 81       	ldd	r18, Y+3	; 0x03
     f20:	3c 81       	ldd	r19, Y+4	; 0x04
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <Timer_init+0x36>
     f28:	a0 c0       	rjmp	.+320    	; 0x106a <Timer_init+0x176>
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	09 f0       	breq	.+2      	; 0xf34 <Timer_init+0x40>
     f32:	da c0       	rjmp	.+436    	; 0x10e8 <Timer_init+0x1f4>
        case TIMER0:
            /* Set Timer0 mode (Normal or Compare)*/
        	TCCR0=0;
     f34:	e3 e5       	ldi	r30, 0x53	; 83
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	86 81       	ldd	r24, Z+6	; 0x06
     f40:	88 23       	and	r24, r24
     f42:	79 f4       	brne	.+30     	; 0xf62 <Timer_init+0x6e>
                TCCR0 |= (1 << FOC0);  /* no PWM*/
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE0); /*Enable overflow interrupt forTimer0 */
     f52:	a9 e5       	ldi	r26, 0x59	; 89
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e9 e5       	ldi	r30, 0x59	; 89
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	8c 93       	st	X, r24
     f60:	21 c0       	rjmp	.+66     	; 0xfa4 <Timer_init+0xb0>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
     f62:	e9 81       	ldd	r30, Y+1	; 0x01
     f64:	fa 81       	ldd	r31, Y+2	; 0x02
     f66:	86 81       	ldd	r24, Z+6	; 0x06
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	e1 f4       	brne	.+56     	; 0xfa4 <Timer_init+0xb0>
            	TCCR0 |= (1 << FOC0);  /* no PWM*/
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	8c 93       	st	X, r24
                TCCR0 |= (1 << WGM01) ;  /* CTC mode */
     f7a:	a3 e5       	ldi	r26, 0x53	; 83
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 e5       	ldi	r30, 0x53	; 83
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	8c 93       	st	X, r24
                OCR0 = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value */
     f88:	ac e5       	ldi	r26, 0x5C	; 92
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /*Enable compare interrupt forTimer0 */
     f96:	a9 e5       	ldi	r26, 0x59	; 89
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e9 e5       	ldi	r30, 0x59	; 89
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	8c 93       	st	X, r24
            }
            TCNT0 = Config_Ptr->timer_InitialValue;  /* Set initial value */
     fa4:	a2 e5       	ldi	r26, 0x52	; 82
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	8c 93       	st	X, r24
            TCCR0 |= Config_Ptr->timer_clock;        /* Set clock/prescaler*/
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	90 81       	ld	r25, Z
     fbc:	e9 81       	ldd	r30, Y+1	; 0x01
     fbe:	fa 81       	ldd	r31, Y+2	; 0x02
     fc0:	85 81       	ldd	r24, Z+5	; 0x05
     fc2:	89 2b       	or	r24, r25
     fc4:	8c 93       	st	X, r24
     fc6:	90 c0       	rjmp	.+288    	; 0x10e8 <Timer_init+0x1f4>
            break;

        case TIMER1:
        	/* Set Timer1 mode (Normal or Compare)*/
        	TCCR1A=0;
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	10 82       	st	Z, r1
        	TCCR1B=0;
     fce:	ee e4       	ldi	r30, 0x4E	; 78
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
     fd4:	e9 81       	ldd	r30, Y+1	; 0x01
     fd6:	fa 81       	ldd	r31, Y+2	; 0x02
     fd8:	86 81       	ldd	r24, Z+6	; 0x06
     fda:	88 23       	and	r24, r24
     fdc:	79 f4       	brne	.+30     	; 0xffc <Timer_init+0x108>
                TCCR1A |= (1 << FOC1A) | (1 << FOC1B);  /*no PWM*/
     fde:	af e4       	ldi	r26, 0x4F	; 79
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e4       	ldi	r30, 0x4F	; 79
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8c 60       	ori	r24, 0x0C	; 12
     fea:	8c 93       	st	X, r24
                /* Normal mode:WGM10 = 0,WGM11 = 0,WGM12 = 0,WGM13 = 0 */
                TIMSK |= (1 << TOIE1); /*Enable overflow interrupt forTimer1 */
     fec:	a9 e5       	ldi	r26, 0x59	; 89
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e9 e5       	ldi	r30, 0x59	; 89
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	8c 93       	st	X, r24
     ffa:	23 c0       	rjmp	.+70     	; 0x1042 <Timer_init+0x14e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
     ffc:	e9 81       	ldd	r30, Y+1	; 0x01
     ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	f1 f4       	brne	.+60     	; 0x1042 <Timer_init+0x14e>
            	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);  /* no PWM*/
    1006:	af e4       	ldi	r26, 0x4F	; 79
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ef e4       	ldi	r30, 0x4F	; 79
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8c 60       	ori	r24, 0x0C	; 12
    1012:	8c 93       	st	X, r24
            	/* CTC mode:WGM10 = 0,WGM11 = 0,WGM12 = 1,WGM13 = 0 */
                TCCR1B |= (1 << WGM12);
    1014:	ae e4       	ldi	r26, 0x4E	; 78
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ee e4       	ldi	r30, 0x4E	; 78
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 60       	ori	r24, 0x08	; 8
    1020:	8c 93       	st	X, r24
                OCR1A = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value */
    1022:	aa e4       	ldi	r26, 0x4A	; 74
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
                TIMSK |= (1 <<OCIE1A); /*Enable compare interrupt forTimer1 */
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	8c 93       	st	X, r24
            }
            TCNT1 = Config_Ptr->timer_InitialValue;  /*Set initial value*/
    1042:	ac e4       	ldi	r26, 0x4C	; 76
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	9c 93       	st	X, r25
    1052:	8e 93       	st	-X, r24
            TCCR1B |= Config_Ptr->timer_clock;       /*Set clock/prescaler*/
    1054:	ae e4       	ldi	r26, 0x4E	; 78
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ee e4       	ldi	r30, 0x4E	; 78
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	90 81       	ld	r25, Z
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	85 81       	ldd	r24, Z+5	; 0x05
    1064:	89 2b       	or	r24, r25
    1066:	8c 93       	st	X, r24
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <Timer_init+0x1f4>
            break;

        case TIMER2:
            /* Set Timer2 mode (Normal or Compare)*/
        	TCCR2=0;
    106a:	e5 e4       	ldi	r30, 0x45	; 69
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    1070:	e9 81       	ldd	r30, Y+1	; 0x01
    1072:	fa 81       	ldd	r31, Y+2	; 0x02
    1074:	86 81       	ldd	r24, Z+6	; 0x06
    1076:	88 23       	and	r24, r24
    1078:	29 f4       	brne	.+10     	; 0x1084 <Timer_init+0x190>
                TCCR2 = (1 << FOC2);  /*no PWM*/
    107a:	e5 e4       	ldi	r30, 0x45	; 69
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 e8       	ldi	r24, 0x80	; 128
    1080:	80 83       	st	Z, r24
    1082:	1a c0       	rjmp	.+52     	; 0x10b8 <Timer_init+0x1c4>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
    1088:	86 81       	ldd	r24, Z+6	; 0x06
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	a9 f4       	brne	.+42     	; 0x10b8 <Timer_init+0x1c4>
                TCCR2 |= (1 << WGM21) | (1 << FOC2);  /* CTC mode & no PWM*/
    108e:	a5 e4       	ldi	r26, 0x45	; 69
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e4       	ldi	r30, 0x45	; 69
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 68       	ori	r24, 0x88	; 136
    109a:	8c 93       	st	X, r24
                OCR2 = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value*/
    109c:	a3 e4       	ldi	r26, 0x43	; 67
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /*Enable compare interrupt forTimer2 */
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 68       	ori	r24, 0x80	; 128
    10b6:	8c 93       	st	X, r24
            }
            TCNT2 = Config_Ptr->timer_InitialValue;  /*Set initial value*/
    10b8:	a4 e4       	ldi	r26, 0x44	; 68
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	8c 93       	st	X, r24
            TCCR2 |= Config_Ptr->timer_clock;        /* Set clock/prescaler*/
    10c6:	a5 e4       	ldi	r26, 0x45	; 69
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e4       	ldi	r30, 0x45	; 69
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	90 81       	ld	r25, Z
    10d0:	e9 81       	ldd	r30, Y+1	; 0x01
    10d2:	fa 81       	ldd	r31, Y+2	; 0x02
    10d4:	85 81       	ldd	r24, Z+5	; 0x05
    10d6:	89 2b       	or	r24, r25
    10d8:	8c 93       	st	X, r24
            TIMSK |= (1 << TOIE2); /*Enable overflow interrupt forTimer2 */
    10da:	a9 e5       	ldi	r26, 0x59	; 89
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e9 e5       	ldi	r30, 0x59	; 89
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	8c 93       	st	X, r24

        default:
            /*Invalid Timer ID*/
            break;
    }
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <Timer_deInit>:

/* Function to deinitialize the Timer*/
void Timer_deInit(Timer_ID_Type timer_type) {
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <Timer_deInit+0x6>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3b 83       	std	Y+3, r19	; 0x03
    110c:	2a 83       	std	Y+2, r18	; 0x02
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	a1 f0       	breq	.+40     	; 0x1140 <Timer_deInit+0x4a>
    1118:	2a 81       	ldd	r18, Y+2	; 0x02
    111a:	3b 81       	ldd	r19, Y+3	; 0x03
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	e9 f0       	breq	.+58     	; 0x115c <Timer_deInit+0x66>
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	19 f5       	brne	.+70     	; 0x1170 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0;  /* Stop Timer0 */
    112a:	e3 e5       	ldi	r30, 0x53	; 83
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);  /* Disable Timer0 interrupts */
    1130:	a9 e5       	ldi	r26, 0x59	; 89
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e9 e5       	ldi	r30, 0x59	; 89
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8c 7f       	andi	r24, 0xFC	; 252
    113c:	8c 93       	st	X, r24
    113e:	18 c0       	rjmp	.+48     	; 0x1170 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0;
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	10 82       	st	Z, r1
            TCCR1B = 0;  /* Stop Timer1 */
    1146:	ee e4       	ldi	r30, 0x4E	; 78
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);  /* Disable Timer1 interrupts*/
    114c:	a9 e5       	ldi	r26, 0x59	; 89
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e9 e5       	ldi	r30, 0x59	; 89
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8b 7e       	andi	r24, 0xEB	; 235
    1158:	8c 93       	st	X, r24
    115a:	0a c0       	rjmp	.+20     	; 0x1170 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0;  /* Stop Timer2 */
    115c:	e5 e4       	ldi	r30, 0x45	; 69
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);  /* Disable Timer2 interrupts*/
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8f 73       	andi	r24, 0x3F	; 63
    116e:	8c 93       	st	X, r24

        default:
            /* Invalid Timer ID*/
            break;
    }
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <Timer_setCallBack>:

/*Function to set the callback function*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <Timer_setCallBack+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <Timer_setCallBack+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3d 83       	std	Y+5, r19	; 0x05
    1198:	2c 83       	std	Y+4, r18	; 0x04
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <Timer_setCallBack+0x48>
    11a4:	2c 81       	ldd	r18, Y+4	; 0x04
    11a6:	3d 81       	ldd	r19, Y+5	; 0x05
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	91 f0       	breq	.+36     	; 0x11d2 <Timer_setCallBack+0x56>
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	a1 f4       	brne	.+40     	; 0x11de <Timer_setCallBack+0x62>
        case TIMER0:
            g_Timer0_CallBack = a_ptr;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	90 93 35 01 	sts	0x0135, r25
    11be:	80 93 34 01 	sts	0x0134, r24
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_Timer1_CallBack = a_ptr;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	90 93 37 01 	sts	0x0137, r25
    11cc:	80 93 36 01 	sts	0x0136, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_Timer2_CallBack = a_ptr;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	90 93 39 01 	sts	0x0139, r25
    11da:	80 93 38 01 	sts	0x0138, r24

        default:
            // Invalid Timer ID
            break;
    }
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <__vector_11>:

/* Timer0 Overflow ISR*/
ISR(TIMER0_OVF_vect) {
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0_CallBack != NULL) {
    1218:	80 91 34 01 	lds	r24, 0x0134
    121c:	90 91 35 01 	lds	r25, 0x0135
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	29 f0       	breq	.+10     	; 0x122e <__vector_11+0x40>
        g_Timer0_CallBack();
    1224:	e0 91 34 01 	lds	r30, 0x0134
    1228:	f0 91 35 01 	lds	r31, 0x0135
    122c:	09 95       	icall
    }
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	7f 91       	pop	r23
    1240:	6f 91       	pop	r22
    1242:	5f 91       	pop	r21
    1244:	4f 91       	pop	r20
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_10>:

/* Timer0 Compare Match ISR*/
ISR(TIMER0_COMP_vect) {
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0_CallBack != NULL) {
    127e:	80 91 34 01 	lds	r24, 0x0134
    1282:	90 91 35 01 	lds	r25, 0x0135
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	29 f0       	breq	.+10     	; 0x1294 <__vector_10+0x40>
        g_Timer0_CallBack();
    128a:	e0 91 34 01 	lds	r30, 0x0134
    128e:	f0 91 35 01 	lds	r31, 0x0135
    1292:	09 95       	icall
    }
}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_9>:

/* Timer1 Overflow ISR*/
ISR(TIMER1_OVF_vect) {
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	2f 93       	push	r18
    12c6:	3f 93       	push	r19
    12c8:	4f 93       	push	r20
    12ca:	5f 93       	push	r21
    12cc:	6f 93       	push	r22
    12ce:	7f 93       	push	r23
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	af 93       	push	r26
    12d6:	bf 93       	push	r27
    12d8:	ef 93       	push	r30
    12da:	ff 93       	push	r31
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1_CallBack != NULL) {
    12e4:	80 91 36 01 	lds	r24, 0x0136
    12e8:	90 91 37 01 	lds	r25, 0x0137
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	29 f0       	breq	.+10     	; 0x12fa <__vector_9+0x40>
        g_Timer1_CallBack();
    12f0:	e0 91 36 01 	lds	r30, 0x0136
    12f4:	f0 91 37 01 	lds	r31, 0x0137
    12f8:	09 95       	icall
    }
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	ff 91       	pop	r31
    1300:	ef 91       	pop	r30
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	9f 91       	pop	r25
    1308:	8f 91       	pop	r24
    130a:	7f 91       	pop	r23
    130c:	6f 91       	pop	r22
    130e:	5f 91       	pop	r21
    1310:	4f 91       	pop	r20
    1312:	3f 91       	pop	r19
    1314:	2f 91       	pop	r18
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <__vector_7>:

/* Timer1 Compare Match ISR */
ISR(TIMER1_COMPA_vect) {
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1_CallBack != NULL) {
    134a:	80 91 36 01 	lds	r24, 0x0136
    134e:	90 91 37 01 	lds	r25, 0x0137
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	29 f0       	breq	.+10     	; 0x1360 <__vector_7+0x40>
        g_Timer1_CallBack();
    1356:	e0 91 36 01 	lds	r30, 0x0136
    135a:	f0 91 37 01 	lds	r31, 0x0137
    135e:	09 95       	icall
    }
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_5>:

/* Timer2 Overflow ISR*/
ISR(TIMER2_OVF_vect) {
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2_CallBack != NULL) {
    13b0:	80 91 38 01 	lds	r24, 0x0138
    13b4:	90 91 39 01 	lds	r25, 0x0139
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	29 f0       	breq	.+10     	; 0x13c6 <__vector_5+0x40>
        g_Timer2_CallBack();
    13bc:	e0 91 38 01 	lds	r30, 0x0138
    13c0:	f0 91 39 01 	lds	r31, 0x0139
    13c4:	09 95       	icall
    }
}
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	bf 91       	pop	r27
    13d0:	af 91       	pop	r26
    13d2:	9f 91       	pop	r25
    13d4:	8f 91       	pop	r24
    13d6:	7f 91       	pop	r23
    13d8:	6f 91       	pop	r22
    13da:	5f 91       	pop	r21
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <__vector_4>:

/* Timer2 Compare Match ISR*/
ISR(TIMER2_COMP_vect) {
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2_CallBack != NULL) {
    1416:	80 91 38 01 	lds	r24, 0x0138
    141a:	90 91 39 01 	lds	r25, 0x0139
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	29 f0       	breq	.+10     	; 0x142c <__vector_4+0x40>
        g_Timer2_CallBack();
    1422:	e0 91 38 01 	lds	r30, 0x0138
    1426:	f0 91 39 01 	lds	r31, 0x0139
    142a:	09 95       	icall
    }
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_setupPinDirection+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <GPIO_setupPinDirection+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	08 f0       	brcs	.+2      	; 0x146e <GPIO_setupPinDirection+0x1c>
    146c:	d5 c0       	rjmp	.+426    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	08 f0       	brcs	.+2      	; 0x1476 <GPIO_setupPinDirection+0x24>
    1474:	d1 c0       	rjmp	.+418    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	2c 83       	std	Y+4, r18	; 0x04
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <GPIO_setupPinDirection+0x3a>
    148a:	43 c0       	rjmp	.+134    	; 0x1512 <GPIO_setupPinDirection+0xc0>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	2c f4       	brge	.+10     	; 0x14a0 <GPIO_setupPinDirection+0x4e>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	71 f0       	breq	.+28     	; 0x14ba <GPIO_setupPinDirection+0x68>
    149e:	bc c0       	rjmp	.+376    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
    14a0:	2c 81       	ldd	r18, Y+4	; 0x04
    14a2:	3d 81       	ldd	r19, Y+5	; 0x05
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <GPIO_setupPinDirection+0x5a>
    14aa:	5f c0       	rjmp	.+190    	; 0x156a <GPIO_setupPinDirection+0x118>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <GPIO_setupPinDirection+0x66>
    14b6:	85 c0       	rjmp	.+266    	; 0x15c2 <GPIO_setupPinDirection+0x170>
    14b8:	af c0       	rjmp	.+350    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14c0:	aa e3       	ldi	r26, 0x3A	; 58
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ea e3       	ldi	r30, 0x3A	; 58
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_setupPinDirection+0x8c>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_setupPinDirection+0x88>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	98 c0       	rjmp	.+304    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14e8:	aa e3       	ldi	r26, 0x3A	; 58
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <GPIO_setupPinDirection+0xb4>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <GPIO_setupPinDirection+0xb0>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	83 c0       	rjmp	.+262    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	a1 f4       	brne	.+40     	; 0x1540 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1518:	a7 e3       	ldi	r26, 0x37	; 55
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e7 e3       	ldi	r30, 0x37	; 55
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <GPIO_setupPinDirection+0xe4>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <GPIO_setupPinDirection+0xe0>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	6c c0       	rjmp	.+216    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1540:	a7 e3       	ldi	r26, 0x37	; 55
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e7 e3       	ldi	r30, 0x37	; 55
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_setupPinDirection+0x10c>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_setupPinDirection+0x108>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	57 c0       	rjmp	.+174    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	a1 f4       	brne	.+40     	; 0x1598 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1570:	a4 e3       	ldi	r26, 0x34	; 52
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e3       	ldi	r30, 0x34	; 52
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_setupPinDirection+0x13c>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_setupPinDirection+0x138>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	40 c0       	rjmp	.+128    	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1598:	a4 e3       	ldi	r26, 0x34	; 52
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e4 e3       	ldi	r30, 0x34	; 52
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_setupPinDirection+0x164>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_setupPinDirection+0x160>
    15ba:	80 95       	com	r24
    15bc:	84 23       	and	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	2b c0       	rjmp	.+86     	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	a1 f4       	brne	.+40     	; 0x15f0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15c8:	a1 e3       	ldi	r26, 0x31	; 49
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_setupPinDirection+0x194>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_setupPinDirection+0x190>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_setupPinDirection+0x1bc>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_setupPinDirection+0x1b8>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_writePin+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <GPIO_writePin+0x8>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	6a 83       	std	Y+2, r22	; 0x02
    163a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	08 f0       	brcs	.+2      	; 0x1644 <GPIO_writePin+0x1c>
    1642:	d5 c0       	rjmp	.+426    	; 0x17ee <GPIO_writePin+0x1c6>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	08 f0       	brcs	.+2      	; 0x164c <GPIO_writePin+0x24>
    164a:	d1 c0       	rjmp	.+418    	; 0x17ee <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3d 83       	std	Y+5, r19	; 0x05
    1654:	2c 83       	std	Y+4, r18	; 0x04
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <GPIO_writePin+0x3a>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <GPIO_writePin+0xc0>
    1662:	2c 81       	ldd	r18, Y+4	; 0x04
    1664:	3d 81       	ldd	r19, Y+5	; 0x05
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <GPIO_writePin+0x4e>
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	71 f0       	breq	.+28     	; 0x1690 <GPIO_writePin+0x68>
    1674:	bc c0       	rjmp	.+376    	; 0x17ee <GPIO_writePin+0x1c6>
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <GPIO_writePin+0x5a>
    1680:	5f c0       	rjmp	.+190    	; 0x1740 <GPIO_writePin+0x118>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <GPIO_writePin+0x66>
    168c:	85 c0       	rjmp	.+266    	; 0x1798 <GPIO_writePin+0x170>
    168e:	af c0       	rjmp	.+350    	; 0x17ee <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	a1 f4       	brne	.+40     	; 0x16be <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_writePin+0x8c>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_writePin+0x88>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	98 c0       	rjmp	.+304    	; 0x17ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_writePin+0xb4>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_writePin+0xb0>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	83 c0       	rjmp	.+262    	; 0x17ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16ee:	a8 e3       	ldi	r26, 0x38	; 56
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 e3       	ldi	r30, 0x38	; 56
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_writePin+0xe4>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_writePin+0xe0>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	6c c0       	rjmp	.+216    	; 0x17ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0x10c>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0x108>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	57 c0       	rjmp	.+174    	; 0x17ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	a1 f4       	brne	.+40     	; 0x176e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1746:	a5 e3       	ldi	r26, 0x35	; 53
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e5 e3       	ldi	r30, 0x35	; 53
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_writePin+0x13c>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_writePin+0x138>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	40 c0       	rjmp	.+128    	; 0x17ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    176e:	a5 e3       	ldi	r26, 0x35	; 53
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e3       	ldi	r30, 0x35	; 53
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_writePin+0x164>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_writePin+0x160>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	2b c0       	rjmp	.+86     	; 0x17ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	a1 f4       	brne	.+40     	; 0x17c6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    179e:	a2 e3       	ldi	r26, 0x32	; 50
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e2 e3       	ldi	r30, 0x32	; 50
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_writePin+0x194>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_writePin+0x190>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x1bc>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x1b8>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_readPin+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <GPIO_readPin+0x8>
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1810:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	08 f0       	brcs	.+2      	; 0x181a <GPIO_readPin+0x1c>
    1818:	84 c0       	rjmp	.+264    	; 0x1922 <GPIO_readPin+0x124>
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	08 f0       	brcs	.+2      	; 0x1822 <GPIO_readPin+0x24>
    1820:	80 c0       	rjmp	.+256    	; 0x1922 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3d 83       	std	Y+5, r19	; 0x05
    182a:	2c 83       	std	Y+4, r18	; 0x04
    182c:	4c 81       	ldd	r20, Y+4	; 0x04
    182e:	5d 81       	ldd	r21, Y+5	; 0x05
    1830:	41 30       	cpi	r20, 0x01	; 1
    1832:	51 05       	cpc	r21, r1
    1834:	79 f1       	breq	.+94     	; 0x1894 <GPIO_readPin+0x96>
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	91 05       	cpc	r25, r1
    183e:	34 f4       	brge	.+12     	; 0x184c <GPIO_readPin+0x4e>
    1840:	2c 81       	ldd	r18, Y+4	; 0x04
    1842:	3d 81       	ldd	r19, Y+5	; 0x05
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	69 f0       	breq	.+26     	; 0x1864 <GPIO_readPin+0x66>
    184a:	6b c0       	rjmp	.+214    	; 0x1922 <GPIO_readPin+0x124>
    184c:	4c 81       	ldd	r20, Y+4	; 0x04
    184e:	5d 81       	ldd	r21, Y+5	; 0x05
    1850:	42 30       	cpi	r20, 0x02	; 2
    1852:	51 05       	cpc	r21, r1
    1854:	b9 f1       	breq	.+110    	; 0x18c4 <GPIO_readPin+0xc6>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_readPin+0x64>
    1860:	49 c0       	rjmp	.+146    	; 0x18f4 <GPIO_readPin+0xf6>
    1862:	5f c0       	rjmp	.+190    	; 0x1922 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1864:	e9 e3       	ldi	r30, 0x39	; 57
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_readPin+0x7e>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_readPin+0x7a>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	88 23       	and	r24, r24
    1888:	19 f0       	breq	.+6      	; 0x1890 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	49 c0       	rjmp	.+146    	; 0x1922 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	47 c0       	rjmp	.+142    	; 0x1922 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1894:	e6 e3       	ldi	r30, 0x36	; 54
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a9 01       	movw	r20, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <GPIO_readPin+0xae>
    18a8:	55 95       	asr	r21
    18aa:	47 95       	ror	r20
    18ac:	8a 95       	dec	r24
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <GPIO_readPin+0xaa>
    18b0:	ca 01       	movw	r24, r20
    18b2:	81 70       	andi	r24, 0x01	; 1
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	88 23       	and	r24, r24
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	31 c0       	rjmp	.+98     	; 0x1922 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18c0:	19 82       	std	Y+1, r1	; 0x01
    18c2:	2f c0       	rjmp	.+94     	; 0x1922 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18c4:	e3 e3       	ldi	r30, 0x33	; 51
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_readPin+0xde>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_readPin+0xda>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	88 23       	and	r24, r24
    18e8:	19 f0       	breq	.+6      	; 0x18f0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	19 c0       	rjmp	.+50     	; 0x1922 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18f0:	19 82       	std	Y+1, r1	; 0x01
    18f2:	17 c0       	rjmp	.+46     	; 0x1922 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18f4:	e0 e3       	ldi	r30, 0x30	; 48
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <GPIO_readPin+0x10e>
    1908:	55 95       	asr	r21
    190a:	47 95       	ror	r20
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <GPIO_readPin+0x10a>
    1910:	ca 01       	movw	r24, r20
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	90 70       	andi	r25, 0x00	; 0
    1916:	88 23       	and	r24, r24
    1918:	19 f0       	breq	.+6      	; 0x1920 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1920:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_setupPortDirection+0x6>
    193a:	00 d0       	rcall	.+0      	; 0x193c <GPIO_setupPortDirection+0x8>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	90 f5       	brcc	.+100    	; 0x19ae <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3c 83       	std	Y+4, r19	; 0x04
    1952:	2b 83       	std	Y+3, r18	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	d1 f0       	breq	.+52     	; 0x1992 <GPIO_setupPortDirection+0x5e>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <GPIO_setupPortDirection+0x3e>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	61 f0       	breq	.+24     	; 0x1988 <GPIO_setupPortDirection+0x54>
    1970:	1e c0       	rjmp	.+60     	; 0x19ae <GPIO_setupPortDirection+0x7a>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <GPIO_setupPortDirection+0x68>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <GPIO_setupPortDirection+0x72>
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1988:	ea e3       	ldi	r30, 0x3A	; 58
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 83       	st	Z, r24
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1992:	e7 e3       	ldi	r30, 0x37	; 55
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	80 83       	st	Z, r24
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    199c:	e4 e3       	ldi	r30, 0x34	; 52
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	80 83       	st	Z, r24
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	80 83       	st	Z, r24
			break;
		}
	}
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <GPIO_writePort+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <GPIO_writePort+0x8>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	84 30       	cpi	r24, 0x04	; 4
    19d0:	90 f5       	brcc	.+100    	; 0x1a36 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3c 83       	std	Y+4, r19	; 0x04
    19da:	2b 83       	std	Y+3, r18	; 0x03
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	d1 f0       	breq	.+52     	; 0x1a1a <GPIO_writePort+0x5e>
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	2c f4       	brge	.+10     	; 0x19fa <GPIO_writePort+0x3e>
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	61 f0       	breq	.+24     	; 0x1a10 <GPIO_writePort+0x54>
    19f8:	1e c0       	rjmp	.+60     	; 0x1a36 <GPIO_writePort+0x7a>
    19fa:	2b 81       	ldd	r18, Y+3	; 0x03
    19fc:	3c 81       	ldd	r19, Y+4	; 0x04
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	81 f0       	breq	.+32     	; 0x1a24 <GPIO_writePort+0x68>
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	81 f0       	breq	.+32     	; 0x1a2e <GPIO_writePort+0x72>
    1a0e:	13 c0       	rjmp	.+38     	; 0x1a36 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a10:	eb e3       	ldi	r30, 0x3B	; 59
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	80 83       	st	Z, r24
    1a18:	0e c0       	rjmp	.+28     	; 0x1a36 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a1a:	e8 e3       	ldi	r30, 0x38	; 56
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	80 83       	st	Z, r24
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	80 83       	st	Z, r24
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a2e:	e2 e3       	ldi	r30, 0x32	; 50
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <GPIO_readPort+0x6>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <GPIO_readPort+0x8>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a52:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	90 f5       	brcc	.+100    	; 0x1abe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3c 83       	std	Y+4, r19	; 0x04
    1a62:	2b 83       	std	Y+3, r18	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <GPIO_readPort+0x5e>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <GPIO_readPort+0x3e>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <GPIO_readPort+0x54>
    1a80:	1e c0       	rjmp	.+60     	; 0x1abe <GPIO_readPort+0x7a>
    1a82:	2b 81       	ldd	r18, Y+3	; 0x03
    1a84:	3c 81       	ldd	r19, Y+4	; 0x04
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <GPIO_readPort+0x68>
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	81 f0       	breq	.+32     	; 0x1ab6 <GPIO_readPort+0x72>
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a98:	e9 e3       	ldi	r30, 0x39	; 57
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	0e c0       	rjmp	.+28     	; 0x1abe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1aa2:	e6 e3       	ldi	r30, 0x36	; 54
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1aac:	e3 e3       	ldi	r30, 0x33	; 51
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ab6:	e0 e3       	ldi	r30, 0x30	; 48
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 ea       	ldi	r26, 0xA0	; 160
    1afc:	b1 e4       	ldi	r27, 0x41	; 65
    1afe:	8b 87       	std	Y+11, r24	; 0x0b
    1b00:	9c 87       	std	Y+12, r25	; 0x0c
    1b02:	ad 87       	std	Y+13, r26	; 0x0d
    1b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a ef       	ldi	r20, 0xFA	; 250
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
    1b20:	98 87       	std	Y+8, r25	; 0x08
    1b22:	a9 87       	std	Y+9, r26	; 0x09
    1b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_init+0x7a>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_init+0xda>
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_init+0xc8>
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_init+0xbc>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_init+0x104>
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	6f ef       	ldi	r22, 0xFF	; 255
    1bde:	0e 94 9a 0c 	call	0x1934	; 0x1934 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1be2:	88 e3       	ldi	r24, 0x38	; 56
    1be4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1be8:	8c e0       	ldi	r24, 0x0C	; 12
    1bea:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_sendCommand>
}
    1bf4:	2e 96       	adiw	r28, 0x0e	; 14
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	e9 97       	sbiw	r28, 0x39	; 57
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	8d ab       	std	Y+53, r24	; 0x35
    1c30:	9e ab       	std	Y+54, r25	; 0x36
    1c32:	af ab       	std	Y+55, r26	; 0x37
    1c34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6d a9       	ldd	r22, Y+53	; 0x35
    1c38:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	89 ab       	std	Y+49, r24	; 0x31
    1c50:	9a ab       	std	Y+50, r25	; 0x32
    1c52:	ab ab       	std	Y+51, r26	; 0x33
    1c54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c56:	69 a9       	ldd	r22, Y+49	; 0x31
    1c58:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_sendCommand+0x72>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	98 ab       	std	Y+48, r25	; 0x30
    1c74:	8f a7       	std	Y+47, r24	; 0x2f
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6d a9       	ldd	r22, Y+53	; 0x35
    1c92:	7e a9       	ldd	r23, Y+54	; 0x36
    1c94:	8f a9       	ldd	r24, Y+55	; 0x37
    1c96:	98 ad       	ldd	r25, Y+56	; 0x38
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	98 ab       	std	Y+48, r25	; 0x30
    1cb6:	8f a7       	std	Y+47, r24	; 0x2f
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_sendCommand+0xd2>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e a7       	std	Y+46, r25	; 0x2e
    1cc0:	8d a7       	std	Y+45, r24	; 0x2d
    1cc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_sendCommand+0xc0>
    1cca:	9e a7       	std	Y+46, r25	; 0x2e
    1ccc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	98 ab       	std	Y+48, r25	; 0x30
    1cd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cda:	98 a9       	ldd	r25, Y+48	; 0x30
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_sendCommand+0xb4>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	98 ab       	std	Y+48, r25	; 0x30
    1cf4:	8f a7       	std	Y+47, r24	; 0x2f
    1cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfa:	9c a7       	std	Y+44, r25	; 0x2c
    1cfc:	8b a7       	std	Y+43, r24	; 0x2b
    1cfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_sendCommand+0xfc>
    1d06:	9c a7       	std	Y+44, r25	; 0x2c
    1d08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e8       	ldi	r26, 0x80	; 128
    1d1a:	bf e3       	ldi	r27, 0x3F	; 63
    1d1c:	8f a3       	std	Y+39, r24	; 0x27
    1d1e:	98 a7       	std	Y+40, r25	; 0x28
    1d20:	a9 a7       	std	Y+41, r26	; 0x29
    1d22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	6f a1       	ldd	r22, Y+39	; 0x27
    1d26:	78 a5       	ldd	r23, Y+40	; 0x28
    1d28:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a ef       	ldi	r20, 0xFA	; 250
    1d32:	54 e4       	ldi	r21, 0x44	; 68
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8b a3       	std	Y+35, r24	; 0x23
    1d3e:	9c a3       	std	Y+36, r25	; 0x24
    1d40:	ad a3       	std	Y+37, r26	; 0x25
    1d42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d44:	6b a1       	ldd	r22, Y+35	; 0x23
    1d46:	7c a1       	ldd	r23, Y+36	; 0x24
    1d48:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <LCD_sendCommand+0x160>
		__ticks = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	3f ef       	ldi	r19, 0xFF	; 255
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	57 e4       	ldi	r21, 0x47	; 71
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	4c f5       	brge	.+82     	; 0x1dd0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d80:	78 a5       	ldd	r23, Y+40	; 0x28
    1d82:	89 a5       	ldd	r24, Y+41	; 0x29
    1d84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e2       	ldi	r20, 0x20	; 32
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9a a3       	std	Y+34, r25	; 0x22
    1da4:	89 a3       	std	Y+33, r24	; 0x21
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_sendCommand+0x1c0>
    1da8:	88 ec       	ldi	r24, 0xC8	; 200
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	98 a3       	std	Y+32, r25	; 0x20
    1dae:	8f 8f       	std	Y+31, r24	; 0x1f
    1db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db2:	98 a1       	ldd	r25, Y+32	; 0x20
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_sendCommand+0x1ae>
    1db8:	98 a3       	std	Y+32, r25	; 0x20
    1dba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9a a3       	std	Y+34, r25	; 0x22
    1dc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	69 f7       	brne	.-38     	; 0x1da8 <LCD_sendCommand+0x1a2>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9a a3       	std	Y+34, r25	; 0x22
    1de2:	89 a3       	std	Y+33, r24	; 0x21
    1de4:	89 a1       	ldd	r24, Y+33	; 0x21
    1de6:	9a a1       	ldd	r25, Y+34	; 0x22
    1de8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dea:	8d 8f       	std	Y+29, r24	; 0x1d
    1dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_sendCommand+0x1ea>
    1df4:	9e 8f       	std	Y+30, r25	; 0x1e
    1df6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	69 ad       	ldd	r22, Y+57	; 0x39
    1dfc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <GPIO_writePort>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e8       	ldi	r26, 0x80	; 128
    1e06:	bf e3       	ldi	r27, 0x3F	; 63
    1e08:	89 8f       	std	Y+25, r24	; 0x19
    1e0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	69 8d       	ldd	r22, Y+25	; 0x19
    1e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a ef       	ldi	r20, 0xFA	; 250
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8d 8b       	std	Y+21, r24	; 0x15
    1e2a:	9e 8b       	std	Y+22, r25	; 0x16
    1e2c:	af 8b       	std	Y+23, r26	; 0x17
    1e2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9c 8b       	std	Y+20, r25	; 0x14
    1e90:	8b 8b       	std	Y+19, r24	; 0x13
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_sendCommand+0x2ac>
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9a 8b       	std	Y+18, r25	; 0x12
    1e9a:	89 8b       	std	Y+17, r24	; 0x11
    1e9c:	89 89       	ldd	r24, Y+17	; 0x11
    1e9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_sendCommand+0x29a>
    1ea4:	9a 8b       	std	Y+18, r25	; 0x12
    1ea6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_sendCommand+0x28e>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9c 8b       	std	Y+20, r25	; 0x14
    1ece:	8b 8b       	std	Y+19, r24	; 0x13
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
    1ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eda:	98 89       	ldd	r25, Y+16	; 0x10
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_sendCommand+0x2d6>
    1ee0:	98 8b       	std	Y+16, r25	; 0x10
    1ee2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e8       	ldi	r26, 0x80	; 128
    1ef4:	bf e3       	ldi	r27, 0x3F	; 63
    1ef6:	8b 87       	std	Y+11, r24	; 0x0b
    1ef8:	9c 87       	std	Y+12, r25	; 0x0c
    1efa:	ad 87       	std	Y+13, r26	; 0x0d
    1efc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8f 83       	std	Y+7, r24	; 0x07
    1f18:	98 87       	std	Y+8, r25	; 0x08
    1f1a:	a9 87       	std	Y+9, r26	; 0x09
    1f1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	3f c0       	rjmp	.+126    	; 0x1fbe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	57 e4       	ldi	r21, 0x47	; 71
    1f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	4c f5       	brge	.+82     	; 0x1faa <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e2       	ldi	r20, 0x20	; 32
    1f66:	51 e4       	ldi	r21, 0x41	; 65
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <LCD_sendCommand+0x39a>
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_sendCommand+0x388>
    1f92:	9c 83       	std	Y+4, r25	; 0x04
    1f94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <LCD_sendCommand+0x37c>
    1fa8:	14 c0       	rjmp	.+40     	; 0x1fd2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	6f 81       	ldd	r22, Y+7	; 0x07
    1fac:	78 85       	ldd	r23, Y+8	; 0x08
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9e 83       	std	Y+6, r25	; 0x06
    1fbc:	8d 83       	std	Y+5, r24	; 0x05
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_sendCommand+0x3c4>
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fd2:	e9 96       	adiw	r28, 0x39	; 57
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	e9 97       	sbiw	r28, 0x39	; 57
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 e8       	ldi	r26, 0x80	; 128
    200a:	bf e3       	ldi	r27, 0x3F	; 63
    200c:	8d ab       	std	Y+53, r24	; 0x35
    200e:	9e ab       	std	Y+54, r25	; 0x36
    2010:	af ab       	std	Y+55, r26	; 0x37
    2012:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6d a9       	ldd	r22, Y+53	; 0x35
    2016:	7e a9       	ldd	r23, Y+54	; 0x36
    2018:	8f a9       	ldd	r24, Y+55	; 0x37
    201a:	98 ad       	ldd	r25, Y+56	; 0x38
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	89 ab       	std	Y+49, r24	; 0x31
    202e:	9a ab       	std	Y+50, r25	; 0x32
    2030:	ab ab       	std	Y+51, r26	; 0x33
    2032:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2034:	69 a9       	ldd	r22, Y+49	; 0x31
    2036:	7a a9       	ldd	r23, Y+50	; 0x32
    2038:	8b a9       	ldd	r24, Y+51	; 0x33
    203a:	9c a9       	ldd	r25, Y+52	; 0x34
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <LCD_displayCharacter+0x72>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2056:	69 a9       	ldd	r22, Y+49	; 0x31
    2058:	7a a9       	ldd	r23, Y+50	; 0x32
    205a:	8b a9       	ldd	r24, Y+51	; 0x33
    205c:	9c a9       	ldd	r25, Y+52	; 0x34
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6d a9       	ldd	r22, Y+53	; 0x35
    2070:	7e a9       	ldd	r23, Y+54	; 0x36
    2072:	8f a9       	ldd	r24, Y+55	; 0x37
    2074:	98 ad       	ldd	r25, Y+56	; 0x38
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	98 ab       	std	Y+48, r25	; 0x30
    2094:	8f a7       	std	Y+47, r24	; 0x2f
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <LCD_displayCharacter+0xd2>
    2098:	88 ec       	ldi	r24, 0xC8	; 200
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9e a7       	std	Y+46, r25	; 0x2e
    209e:	8d a7       	std	Y+45, r24	; 0x2d
    20a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_displayCharacter+0xc0>
    20a8:	9e a7       	std	Y+46, r25	; 0x2e
    20aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	98 a9       	ldd	r25, Y+48	; 0x30
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	98 ab       	std	Y+48, r25	; 0x30
    20b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <LCD_displayCharacter+0xb4>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	69 a9       	ldd	r22, Y+49	; 0x31
    20c2:	7a a9       	ldd	r23, Y+50	; 0x32
    20c4:	8b a9       	ldd	r24, Y+51	; 0x33
    20c6:	9c a9       	ldd	r25, Y+52	; 0x34
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	9c a7       	std	Y+44, r25	; 0x2c
    20da:	8b a7       	std	Y+43, r24	; 0x2b
    20dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20de:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_displayCharacter+0xfc>
    20e4:	9c a7       	std	Y+44, r25	; 0x2c
    20e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e8       	ldi	r26, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	8f a3       	std	Y+39, r24	; 0x27
    20fc:	98 a7       	std	Y+40, r25	; 0x28
    20fe:	a9 a7       	std	Y+41, r26	; 0x29
    2100:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	6f a1       	ldd	r22, Y+39	; 0x27
    2104:	78 a5       	ldd	r23, Y+40	; 0x28
    2106:	89 a5       	ldd	r24, Y+41	; 0x29
    2108:	9a a5       	ldd	r25, Y+42	; 0x2a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a ef       	ldi	r20, 0xFA	; 250
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8b a3       	std	Y+35, r24	; 0x23
    211c:	9c a3       	std	Y+36, r25	; 0x24
    211e:	ad a3       	std	Y+37, r26	; 0x25
    2120:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2122:	6b a1       	ldd	r22, Y+35	; 0x23
    2124:	7c a1       	ldd	r23, Y+36	; 0x24
    2126:	8d a1       	ldd	r24, Y+37	; 0x25
    2128:	9e a1       	ldd	r25, Y+38	; 0x26
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <LCD_displayCharacter+0x160>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9a a3       	std	Y+34, r25	; 0x22
    2140:	89 a3       	std	Y+33, r24	; 0x21
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2144:	6b a1       	ldd	r22, Y+35	; 0x23
    2146:	7c a1       	ldd	r23, Y+36	; 0x24
    2148:	8d a1       	ldd	r24, Y+37	; 0x25
    214a:	9e a1       	ldd	r25, Y+38	; 0x26
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	6f a1       	ldd	r22, Y+39	; 0x27
    215e:	78 a5       	ldd	r23, Y+40	; 0x28
    2160:	89 a5       	ldd	r24, Y+41	; 0x29
    2162:	9a a5       	ldd	r25, Y+42	; 0x2a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9a a3       	std	Y+34, r25	; 0x22
    2182:	89 a3       	std	Y+33, r24	; 0x21
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <LCD_displayCharacter+0x1c0>
    2186:	88 ec       	ldi	r24, 0xC8	; 200
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	98 a3       	std	Y+32, r25	; 0x20
    218c:	8f 8f       	std	Y+31, r24	; 0x1f
    218e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2190:	98 a1       	ldd	r25, Y+32	; 0x20
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_displayCharacter+0x1ae>
    2196:	98 a3       	std	Y+32, r25	; 0x20
    2198:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	9a a1       	ldd	r25, Y+34	; 0x22
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <LCD_displayCharacter+0x1a2>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6b a1       	ldd	r22, Y+35	; 0x23
    21b0:	7c a1       	ldd	r23, Y+36	; 0x24
    21b2:	8d a1       	ldd	r24, Y+37	; 0x25
    21b4:	9e a1       	ldd	r25, Y+38	; 0x26
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9a a3       	std	Y+34, r25	; 0x22
    21c0:	89 a3       	std	Y+33, r24	; 0x21
    21c2:	89 a1       	ldd	r24, Y+33	; 0x21
    21c4:	9a a1       	ldd	r25, Y+34	; 0x22
    21c6:	9e 8f       	std	Y+30, r25	; 0x1e
    21c8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_displayCharacter+0x1ea>
    21d2:	9e 8f       	std	Y+30, r25	; 0x1e
    21d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	69 ad       	ldd	r22, Y+57	; 0x39
    21da:	0e 94 de 0c 	call	0x19bc	; 0x19bc <GPIO_writePort>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	89 8f       	std	Y+25, r24	; 0x19
    21e8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ea:	ab 8f       	std	Y+27, r26	; 0x1b
    21ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	69 8d       	ldd	r22, Y+25	; 0x19
    21f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8d 8b       	std	Y+21, r24	; 0x15
    2208:	9e 8b       	std	Y+22, r25	; 0x16
    220a:	af 8b       	std	Y+23, r26	; 0x17
    220c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220e:	6d 89       	ldd	r22, Y+21	; 0x15
    2210:	7e 89       	ldd	r23, Y+22	; 0x16
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	98 8d       	ldd	r25, Y+24	; 0x18
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2230:	6d 89       	ldd	r22, Y+21	; 0x15
    2232:	7e 89       	ldd	r23, Y+22	; 0x16
    2234:	8f 89       	ldd	r24, Y+23	; 0x17
    2236:	98 8d       	ldd	r25, Y+24	; 0x18
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	69 8d       	ldd	r22, Y+25	; 0x19
    224a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_displayCharacter+0x2ac>
    2272:	88 ec       	ldi	r24, 0xC8	; 200
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9a 8b       	std	Y+18, r25	; 0x12
    2278:	89 8b       	std	Y+17, r24	; 0x11
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	9a 89       	ldd	r25, Y+18	; 0x12
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_displayCharacter+0x29a>
    2282:	9a 8b       	std	Y+18, r25	; 0x12
    2284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <LCD_displayCharacter+0x28e>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	8b 89       	ldd	r24, Y+19	; 0x13
    22b0:	9c 89       	ldd	r25, Y+20	; 0x14
    22b2:	98 8b       	std	Y+16, r25	; 0x10
    22b4:	8f 87       	std	Y+15, r24	; 0x0f
    22b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b8:	98 89       	ldd	r25, Y+16	; 0x10
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_displayCharacter+0x2d6>
    22be:	98 8b       	std	Y+16, r25	; 0x10
    22c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_displayCharacter+0x39a>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_displayCharacter+0x388>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_displayCharacter+0x37c>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_displayCharacter+0x3c4>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23b0:	e9 96       	adiw	r28, 0x39	; 57
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <LCD_displayString+0x6>
    23c8:	0f 92       	push	r0
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9b 83       	std	Y+3, r25	; 0x03
    23d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	0e c0       	rjmp	.+28     	; 0x23f2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	9b 81       	ldd	r25, Y+3	; 0x03
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	80 81       	ld	r24, Z
    23e8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
		i++;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	9b 81       	ldd	r25, Y+3	; 0x03
    23fc:	fc 01       	movw	r30, r24
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	80 81       	ld	r24, Z
    2404:	88 23       	and	r24, r24
    2406:	39 f7       	brne	.-50     	; 0x23d6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <LCD_moveCursor+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_moveCursor+0x8>
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	3d 83       	std	Y+5, r19	; 0x05
    242e:	2c 83       	std	Y+4, r18	; 0x04
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	9d 81       	ldd	r25, Y+5	; 0x05
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	91 05       	cpc	r25, r1
    2438:	c1 f0       	breq	.+48     	; 0x246a <LCD_moveCursor+0x56>
    243a:	2c 81       	ldd	r18, Y+4	; 0x04
    243c:	3d 81       	ldd	r19, Y+5	; 0x05
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_moveCursor+0x3a>
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	61 f0       	breq	.+24     	; 0x2464 <LCD_moveCursor+0x50>
    244c:	19 c0       	rjmp	.+50     	; 0x2480 <LCD_moveCursor+0x6c>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	69 f0       	breq	.+26     	; 0x2472 <LCD_moveCursor+0x5e>
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	83 30       	cpi	r24, 0x03	; 3
    245e:	91 05       	cpc	r25, r1
    2460:	61 f0       	breq	.+24     	; 0x247a <LCD_moveCursor+0x66>
    2462:	0e c0       	rjmp	.+28     	; 0x2480 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	80 5c       	subi	r24, 0xC0	; 192
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	07 c0       	rjmp	.+14     	; 0x2480 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	80 5f       	subi	r24, 0xF0	; 240
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	03 c0       	rjmp	.+6      	; 0x2480 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	80 5b       	subi	r24, 0xB0	; 176
    247e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	80 68       	ori	r24, 0x80	; 128
    2484:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_sendCommand>
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_displayStringRowColumn+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_displayStringRowColumn+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	6a 83       	std	Y+2, r22	; 0x02
    24a8:	5c 83       	std	Y+4, r21	; 0x04
    24aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	6a 81       	ldd	r22, Y+2	; 0x02
    24b0:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	62 97       	sbiw	r28, 0x12	; 18
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24e2:	89 89       	ldd	r24, Y+17	; 0x11
    24e4:	9a 89       	ldd	r25, Y+18	; 0x12
    24e6:	9e 01       	movw	r18, r28
    24e8:	2f 5f       	subi	r18, 0xFF	; 255
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	b9 01       	movw	r22, r18
    24ee:	4a e0       	ldi	r20, 0x0A	; 10
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <itoa>
   LCD_displayString(buff); /* Display the string */
    24f6:	ce 01       	movw	r24, r28
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
}
    24fe:	62 96       	adiw	r28, 0x12	; 18
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_sendCommand>
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	60 97       	sbiw	r28, 0x10	; 16
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	62 e0       	ldi	r22, 0x02	; 2
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	63 e0       	ldi	r22, 0x03	; 3
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	64 e0       	ldi	r22, 0x04	; 4
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	65 e0       	ldi	r22, 0x05	; 5
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	66 e0       	ldi	r22, 0x06	; 6
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	67 e0       	ldi	r22, 0x07	; 7
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2588:	1f 86       	std	Y+15, r1	; 0x0f
    258a:	ab c0       	rjmp	.+342    	; 0x26e2 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	6f 85       	ldd	r22, Y+15	; 0x0f
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    25a0:	18 8a       	std	Y+16, r1	; 0x10
    25a2:	22 c0       	rjmp	.+68     	; 0x25e8 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    25a4:	88 89       	ldd	r24, Y+16	; 0x10
    25a6:	98 2f       	mov	r25, r24
    25a8:	9c 5f       	subi	r25, 0xFC	; 252
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	69 2f       	mov	r22, r25
    25ae:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_readPin>
    25b2:	88 23       	and	r24, r24
    25b4:	b1 f4       	brne	.+44     	; 0x25e2 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	98 2f       	mov	r25, r24
    25c6:	88 89       	ldd	r24, Y+16	; 0x10
    25c8:	89 0f       	add	r24, r25
    25ca:	8f 5f       	subi	r24, 0xFF	; 255
    25cc:	0e 94 76 13 	call	0x26ec	; 0x26ec <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    25d0:	60 96       	adiw	r28, 0x10	; 16
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    25e2:	88 89       	ldd	r24, Y+16	; 0x10
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	88 8b       	std	Y+16, r24	; 0x10
    25e8:	88 89       	ldd	r24, Y+16	; 0x10
    25ea:	84 30       	cpi	r24, 0x04	; 4
    25ec:	d8 f2       	brcs	.-74     	; 0x25a4 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_setupPinDirection>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e2       	ldi	r26, 0x20	; 32
    25fe:	b1 e4       	ldi	r27, 0x41	; 65
    2600:	8b 87       	std	Y+11, r24	; 0x0b
    2602:	9c 87       	std	Y+12, r25	; 0x0c
    2604:	ad 87       	std	Y+13, r26	; 0x0d
    2606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8f 83       	std	Y+7, r24	; 0x07
    2622:	98 87       	std	Y+8, r25	; 0x08
    2624:	a9 87       	std	Y+9, r26	; 0x09
    2626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <KEYPAD_getPressedKey+0x186>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <KEYPAD_getPressedKey+0x174>
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <KEYPAD_getPressedKey+0x168>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <KEYPAD_getPressedKey+0x1b0>
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	08 f4       	brcc	.+2      	; 0x26ea <KEYPAD_getPressedKey+0x1c6>
    26e8:	51 cf       	rjmp	.-350    	; 0x258c <KEYPAD_getPressedKey+0x68>
    26ea:	4e cf       	rjmp	.-356    	; 0x2588 <KEYPAD_getPressedKey+0x64>

000026ec <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    26fa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	3c 83       	std	Y+4, r19	; 0x04
    2704:	2b 83       	std	Y+3, r18	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	8d 30       	cpi	r24, 0x0D	; 13
    270c:	91 05       	cpc	r25, r1
    270e:	71 f1       	breq	.+92     	; 0x276c <KEYPAD_4x4_adjustKeyNumber+0x80>
    2710:	2b 81       	ldd	r18, Y+3	; 0x03
    2712:	3c 81       	ldd	r19, Y+4	; 0x04
    2714:	2e 30       	cpi	r18, 0x0E	; 14
    2716:	31 05       	cpc	r19, r1
    2718:	84 f4       	brge	.+32     	; 0x273a <KEYPAD_4x4_adjustKeyNumber+0x4e>
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	88 30       	cpi	r24, 0x08	; 8
    2720:	91 05       	cpc	r25, r1
    2722:	f1 f0       	breq	.+60     	; 0x2760 <KEYPAD_4x4_adjustKeyNumber+0x74>
    2724:	2b 81       	ldd	r18, Y+3	; 0x03
    2726:	3c 81       	ldd	r19, Y+4	; 0x04
    2728:	2c 30       	cpi	r18, 0x0C	; 12
    272a:	31 05       	cpc	r19, r1
    272c:	e1 f0       	breq	.+56     	; 0x2766 <KEYPAD_4x4_adjustKeyNumber+0x7a>
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	91 05       	cpc	r25, r1
    2736:	89 f0       	breq	.+34     	; 0x275a <KEYPAD_4x4_adjustKeyNumber+0x6e>
    2738:	24 c0       	rjmp	.+72     	; 0x2782 <KEYPAD_4x4_adjustKeyNumber+0x96>
    273a:	2b 81       	ldd	r18, Y+3	; 0x03
    273c:	3c 81       	ldd	r19, Y+4	; 0x04
    273e:	2f 30       	cpi	r18, 0x0F	; 15
    2740:	31 05       	cpc	r19, r1
    2742:	c9 f0       	breq	.+50     	; 0x2776 <KEYPAD_4x4_adjustKeyNumber+0x8a>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	8f 30       	cpi	r24, 0x0F	; 15
    274a:	91 05       	cpc	r25, r1
    274c:	94 f0       	brlt	.+36     	; 0x2772 <KEYPAD_4x4_adjustKeyNumber+0x86>
    274e:	2b 81       	ldd	r18, Y+3	; 0x03
    2750:	3c 81       	ldd	r19, Y+4	; 0x04
    2752:	20 31       	cpi	r18, 0x10	; 16
    2754:	31 05       	cpc	r19, r1
    2756:	91 f0       	breq	.+36     	; 0x277c <KEYPAD_4x4_adjustKeyNumber+0x90>
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <KEYPAD_4x4_adjustKeyNumber+0x96>
	{
		case 4: keypad_button = '%'; // ASCII Code of %
    275a:	85 e2       	ldi	r24, 0x25	; 37
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	13 c0       	rjmp	.+38     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2760:	8a e2       	ldi	r24, 0x2A	; 42
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	10 c0       	rjmp	.+32     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2766:	8d e2       	ldi	r24, 0x2D	; 45
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	0d c0       	rjmp	.+26     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 13: keypad_button = '/';  /* ASCII of Enter */
    276c:	8f e2       	ldi	r24, 0x2F	; 47
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	0a c0       	rjmp	.+20     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 14: keypad_button = 0;
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	08 c0       	rjmp	.+16     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 15: keypad_button = 'e'; /* ASCII Code of '=' */
    2776:	85 e6       	ldi	r24, 0x65	; 101
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	05 c0       	rjmp	.+10     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    277c:	8b e2       	ldi	r24, 0x2B	; 43
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x9a>
				break;
		default: keypad_button = button_number;
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <main>:
uint8 people_state = 0;
/**********************************************************/
void timer_handler(void);
/**********************************************************/
int main()
{
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	ce 5a       	subi	r28, 0xAE	; 174
    27a4:	d1 40       	sbci	r29, 0x01	; 1
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    27b0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <LCD_init>

	/**************************************************/
	UART_ConfigType uart_seting={_8_DATA_BITS,NO_PARITY,ONE_STOP_BIT,9600};
    27b4:	ce 01       	movw	r24, r28
    27b6:	89 56       	subi	r24, 0x69	; 105
    27b8:	9e 4f       	sbci	r25, 0xFE	; 254
    27ba:	cb 55       	subi	r28, 0x5B	; 91
    27bc:	de 4f       	sbci	r29, 0xFE	; 254
    27be:	99 83       	std	Y+1, r25	; 0x01
    27c0:	88 83       	st	Y, r24
    27c2:	c5 5a       	subi	r28, 0xA5	; 165
    27c4:	d1 40       	sbci	r29, 0x01	; 1
    27c6:	8d e2       	ldi	r24, 0x2D	; 45
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	c9 55       	subi	r28, 0x59	; 89
    27cc:	de 4f       	sbci	r29, 0xFE	; 254
    27ce:	99 83       	std	Y+1, r25	; 0x01
    27d0:	88 83       	st	Y, r24
    27d2:	c7 5a       	subi	r28, 0xA7	; 167
    27d4:	d1 40       	sbci	r29, 0x01	; 1
    27d6:	97 e0       	ldi	r25, 0x07	; 7
    27d8:	c7 55       	subi	r28, 0x57	; 87
    27da:	de 4f       	sbci	r29, 0xFE	; 254
    27dc:	98 83       	st	Y, r25
    27de:	c9 5a       	subi	r28, 0xA9	; 169
    27e0:	d1 40       	sbci	r29, 0x01	; 1
    27e2:	c9 55       	subi	r28, 0x59	; 89
    27e4:	de 4f       	sbci	r29, 0xFE	; 254
    27e6:	e8 81       	ld	r30, Y
    27e8:	f9 81       	ldd	r31, Y+1	; 0x01
    27ea:	c7 5a       	subi	r28, 0xA7	; 167
    27ec:	d1 40       	sbci	r29, 0x01	; 1
    27ee:	00 80       	ld	r0, Z
    27f0:	c9 55       	subi	r28, 0x59	; 89
    27f2:	de 4f       	sbci	r29, 0xFE	; 254
    27f4:	88 81       	ld	r24, Y
    27f6:	99 81       	ldd	r25, Y+1	; 0x01
    27f8:	c7 5a       	subi	r28, 0xA7	; 167
    27fa:	d1 40       	sbci	r29, 0x01	; 1
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	c9 55       	subi	r28, 0x59	; 89
    2800:	de 4f       	sbci	r29, 0xFE	; 254
    2802:	99 83       	std	Y+1, r25	; 0x01
    2804:	88 83       	st	Y, r24
    2806:	c7 5a       	subi	r28, 0xA7	; 167
    2808:	d1 40       	sbci	r29, 0x01	; 1
    280a:	cb 55       	subi	r28, 0x5B	; 91
    280c:	de 4f       	sbci	r29, 0xFE	; 254
    280e:	e8 81       	ld	r30, Y
    2810:	f9 81       	ldd	r31, Y+1	; 0x01
    2812:	c5 5a       	subi	r28, 0xA5	; 165
    2814:	d1 40       	sbci	r29, 0x01	; 1
    2816:	00 82       	st	Z, r0
    2818:	cb 55       	subi	r28, 0x5B	; 91
    281a:	de 4f       	sbci	r29, 0xFE	; 254
    281c:	88 81       	ld	r24, Y
    281e:	99 81       	ldd	r25, Y+1	; 0x01
    2820:	c5 5a       	subi	r28, 0xA5	; 165
    2822:	d1 40       	sbci	r29, 0x01	; 1
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	cb 55       	subi	r28, 0x5B	; 91
    2828:	de 4f       	sbci	r29, 0xFE	; 254
    282a:	99 83       	std	Y+1, r25	; 0x01
    282c:	88 83       	st	Y, r24
    282e:	c5 5a       	subi	r28, 0xA5	; 165
    2830:	d1 40       	sbci	r29, 0x01	; 1
    2832:	c7 55       	subi	r28, 0x57	; 87
    2834:	de 4f       	sbci	r29, 0xFE	; 254
    2836:	98 81       	ld	r25, Y
    2838:	c9 5a       	subi	r28, 0xA9	; 169
    283a:	d1 40       	sbci	r29, 0x01	; 1
    283c:	91 50       	subi	r25, 0x01	; 1
    283e:	c7 55       	subi	r28, 0x57	; 87
    2840:	de 4f       	sbci	r29, 0xFE	; 254
    2842:	98 83       	st	Y, r25
    2844:	c9 5a       	subi	r28, 0xA9	; 169
    2846:	d1 40       	sbci	r29, 0x01	; 1
    2848:	c7 55       	subi	r28, 0x57	; 87
    284a:	de 4f       	sbci	r29, 0xFE	; 254
    284c:	e8 81       	ld	r30, Y
    284e:	c9 5a       	subi	r28, 0xA9	; 169
    2850:	d1 40       	sbci	r29, 0x01	; 1
    2852:	ee 23       	and	r30, r30
    2854:	31 f6       	brne	.-116    	; 0x27e2 <main+0x4c>
	UART_init(&uart_seting);
    2856:	ce 01       	movw	r24, r28
    2858:	89 56       	subi	r24, 0x69	; 105
    285a:	9e 4f       	sbci	r25, 0xFE	; 254
    285c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	/**************************************************/
	sei();
    2860:	78 94       	sei
	Timer_ConfigType time1_setting = {0, 31250, TIMER1, F_CPU_256, COMPARE_MODE};
    2862:	ce 01       	movw	r24, r28
    2864:	82 56       	subi	r24, 0x62	; 98
    2866:	9e 4f       	sbci	r25, 0xFE	; 254
    2868:	c6 55       	subi	r28, 0x56	; 86
    286a:	de 4f       	sbci	r29, 0xFE	; 254
    286c:	99 83       	std	Y+1, r25	; 0x01
    286e:	88 83       	st	Y, r24
    2870:	ca 5a       	subi	r28, 0xAA	; 170
    2872:	d1 40       	sbci	r29, 0x01	; 1
    2874:	86 e2       	ldi	r24, 0x26	; 38
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	c4 55       	subi	r28, 0x54	; 84
    287a:	de 4f       	sbci	r29, 0xFE	; 254
    287c:	99 83       	std	Y+1, r25	; 0x01
    287e:	88 83       	st	Y, r24
    2880:	cc 5a       	subi	r28, 0xAC	; 172
    2882:	d1 40       	sbci	r29, 0x01	; 1
    2884:	97 e0       	ldi	r25, 0x07	; 7
    2886:	c2 55       	subi	r28, 0x52	; 82
    2888:	de 4f       	sbci	r29, 0xFE	; 254
    288a:	98 83       	st	Y, r25
    288c:	ce 5a       	subi	r28, 0xAE	; 174
    288e:	d1 40       	sbci	r29, 0x01	; 1
    2890:	c4 55       	subi	r28, 0x54	; 84
    2892:	de 4f       	sbci	r29, 0xFE	; 254
    2894:	e8 81       	ld	r30, Y
    2896:	f9 81       	ldd	r31, Y+1	; 0x01
    2898:	cc 5a       	subi	r28, 0xAC	; 172
    289a:	d1 40       	sbci	r29, 0x01	; 1
    289c:	00 80       	ld	r0, Z
    289e:	c4 55       	subi	r28, 0x54	; 84
    28a0:	de 4f       	sbci	r29, 0xFE	; 254
    28a2:	88 81       	ld	r24, Y
    28a4:	99 81       	ldd	r25, Y+1	; 0x01
    28a6:	cc 5a       	subi	r28, 0xAC	; 172
    28a8:	d1 40       	sbci	r29, 0x01	; 1
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	c4 55       	subi	r28, 0x54	; 84
    28ae:	de 4f       	sbci	r29, 0xFE	; 254
    28b0:	99 83       	std	Y+1, r25	; 0x01
    28b2:	88 83       	st	Y, r24
    28b4:	cc 5a       	subi	r28, 0xAC	; 172
    28b6:	d1 40       	sbci	r29, 0x01	; 1
    28b8:	c6 55       	subi	r28, 0x56	; 86
    28ba:	de 4f       	sbci	r29, 0xFE	; 254
    28bc:	e8 81       	ld	r30, Y
    28be:	f9 81       	ldd	r31, Y+1	; 0x01
    28c0:	ca 5a       	subi	r28, 0xAA	; 170
    28c2:	d1 40       	sbci	r29, 0x01	; 1
    28c4:	00 82       	st	Z, r0
    28c6:	c6 55       	subi	r28, 0x56	; 86
    28c8:	de 4f       	sbci	r29, 0xFE	; 254
    28ca:	88 81       	ld	r24, Y
    28cc:	99 81       	ldd	r25, Y+1	; 0x01
    28ce:	ca 5a       	subi	r28, 0xAA	; 170
    28d0:	d1 40       	sbci	r29, 0x01	; 1
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	c6 55       	subi	r28, 0x56	; 86
    28d6:	de 4f       	sbci	r29, 0xFE	; 254
    28d8:	99 83       	std	Y+1, r25	; 0x01
    28da:	88 83       	st	Y, r24
    28dc:	ca 5a       	subi	r28, 0xAA	; 170
    28de:	d1 40       	sbci	r29, 0x01	; 1
    28e0:	c2 55       	subi	r28, 0x52	; 82
    28e2:	de 4f       	sbci	r29, 0xFE	; 254
    28e4:	98 81       	ld	r25, Y
    28e6:	ce 5a       	subi	r28, 0xAE	; 174
    28e8:	d1 40       	sbci	r29, 0x01	; 1
    28ea:	91 50       	subi	r25, 0x01	; 1
    28ec:	c2 55       	subi	r28, 0x52	; 82
    28ee:	de 4f       	sbci	r29, 0xFE	; 254
    28f0:	98 83       	st	Y, r25
    28f2:	ce 5a       	subi	r28, 0xAE	; 174
    28f4:	d1 40       	sbci	r29, 0x01	; 1
    28f6:	c2 55       	subi	r28, 0x52	; 82
    28f8:	de 4f       	sbci	r29, 0xFE	; 254
    28fa:	e8 81       	ld	r30, Y
    28fc:	ce 5a       	subi	r28, 0xAE	; 174
    28fe:	d1 40       	sbci	r29, 0x01	; 1
    2900:	ee 23       	and	r30, r30
    2902:	31 f6       	brne	.-116    	; 0x2890 <main+0xfa>
	Timer_init(&time1_setting);
    2904:	ce 01       	movw	r24, r28
    2906:	82 56       	subi	r24, 0x62	; 98
    2908:	9e 4f       	sbci	r25, 0xFE	; 254
    290a:	0e 94 7a 07 	call	0xef4	; 0xef4 <Timer_init>
	Timer_setCallBack(timer_handler, TIMER1);
    290e:	89 ee       	ldi	r24, 0xE9	; 233
    2910:	9d e2       	ldi	r25, 0x2D	; 45
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	0e 94 be 08 	call	0x117c	; 0x117c <Timer_setCallBack>
    2918:	5b c3       	rjmp	.+1718   	; 0x2fd0 <main+0x83a>
	/* Create a System Password first time */

	while(pass_state != CORRECT_PASS)
	{
		/* receive the password from the user*/
		UART_sendByte(PASS_LOADING);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
		LCD_clearScreen();
    2920:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    2924:	80 e6       	ldi	r24, 0x60	; 96
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
		LCD_moveCursor(1, 0);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_moveCursor>
		for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    2934:	10 92 3a 01 	sts	0x013A, r1
    2938:	c6 c0       	rjmp	.+396    	; 0x2ac6 <main+0x330>
		{
			pass_1[counter] = KEYPAD_getPressedKey();
    293a:	80 91 3a 01 	lds	r24, 0x013A
    293e:	08 2f       	mov	r16, r24
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    2946:	f8 01       	movw	r30, r16
    2948:	e0 5c       	subi	r30, 0xC0	; 192
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    294e:	8a e2       	ldi	r24, 0x2A	; 42
    2950:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    2954:	fe 01       	movw	r30, r28
    2956:	ed 56       	subi	r30, 0x6D	; 109
    2958:	fe 4f       	sbci	r31, 0xFE	; 254
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	aa ef       	ldi	r26, 0xFA	; 250
    2960:	b3 e4       	ldi	r27, 0x43	; 67
    2962:	80 83       	st	Z, r24
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	a2 83       	std	Z+2, r26	; 0x02
    2968:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	8e 01       	movw	r16, r28
    296c:	01 57       	subi	r16, 0x71	; 113
    296e:	1e 4f       	sbci	r17, 0xFE	; 254
    2970:	fe 01       	movw	r30, r28
    2972:	ed 56       	subi	r30, 0x6D	; 109
    2974:	fe 4f       	sbci	r31, 0xFE	; 254
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a ef       	ldi	r20, 0xFA	; 250
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	80 83       	st	Z, r24
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	a2 83       	std	Z+2, r26	; 0x02
    2996:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2998:	fe 01       	movw	r30, r28
    299a:	e1 57       	subi	r30, 0x71	; 113
    299c:	fe 4f       	sbci	r31, 0xFE	; 254
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	44 f4       	brge	.+16     	; 0x29c6 <main+0x230>
		__ticks = 1;
    29b6:	fe 01       	movw	r30, r28
    29b8:	e3 57       	subi	r30, 0x73	; 115
    29ba:	fe 4f       	sbci	r31, 0xFE	; 254
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    29c4:	64 c0       	rjmp	.+200    	; 0x2a8e <main+0x2f8>
	else if (__tmp > 65535)
    29c6:	fe 01       	movw	r30, r28
    29c8:	e1 57       	subi	r30, 0x71	; 113
    29ca:	fe 4f       	sbci	r31, 0xFE	; 254
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
    29d8:	4f e7       	ldi	r20, 0x7F	; 127
    29da:	57 e4       	ldi	r21, 0x47	; 71
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e0:	18 16       	cp	r1, r24
    29e2:	0c f0       	brlt	.+2      	; 0x29e6 <main+0x250>
    29e4:	43 c0       	rjmp	.+134    	; 0x2a6c <main+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	fe 01       	movw	r30, r28
    29e8:	ed 56       	subi	r30, 0x6D	; 109
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e2       	ldi	r20, 0x20	; 32
    29fa:	51 e4       	ldi	r21, 0x41	; 65
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	8e 01       	movw	r16, r28
    2a06:	03 57       	subi	r16, 0x73	; 115
    2a08:	1e 4f       	sbci	r17, 0xFE	; 254
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	f8 01       	movw	r30, r16
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	1f c0       	rjmp	.+62     	; 0x2a5c <main+0x2c6>
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e5 57       	subi	r30, 0x75	; 117
    2a22:	fe 4f       	sbci	r31, 0xFE	; 254
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e5 57       	subi	r30, 0x75	; 117
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <main+0x2a0>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e5 57       	subi	r30, 0x75	; 117
    2a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	de 01       	movw	r26, r28
    2a46:	a3 57       	subi	r26, 0x73	; 115
    2a48:	be 4f       	sbci	r27, 0xFE	; 254
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e3 57       	subi	r30, 0x73	; 115
    2a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	11 96       	adiw	r26, 0x01	; 1
    2a58:	9c 93       	st	X, r25
    2a5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e3 57       	subi	r30, 0x73	; 115
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	d1 f6       	brne	.-76     	; 0x2a1e <main+0x288>
    2a6a:	28 c0       	rjmp	.+80     	; 0x2abc <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	8e 01       	movw	r16, r28
    2a6e:	03 57       	subi	r16, 0x73	; 115
    2a70:	1e 4f       	sbci	r17, 0xFE	; 254
    2a72:	fe 01       	movw	r30, r28
    2a74:	e1 57       	subi	r30, 0x71	; 113
    2a76:	fe 4f       	sbci	r31, 0xFE	; 254
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	f8 01       	movw	r30, r16
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
    2a8e:	de 01       	movw	r26, r28
    2a90:	a7 57       	subi	r26, 0x77	; 119
    2a92:	be 4f       	sbci	r27, 0xFE	; 254
    2a94:	fe 01       	movw	r30, r28
    2a96:	e3 57       	subi	r30, 0x73	; 115
    2a98:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
    2a9e:	11 96       	adiw	r26, 0x01	; 1
    2aa0:	9c 93       	st	X, r25
    2aa2:	8e 93       	st	-X, r24
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e7 57       	subi	r30, 0x77	; 119
    2aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <main+0x318>
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e7 57       	subi	r30, 0x77	; 119
    2ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
		/* receive the password from the user*/
		UART_sendByte(PASS_LOADING);
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass:");
		LCD_moveCursor(1, 0);
		for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    2abc:	80 91 3a 01 	lds	r24, 0x013A
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	80 93 3a 01 	sts	0x013A, r24
    2ac6:	80 91 3a 01 	lds	r24, 0x013A
    2aca:	85 30       	cpi	r24, 0x05	; 5
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <main+0x33a>
    2ace:	35 cf       	rjmp	.-406    	; 0x293a <main+0x1a4>
		{
			pass_1[counter] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != 'e');
    2ad0:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    2ad4:	85 36       	cpi	r24, 0x65	; 101
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <main+0x33a>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	eb 57       	subi	r30, 0x7B	; 123
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	aa ef       	ldi	r26, 0xFA	; 250
    2ae4:	b3 e4       	ldi	r27, 0x43	; 67
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	8e 01       	movw	r16, r28
    2af0:	0f 57       	subi	r16, 0x7F	; 127
    2af2:	1e 4f       	sbci	r17, 0xFE	; 254
    2af4:	fe 01       	movw	r30, r28
    2af6:	eb 57       	subi	r30, 0x7B	; 123
    2af8:	fe 4f       	sbci	r31, 0xFE	; 254
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a ef       	ldi	r20, 0xFA	; 250
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	f8 01       	movw	r30, r16
    2b14:	80 83       	st	Z, r24
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	a2 83       	std	Z+2, r26	; 0x02
    2b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ef 57       	subi	r30, 0x7F	; 127
    2b20:	fe 4f       	sbci	r31, 0xFE	; 254
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	44 f4       	brge	.+16     	; 0x2b4a <main+0x3b4>
		__ticks = 1;
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e1 58       	subi	r30, 0x81	; 129
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	64 c0       	rjmp	.+200    	; 0x2c12 <main+0x47c>
	else if (__tmp > 65535)
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ef 57       	subi	r30, 0x7F	; 127
    2b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	93 81       	ldd	r25, Z+3	; 0x03
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	0c f0       	brlt	.+2      	; 0x2b6a <main+0x3d4>
    2b68:	43 c0       	rjmp	.+134    	; 0x2bf0 <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	eb 57       	subi	r30, 0x7B	; 123
    2b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b70:	60 81       	ld	r22, Z
    2b72:	71 81       	ldd	r23, Z+1	; 0x01
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8e 01       	movw	r16, r28
    2b8a:	01 58       	subi	r16, 0x81	; 129
    2b8c:	1e 4f       	sbci	r17, 0xFE	; 254
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	1f c0       	rjmp	.+62     	; 0x2be0 <main+0x44a>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e3 58       	subi	r30, 0x83	; 131
    2ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba8:	88 ec       	ldi	r24, 0xC8	; 200
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e3 58       	subi	r30, 0x83	; 131
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <main+0x424>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e3 58       	subi	r30, 0x83	; 131
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	de 01       	movw	r26, r28
    2bca:	a1 58       	subi	r26, 0x81	; 129
    2bcc:	be 4f       	sbci	r27, 0xFE	; 254
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e1 58       	subi	r30, 0x81	; 129
    2bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	11 96       	adiw	r26, 0x01	; 1
    2bdc:	9c 93       	st	X, r25
    2bde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	fe 01       	movw	r30, r28
    2be2:	e1 58       	subi	r30, 0x81	; 129
    2be4:	fe 4f       	sbci	r31, 0xFE	; 254
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	d1 f6       	brne	.-76     	; 0x2ba2 <main+0x40c>
    2bee:	27 c0       	rjmp	.+78     	; 0x2c3e <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	8e 01       	movw	r16, r28
    2bf2:	01 58       	subi	r16, 0x81	; 129
    2bf4:	1e 4f       	sbci	r17, 0xFE	; 254
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ef 57       	subi	r30, 0x7F	; 127
    2bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	80 83       	st	Z, r24
    2c12:	de 01       	movw	r26, r28
    2c14:	a5 58       	subi	r26, 0x85	; 133
    2c16:	be 4f       	sbci	r27, 0xFE	; 254
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e1 58       	subi	r30, 0x81	; 129
    2c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	8d 93       	st	X+, r24
    2c24:	9c 93       	st	X, r25
    2c26:	fe 01       	movw	r30, r28
    2c28:	e5 58       	subi	r30, 0x85	; 133
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <main+0x49a>
    2c34:	fe 01       	movw	r30, r28
    2c36:	e5 58       	subi	r30, 0x85	; 133
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_clearScreen();
    2c3e:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
    2c42:	80 e7       	ldi	r24, 0x70	; 112
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
    2c4a:	21 e8       	ldi	r18, 0x81	; 129
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	a9 01       	movw	r20, r18
    2c54:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
		for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    2c58:	10 92 3a 01 	sts	0x013A, r1
    2c5c:	c6 c0       	rjmp	.+396    	; 0x2dea <main+0x654>
		{
			pass_2[counter] = KEYPAD_getPressedKey();
    2c5e:	80 91 3a 01 	lds	r24, 0x013A
    2c62:	08 2f       	mov	r16, r24
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	eb 5b       	subi	r30, 0xBB	; 187
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2c72:	8a e2       	ldi	r24, 0x2A	; 42
    2c74:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e9 58       	subi	r30, 0x89	; 137
    2c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	aa ef       	ldi	r26, 0xFA	; 250
    2c84:	b3 e4       	ldi	r27, 0x43	; 67
    2c86:	80 83       	st	Z, r24
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	a2 83       	std	Z+2, r26	; 0x02
    2c8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8e:	8e 01       	movw	r16, r28
    2c90:	0d 58       	subi	r16, 0x8D	; 141
    2c92:	1e 4f       	sbci	r17, 0xFE	; 254
    2c94:	fe 01       	movw	r30, r28
    2c96:	e9 58       	subi	r30, 0x89	; 137
    2c98:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a ef       	ldi	r20, 0xFA	; 250
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	80 83       	st	Z, r24
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	a2 83       	std	Z+2, r26	; 0x02
    2cba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ed 58       	subi	r30, 0x8D	; 141
    2cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	44 f4       	brge	.+16     	; 0x2cea <main+0x554>
		__ticks = 1;
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ef 58       	subi	r30, 0x8F	; 143
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	80 83       	st	Z, r24
    2ce8:	64 c0       	rjmp	.+200    	; 0x2db2 <main+0x61c>
	else if (__tmp > 65535)
    2cea:	fe 01       	movw	r30, r28
    2cec:	ed 58       	subi	r30, 0x8D	; 141
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	0c f0       	brlt	.+2      	; 0x2d0a <main+0x574>
    2d08:	43 c0       	rjmp	.+134    	; 0x2d90 <main+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e9 58       	subi	r30, 0x89	; 137
    2d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e2       	ldi	r20, 0x20	; 32
    2d1e:	51 e4       	ldi	r21, 0x41	; 65
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8e 01       	movw	r16, r28
    2d2a:	0f 58       	subi	r16, 0x8F	; 143
    2d2c:	1e 4f       	sbci	r17, 0xFE	; 254
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	1f c0       	rjmp	.+62     	; 0x2d80 <main+0x5ea>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e1 59       	subi	r30, 0x91	; 145
    2d46:	fe 4f       	sbci	r31, 0xFE	; 254
    2d48:	88 ec       	ldi	r24, 0xC8	; 200
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
    2d50:	fe 01       	movw	r30, r28
    2d52:	e1 59       	subi	r30, 0x91	; 145
    2d54:	fe 4f       	sbci	r31, 0xFE	; 254
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <main+0x5c4>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e1 59       	subi	r30, 0x91	; 145
    2d62:	fe 4f       	sbci	r31, 0xFE	; 254
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	de 01       	movw	r26, r28
    2d6a:	af 58       	subi	r26, 0x8F	; 143
    2d6c:	be 4f       	sbci	r27, 0xFE	; 254
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ef 58       	subi	r30, 0x8F	; 143
    2d72:	fe 4f       	sbci	r31, 0xFE	; 254
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	11 96       	adiw	r26, 0x01	; 1
    2d7c:	9c 93       	st	X, r25
    2d7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 58       	subi	r30, 0x8F	; 143
    2d84:	fe 4f       	sbci	r31, 0xFE	; 254
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	d1 f6       	brne	.-76     	; 0x2d42 <main+0x5ac>
    2d8e:	28 c0       	rjmp	.+80     	; 0x2de0 <main+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	8e 01       	movw	r16, r28
    2d92:	0f 58       	subi	r16, 0x8F	; 143
    2d94:	1e 4f       	sbci	r17, 0xFE	; 254
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 58       	subi	r30, 0x8D	; 141
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	de 01       	movw	r26, r28
    2db4:	a3 59       	subi	r26, 0x93	; 147
    2db6:	be 4f       	sbci	r27, 0xFE	; 254
    2db8:	fe 01       	movw	r30, r28
    2dba:	ef 58       	subi	r30, 0x8F	; 143
    2dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	11 96       	adiw	r26, 0x01	; 1
    2dc4:	9c 93       	st	X, r25
    2dc6:	8e 93       	st	-X, r24
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e3 59       	subi	r30, 0x93	; 147
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <main+0x63c>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e3 59       	subi	r30, 0x93	; 147
    2dda:	fe 4f       	sbci	r31, 0xFE	; 254
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
		while(KEYPAD_getPressedKey() != 'e');
		_delay_ms(500);
		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_displayStringRowColumn(1, 0, "same pass: ");
		for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    2de0:	80 91 3a 01 	lds	r24, 0x013A
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	80 93 3a 01 	sts	0x013A, r24
    2dea:	80 91 3a 01 	lds	r24, 0x013A
    2dee:	85 30       	cpi	r24, 0x05	; 5
    2df0:	08 f4       	brcc	.+2      	; 0x2df4 <main+0x65e>
    2df2:	35 cf       	rjmp	.-406    	; 0x2c5e <main+0x4c8>
		{
			pass_2[counter] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != 'e');
    2df4:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    2df8:	85 36       	cpi	r24, 0x65	; 101
    2dfa:	e1 f7       	brne	.-8      	; 0x2df4 <main+0x65e>
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e7 59       	subi	r30, 0x97	; 151
    2e00:	fe 4f       	sbci	r31, 0xFE	; 254
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	aa ef       	ldi	r26, 0xFA	; 250
    2e08:	b3 e4       	ldi	r27, 0x43	; 67
    2e0a:	80 83       	st	Z, r24
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	a2 83       	std	Z+2, r26	; 0x02
    2e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	8e 01       	movw	r16, r28
    2e14:	0b 59       	subi	r16, 0x9B	; 155
    2e16:	1e 4f       	sbci	r17, 0xFE	; 254
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e7 59       	subi	r30, 0x97	; 151
    2e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	f8 01       	movw	r30, r16
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e40:	fe 01       	movw	r30, r28
    2e42:	eb 59       	subi	r30, 0x9B	; 155
    2e44:	fe 4f       	sbci	r31, 0xFE	; 254
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e8       	ldi	r20, 0x80	; 128
    2e54:	5f e3       	ldi	r21, 0x3F	; 63
    2e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e5a:	88 23       	and	r24, r24
    2e5c:	44 f4       	brge	.+16     	; 0x2e6e <main+0x6d8>
		__ticks = 1;
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ed 59       	subi	r30, 0x9D	; 157
    2e62:	fe 4f       	sbci	r31, 0xFE	; 254
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
    2e6c:	64 c0       	rjmp	.+200    	; 0x2f36 <main+0x7a0>
	else if (__tmp > 65535)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	eb 59       	subi	r30, 0x9B	; 155
    2e72:	fe 4f       	sbci	r31, 0xFE	; 254
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	0c f0       	brlt	.+2      	; 0x2e8e <main+0x6f8>
    2e8c:	43 c0       	rjmp	.+134    	; 0x2f14 <main+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e7 59       	subi	r30, 0x97	; 151
    2e92:	fe 4f       	sbci	r31, 0xFE	; 254
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8e 01       	movw	r16, r28
    2eae:	0d 59       	subi	r16, 0x9D	; 157
    2eb0:	1e 4f       	sbci	r17, 0xFE	; 254
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
    2ec4:	1f c0       	rjmp	.+62     	; 0x2f04 <main+0x76e>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ef 59       	subi	r30, 0x9F	; 159
    2eca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ecc:	88 ec       	ldi	r24, 0xC8	; 200
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ef 59       	subi	r30, 0x9F	; 159
    2ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <main+0x748>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ef 59       	subi	r30, 0x9F	; 159
    2ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	de 01       	movw	r26, r28
    2eee:	ad 59       	subi	r26, 0x9D	; 157
    2ef0:	be 4f       	sbci	r27, 0xFE	; 254
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ed 59       	subi	r30, 0x9D	; 157
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	11 96       	adiw	r26, 0x01	; 1
    2f00:	9c 93       	st	X, r25
    2f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 59       	subi	r30, 0x9D	; 157
    2f08:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	d1 f6       	brne	.-76     	; 0x2ec6 <main+0x730>
    2f12:	28 c0       	rjmp	.+80     	; 0x2f64 <main+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	8e 01       	movw	r16, r28
    2f16:	0d 59       	subi	r16, 0x9D	; 157
    2f18:	1e 4f       	sbci	r17, 0xFE	; 254
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	eb 59       	subi	r30, 0x9B	; 155
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	f8 01       	movw	r30, r16
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
    2f36:	de 01       	movw	r26, r28
    2f38:	a1 5a       	subi	r26, 0xA1	; 161
    2f3a:	be 4f       	sbci	r27, 0xFE	; 254
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ed 59       	subi	r30, 0x9D	; 157
    2f40:	fe 4f       	sbci	r31, 0xFE	; 254
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	9c 93       	st	X, r25
    2f4a:	8e 93       	st	-X, r24
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e1 5a       	subi	r30, 0xA1	; 161
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <main+0x7c0>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e1 5a       	subi	r30, 0xA1	; 161
    2f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	80 83       	st	Z, r24
		_delay_ms(500);
		/* send the two passwords to the control ecu */
		for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    2f64:	10 92 3a 01 	sts	0x013A, r1
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <main+0x7f2>
		{
			UART_sendByte(pass_1[counter]);
    2f6a:	80 91 3a 01 	lds	r24, 0x013A
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	fc 01       	movw	r30, r24
    2f74:	e0 5c       	subi	r30, 0xC0	; 192
    2f76:	fe 4f       	sbci	r31, 0xFE	; 254
    2f78:	80 81       	ld	r24, Z
    2f7a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != 'e');
		_delay_ms(500);
		/* send the two passwords to the control ecu */
		for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    2f7e:	80 91 3a 01 	lds	r24, 0x013A
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	80 93 3a 01 	sts	0x013A, r24
    2f88:	80 91 3a 01 	lds	r24, 0x013A
    2f8c:	85 30       	cpi	r24, 0x05	; 5
    2f8e:	68 f3       	brcs	.-38     	; 0x2f6a <main+0x7d4>
		{
			UART_sendByte(pass_1[counter]);
		}
		for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    2f90:	10 92 3a 01 	sts	0x013A, r1
    2f94:	0f c0       	rjmp	.+30     	; 0x2fb4 <main+0x81e>
		{
			UART_sendByte(pass_2[counter]);
    2f96:	80 91 3a 01 	lds	r24, 0x013A
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	eb 5b       	subi	r30, 0xBB	; 187
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	80 81       	ld	r24, Z
    2fa6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
		/* send the two passwords to the control ecu */
		for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
		{
			UART_sendByte(pass_1[counter]);
		}
		for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    2faa:	80 91 3a 01 	lds	r24, 0x013A
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	80 93 3a 01 	sts	0x013A, r24
    2fb4:	80 91 3a 01 	lds	r24, 0x013A
    2fb8:	85 30       	cpi	r24, 0x05	; 5
    2fba:	68 f3       	brcs	.-38     	; 0x2f96 <main+0x800>
		{
			UART_sendByte(pass_2[counter]);
		}
		pass_state = UART_recieveByte();
    2fbc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    2fc0:	80 93 3b 01 	sts	0x013B, r24
		if(pass_state == WRONG_PASS)
    2fc4:	80 91 3b 01 	lds	r24, 0x013B
    2fc8:	88 23       	and	r24, r24
    2fca:	11 f4       	brne	.+4      	; 0x2fd0 <main+0x83a>
		{
			LCD_clearScreen();
    2fcc:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
	Timer_ConfigType time1_setting = {0, 31250, TIMER1, F_CPU_256, COMPARE_MODE};
	Timer_init(&time1_setting);
	Timer_setCallBack(timer_handler, TIMER1);
	/* Create a System Password first time */

	while(pass_state != CORRECT_PASS)
    2fd0:	80 91 3b 01 	lds	r24, 0x013B
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <main+0x844>
    2fd8:	a0 cc       	rjmp	.-1728   	; 0x291a <main+0x184>
		}
	}

	while(1)
	{
		LCD_clearScreen();
    2fda:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
		LCD_displayString("+ : OPEN DOOR");
    2fde:	8d e8       	ldi	r24, 0x8D	; 141
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    2fe6:	2b e9       	ldi	r18, 0x9B	; 155
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	a9 01       	movw	r20, r18
    2ff0:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
		do{
			option = KEYPAD_getPressedKey();
    2ff4:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    2ff8:	80 93 3c 01 	sts	0x013C, r24
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5a       	subi	r30, 0xA5	; 165
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	aa ef       	ldi	r26, 0xFA	; 250
    3008:	b3 e4       	ldi	r27, 0x43	; 67
    300a:	80 83       	st	Z, r24
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	a2 83       	std	Z+2, r26	; 0x02
    3010:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	8e 01       	movw	r16, r28
    3014:	09 5a       	subi	r16, 0xA9	; 169
    3016:	1e 4f       	sbci	r17, 0xFE	; 254
    3018:	fe 01       	movw	r30, r28
    301a:	e5 5a       	subi	r30, 0xA5	; 165
    301c:	fe 4f       	sbci	r31, 0xFE	; 254
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a ef       	ldi	r20, 0xFA	; 250
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	f8 01       	movw	r30, r16
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3040:	fe 01       	movw	r30, r28
    3042:	e9 5a       	subi	r30, 0xA9	; 169
    3044:	fe 4f       	sbci	r31, 0xFE	; 254
    3046:	60 81       	ld	r22, Z
    3048:	71 81       	ldd	r23, Z+1	; 0x01
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	93 81       	ldd	r25, Z+3	; 0x03
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	44 f4       	brge	.+16     	; 0x306e <main+0x8d8>
		__ticks = 1;
    305e:	fe 01       	movw	r30, r28
    3060:	eb 5a       	subi	r30, 0xAB	; 171
    3062:	fe 4f       	sbci	r31, 0xFE	; 254
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
    306c:	64 c0       	rjmp	.+200    	; 0x3136 <main+0x9a0>
	else if (__tmp > 65535)
    306e:	fe 01       	movw	r30, r28
    3070:	e9 5a       	subi	r30, 0xA9	; 169
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	57 e4       	ldi	r21, 0x47	; 71
    3084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3088:	18 16       	cp	r1, r24
    308a:	0c f0       	brlt	.+2      	; 0x308e <main+0x8f8>
    308c:	43 c0       	rjmp	.+134    	; 0x3114 <main+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308e:	fe 01       	movw	r30, r28
    3090:	e5 5a       	subi	r30, 0xA5	; 165
    3092:	fe 4f       	sbci	r31, 0xFE	; 254
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	8e 01       	movw	r16, r28
    30ae:	0b 5a       	subi	r16, 0xAB	; 171
    30b0:	1e 4f       	sbci	r17, 0xFE	; 254
    30b2:	bc 01       	movw	r22, r24
    30b4:	cd 01       	movw	r24, r26
    30b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	f8 01       	movw	r30, r16
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
    30c4:	1f c0       	rjmp	.+62     	; 0x3104 <main+0x96e>
    30c6:	fe 01       	movw	r30, r28
    30c8:	ed 5a       	subi	r30, 0xAD	; 173
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	fe 01       	movw	r30, r28
    30d6:	ed 5a       	subi	r30, 0xAD	; 173
    30d8:	fe 4f       	sbci	r31, 0xFE	; 254
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <main+0x948>
    30e2:	fe 01       	movw	r30, r28
    30e4:	ed 5a       	subi	r30, 0xAD	; 173
    30e6:	fe 4f       	sbci	r31, 0xFE	; 254
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	de 01       	movw	r26, r28
    30ee:	ab 5a       	subi	r26, 0xAB	; 171
    30f0:	be 4f       	sbci	r27, 0xFE	; 254
    30f2:	fe 01       	movw	r30, r28
    30f4:	eb 5a       	subi	r30, 0xAB	; 171
    30f6:	fe 4f       	sbci	r31, 0xFE	; 254
    30f8:	80 81       	ld	r24, Z
    30fa:	91 81       	ldd	r25, Z+1	; 0x01
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	9c 93       	st	X, r25
    3102:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3104:	fe 01       	movw	r30, r28
    3106:	eb 5a       	subi	r30, 0xAB	; 171
    3108:	fe 4f       	sbci	r31, 0xFE	; 254
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	d1 f6       	brne	.-76     	; 0x30c6 <main+0x930>
    3112:	28 c0       	rjmp	.+80     	; 0x3164 <main+0x9ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3114:	8e 01       	movw	r16, r28
    3116:	0b 5a       	subi	r16, 0xAB	; 171
    3118:	1e 4f       	sbci	r17, 0xFE	; 254
    311a:	fe 01       	movw	r30, r28
    311c:	e9 5a       	subi	r30, 0xA9	; 169
    311e:	fe 4f       	sbci	r31, 0xFE	; 254
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	f8 01       	movw	r30, r16
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	80 83       	st	Z, r24
    3136:	de 01       	movw	r26, r28
    3138:	af 5a       	subi	r26, 0xAF	; 175
    313a:	be 4f       	sbci	r27, 0xFE	; 254
    313c:	fe 01       	movw	r30, r28
    313e:	eb 5a       	subi	r30, 0xAB	; 171
    3140:	fe 4f       	sbci	r31, 0xFE	; 254
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	11 96       	adiw	r26, 0x01	; 1
    3148:	9c 93       	st	X, r25
    314a:	8e 93       	st	-X, r24
    314c:	fe 01       	movw	r30, r28
    314e:	ef 5a       	subi	r30, 0xAF	; 175
    3150:	fe 4f       	sbci	r31, 0xFE	; 254
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <main+0x9c0>
    315a:	fe 01       	movw	r30, r28
    315c:	ef 5a       	subi	r30, 0xAF	; 175
    315e:	fe 4f       	sbci	r31, 0xFE	; 254
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
			_delay_ms(500);
		}while(option != '+' && option != '-');
    3164:	80 91 3c 01 	lds	r24, 0x013C
    3168:	8b 32       	cpi	r24, 0x2B	; 43
    316a:	29 f0       	breq	.+10     	; 0x3176 <main+0x9e0>
    316c:	80 91 3c 01 	lds	r24, 0x013C
    3170:	8d 32       	cpi	r24, 0x2D	; 45
    3172:	09 f0       	breq	.+2      	; 0x3176 <main+0x9e0>
    3174:	3f cf       	rjmp	.-386    	; 0x2ff4 <main+0x85e>
		if(option == '+')
    3176:	80 91 3c 01 	lds	r24, 0x013C
    317a:	8b 32       	cpi	r24, 0x2B	; 43
    317c:	09 f0       	breq	.+2      	; 0x3180 <main+0x9ea>
    317e:	7d c6       	rjmp	.+3322   	; 0x3e7a <main+0x16e4>
		{
			UART_sendByte(PASS_IN);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
			LCD_clearScreen();
    3186:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    318a:	8b ea       	ldi	r24, 0xAB	; 171
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    3192:	29 eb       	ldi	r18, 0xB9	; 185
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    31a0:	10 92 3a 01 	sts	0x013A, r1
    31a4:	c6 c0       	rjmp	.+396    	; 0x3332 <main+0xb9c>
			{
				pass_1[counter] = KEYPAD_getPressedKey();
    31a6:	80 91 3a 01 	lds	r24, 0x013A
    31aa:	08 2f       	mov	r16, r24
    31ac:	10 e0       	ldi	r17, 0x00	; 0
    31ae:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    31b2:	f8 01       	movw	r30, r16
    31b4:	e0 5c       	subi	r30, 0xC0	; 192
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    31ba:	8a e2       	ldi	r24, 0x2A	; 42
    31bc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    31c0:	fe 01       	movw	r30, r28
    31c2:	e3 5b       	subi	r30, 0xB3	; 179
    31c4:	fe 4f       	sbci	r31, 0xFE	; 254
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	aa ef       	ldi	r26, 0xFA	; 250
    31cc:	b3 e4       	ldi	r27, 0x43	; 67
    31ce:	80 83       	st	Z, r24
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	a2 83       	std	Z+2, r26	; 0x02
    31d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d6:	8e 01       	movw	r16, r28
    31d8:	07 5b       	subi	r16, 0xB7	; 183
    31da:	1e 4f       	sbci	r17, 0xFE	; 254
    31dc:	fe 01       	movw	r30, r28
    31de:	e3 5b       	subi	r30, 0xB3	; 179
    31e0:	fe 4f       	sbci	r31, 0xFE	; 254
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a ef       	ldi	r20, 0xFA	; 250
    31f0:	54 e4       	ldi	r21, 0x44	; 68
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	f8 01       	movw	r30, r16
    31fc:	80 83       	st	Z, r24
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	a2 83       	std	Z+2, r26	; 0x02
    3202:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3204:	fe 01       	movw	r30, r28
    3206:	e7 5b       	subi	r30, 0xB7	; 183
    3208:	fe 4f       	sbci	r31, 0xFE	; 254
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e8       	ldi	r20, 0x80	; 128
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321e:	88 23       	and	r24, r24
    3220:	44 f4       	brge	.+16     	; 0x3232 <main+0xa9c>
		__ticks = 1;
    3222:	fe 01       	movw	r30, r28
    3224:	e9 5b       	subi	r30, 0xB9	; 185
    3226:	fe 4f       	sbci	r31, 0xFE	; 254
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	80 83       	st	Z, r24
    3230:	64 c0       	rjmp	.+200    	; 0x32fa <main+0xb64>
	else if (__tmp > 65535)
    3232:	fe 01       	movw	r30, r28
    3234:	e7 5b       	subi	r30, 0xB7	; 183
    3236:	fe 4f       	sbci	r31, 0xFE	; 254
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	82 81       	ldd	r24, Z+2	; 0x02
    323e:	93 81       	ldd	r25, Z+3	; 0x03
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	0c f0       	brlt	.+2      	; 0x3252 <main+0xabc>
    3250:	43 c0       	rjmp	.+134    	; 0x32d8 <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	fe 01       	movw	r30, r28
    3254:	e3 5b       	subi	r30, 0xB3	; 179
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	93 81       	ldd	r25, Z+3	; 0x03
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e2       	ldi	r20, 0x20	; 32
    3266:	51 e4       	ldi	r21, 0x41	; 65
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	8e 01       	movw	r16, r28
    3272:	09 5b       	subi	r16, 0xB9	; 185
    3274:	1e 4f       	sbci	r17, 0xFE	; 254
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	f8 01       	movw	r30, r16
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
    3288:	1f c0       	rjmp	.+62     	; 0x32c8 <main+0xb32>
    328a:	fe 01       	movw	r30, r28
    328c:	eb 5b       	subi	r30, 0xBB	; 187
    328e:	fe 4f       	sbci	r31, 0xFE	; 254
    3290:	88 ec       	ldi	r24, 0xC8	; 200
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	fe 01       	movw	r30, r28
    329a:	eb 5b       	subi	r30, 0xBB	; 187
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <main+0xb0c>
    32a6:	fe 01       	movw	r30, r28
    32a8:	eb 5b       	subi	r30, 0xBB	; 187
    32aa:	fe 4f       	sbci	r31, 0xFE	; 254
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	de 01       	movw	r26, r28
    32b2:	a9 5b       	subi	r26, 0xB9	; 185
    32b4:	be 4f       	sbci	r27, 0xFE	; 254
    32b6:	fe 01       	movw	r30, r28
    32b8:	e9 5b       	subi	r30, 0xB9	; 185
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	80 81       	ld	r24, Z
    32be:	91 81       	ldd	r25, Z+1	; 0x01
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	11 96       	adiw	r26, 0x01	; 1
    32c4:	9c 93       	st	X, r25
    32c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c8:	fe 01       	movw	r30, r28
    32ca:	e9 5b       	subi	r30, 0xB9	; 185
    32cc:	fe 4f       	sbci	r31, 0xFE	; 254
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	d1 f6       	brne	.-76     	; 0x328a <main+0xaf4>
    32d6:	28 c0       	rjmp	.+80     	; 0x3328 <main+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	8e 01       	movw	r16, r28
    32da:	09 5b       	subi	r16, 0xB9	; 185
    32dc:	1e 4f       	sbci	r17, 0xFE	; 254
    32de:	fe 01       	movw	r30, r28
    32e0:	e7 5b       	subi	r30, 0xB7	; 183
    32e2:	fe 4f       	sbci	r31, 0xFE	; 254
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	f8 01       	movw	r30, r16
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	de 01       	movw	r26, r28
    32fc:	ad 5b       	subi	r26, 0xBD	; 189
    32fe:	be 4f       	sbci	r27, 0xFE	; 254
    3300:	fe 01       	movw	r30, r28
    3302:	e9 5b       	subi	r30, 0xB9	; 185
    3304:	fe 4f       	sbci	r31, 0xFE	; 254
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	11 96       	adiw	r26, 0x01	; 1
    330c:	9c 93       	st	X, r25
    330e:	8e 93       	st	-X, r24
    3310:	fe 01       	movw	r30, r28
    3312:	ed 5b       	subi	r30, 0xBD	; 189
    3314:	fe 4f       	sbci	r31, 0xFE	; 254
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <main+0xb84>
    331e:	fe 01       	movw	r30, r28
    3320:	ed 5b       	subi	r30, 0xBD	; 189
    3322:	fe 4f       	sbci	r31, 0xFE	; 254
    3324:	91 83       	std	Z+1, r25	; 0x01
    3326:	80 83       	st	Z, r24
		{
			UART_sendByte(PASS_IN);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3328:	80 91 3a 01 	lds	r24, 0x013A
    332c:	8f 5f       	subi	r24, 0xFF	; 255
    332e:	80 93 3a 01 	sts	0x013A, r24
    3332:	80 91 3a 01 	lds	r24, 0x013A
    3336:	85 30       	cpi	r24, 0x05	; 5
    3338:	08 f4       	brcc	.+2      	; 0x333c <main+0xba6>
    333a:	35 cf       	rjmp	.-406    	; 0x31a6 <main+0xa10>
			{
				pass_1[counter] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != 'e');
    333c:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3340:	85 36       	cpi	r24, 0x65	; 101
    3342:	e1 f7       	brne	.-8      	; 0x333c <main+0xba6>
    3344:	fe 01       	movw	r30, r28
    3346:	e1 5c       	subi	r30, 0xC1	; 193
    3348:	fe 4f       	sbci	r31, 0xFE	; 254
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	aa ef       	ldi	r26, 0xFA	; 250
    3350:	b3 e4       	ldi	r27, 0x43	; 67
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	8e 01       	movw	r16, r28
    335c:	05 5c       	subi	r16, 0xC5	; 197
    335e:	1e 4f       	sbci	r17, 0xFE	; 254
    3360:	fe 01       	movw	r30, r28
    3362:	e1 5c       	subi	r30, 0xC1	; 193
    3364:	fe 4f       	sbci	r31, 0xFE	; 254
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a ef       	ldi	r20, 0xFA	; 250
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	f8 01       	movw	r30, r16
    3380:	80 83       	st	Z, r24
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	a2 83       	std	Z+2, r26	; 0x02
    3386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3388:	fe 01       	movw	r30, r28
    338a:	e5 5c       	subi	r30, 0xC5	; 197
    338c:	fe 4f       	sbci	r31, 0xFE	; 254
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	44 f4       	brge	.+16     	; 0x33b6 <main+0xc20>
		__ticks = 1;
    33a6:	fe 01       	movw	r30, r28
    33a8:	e7 5c       	subi	r30, 0xC7	; 199
    33aa:	fe 4f       	sbci	r31, 0xFE	; 254
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	64 c0       	rjmp	.+200    	; 0x347e <main+0xce8>
	else if (__tmp > 65535)
    33b6:	fe 01       	movw	r30, r28
    33b8:	e5 5c       	subi	r30, 0xC5	; 197
    33ba:	fe 4f       	sbci	r31, 0xFE	; 254
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	0c f0       	brlt	.+2      	; 0x33d6 <main+0xc40>
    33d4:	43 c0       	rjmp	.+134    	; 0x345c <main+0xcc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	fe 01       	movw	r30, r28
    33d8:	e1 5c       	subi	r30, 0xC1	; 193
    33da:	fe 4f       	sbci	r31, 0xFE	; 254
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8e 01       	movw	r16, r28
    33f6:	07 5c       	subi	r16, 0xC7	; 199
    33f8:	1e 4f       	sbci	r17, 0xFE	; 254
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	f8 01       	movw	r30, r16
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	1f c0       	rjmp	.+62     	; 0x344c <main+0xcb6>
    340e:	fe 01       	movw	r30, r28
    3410:	e9 5c       	subi	r30, 0xC9	; 201
    3412:	fe 4f       	sbci	r31, 0xFE	; 254
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	fe 01       	movw	r30, r28
    341e:	e9 5c       	subi	r30, 0xC9	; 201
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0xc90>
    342a:	fe 01       	movw	r30, r28
    342c:	e9 5c       	subi	r30, 0xC9	; 201
    342e:	fe 4f       	sbci	r31, 0xFE	; 254
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	de 01       	movw	r26, r28
    3436:	a7 5c       	subi	r26, 0xC7	; 199
    3438:	be 4f       	sbci	r27, 0xFE	; 254
    343a:	fe 01       	movw	r30, r28
    343c:	e7 5c       	subi	r30, 0xC7	; 199
    343e:	fe 4f       	sbci	r31, 0xFE	; 254
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	fe 01       	movw	r30, r28
    344e:	e7 5c       	subi	r30, 0xC7	; 199
    3450:	fe 4f       	sbci	r31, 0xFE	; 254
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	d1 f6       	brne	.-76     	; 0x340e <main+0xc78>
    345a:	28 c0       	rjmp	.+80     	; 0x34ac <main+0xd16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	8e 01       	movw	r16, r28
    345e:	07 5c       	subi	r16, 0xC7	; 199
    3460:	1e 4f       	sbci	r17, 0xFE	; 254
    3462:	fe 01       	movw	r30, r28
    3464:	e5 5c       	subi	r30, 0xC5	; 197
    3466:	fe 4f       	sbci	r31, 0xFE	; 254
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	de 01       	movw	r26, r28
    3480:	ab 5c       	subi	r26, 0xCB	; 203
    3482:	be 4f       	sbci	r27, 0xFE	; 254
    3484:	fe 01       	movw	r30, r28
    3486:	e7 5c       	subi	r30, 0xC7	; 199
    3488:	fe 4f       	sbci	r31, 0xFE	; 254
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	9c 93       	st	X, r25
    3492:	8e 93       	st	-X, r24
    3494:	fe 01       	movw	r30, r28
    3496:	eb 5c       	subi	r30, 0xCB	; 203
    3498:	fe 4f       	sbci	r31, 0xFE	; 254
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0xd08>
    34a2:	fe 01       	movw	r30, r28
    34a4:	eb 5c       	subi	r30, 0xCB	; 203
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
			_delay_ms(500);

			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    34ac:	10 92 3a 01 	sts	0x013A, r1
    34b0:	0f c0       	rjmp	.+30     	; 0x34d0 <main+0xd3a>
			{
				UART_sendByte(pass_1[counter]);
    34b2:	80 91 3a 01 	lds	r24, 0x013A
    34b6:	88 2f       	mov	r24, r24
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	fc 01       	movw	r30, r24
    34bc:	e0 5c       	subi	r30, 0xC0	; 192
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	80 81       	ld	r24, Z
    34c2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != 'e');
			_delay_ms(500);

			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    34c6:	80 91 3a 01 	lds	r24, 0x013A
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	80 93 3a 01 	sts	0x013A, r24
    34d0:	80 91 3a 01 	lds	r24, 0x013A
    34d4:	85 30       	cpi	r24, 0x05	; 5
    34d6:	68 f3       	brcs	.-38     	; 0x34b2 <main+0xd1c>
			{
				UART_sendByte(pass_1[counter]);
			}
			pass_state = UART_recieveByte();
    34d8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    34dc:	80 93 3b 01 	sts	0x013B, r24
			if(pass_state == CORRECT_PASS)
    34e0:	80 91 3b 01 	lds	r24, 0x013B
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	09 f0       	breq	.+2      	; 0x34ea <main+0xd54>
    34e8:	4a c0       	rjmp	.+148    	; 0x357e <main+0xde8>
			{
				enter_fail = 0;
    34ea:	10 92 3d 01 	sts	0x013D, r1
				LCD_clearScreen();
    34ee:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    34f2:	20 ec       	ldi	r18, 0xC0	; 192
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	a9 01       	movw	r20, r18
    34fc:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 3, "Please Wait");
    3500:	2f ec       	ldi	r18, 0xCF	; 207
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	63 e0       	ldi	r22, 0x03	; 3
    3508:	a9 01       	movw	r20, r18
    350a:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
				seconds = 0;
    350e:	10 92 4a 01 	sts	0x014A, r1
				while(seconds < 15);
    3512:	80 91 4a 01 	lds	r24, 0x014A
    3516:	8f 30       	cpi	r24, 0x0F	; 15
    3518:	e0 f3       	brcs	.-8      	; 0x3512 <main+0xd7c>
				LCD_clearScreen();
    351a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
				people_state = UART_recieveByte();
    351e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3522:	80 93 3f 01 	sts	0x013F, r24
    3526:	12 c0       	rjmp	.+36     	; 0x354c <main+0xdb6>
				while(people_state == PEOPLE_ON)
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
    3528:	2b ed       	ldi	r18, 0xDB	; 219
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	a9 01       	movw	r20, r18
    3532:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 3, "to Enter");
    3536:	2b ee       	ldi	r18, 0xEB	; 235
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	63 e0       	ldi	r22, 0x03	; 3
    353e:	a9 01       	movw	r20, r18
    3540:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					people_state = UART_recieveByte();
    3544:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3548:	80 93 3f 01 	sts	0x013F, r24
				LCD_displayStringRowColumn(1, 3, "Please Wait");
				seconds = 0;
				while(seconds < 15);
				LCD_clearScreen();
				people_state = UART_recieveByte();
				while(people_state == PEOPLE_ON)
    354c:	80 91 3f 01 	lds	r24, 0x013F
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	51 f3       	breq	.-44     	; 0x3528 <main+0xd92>
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
					LCD_displayStringRowColumn(1, 3, "to Enter");
					people_state = UART_recieveByte();
				}
				if(people_state == PEOPLE_OFF)
    3554:	80 91 3f 01 	lds	r24, 0x013F
    3558:	88 23       	and	r24, r24
    355a:	09 f0       	breq	.+2      	; 0x355e <main+0xdc8>
    355c:	3e cd       	rjmp	.-1412   	; 0x2fda <main+0x844>
				{
					LCD_clearScreen();
    355e:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 2, "Door Locking");
    3562:	24 ef       	ldi	r18, 0xF4	; 244
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	62 e0       	ldi	r22, 0x02	; 2
    356a:	a9 01       	movw	r20, r18
    356c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					seconds = 0;
    3570:	10 92 4a 01 	sts	0x014A, r1
					while(seconds < 15);
    3574:	80 91 4a 01 	lds	r24, 0x014A
    3578:	8f 30       	cpi	r24, 0x0F	; 15
    357a:	e0 f3       	brcs	.-8      	; 0x3574 <main+0xdde>
    357c:	2e cd       	rjmp	.-1444   	; 0x2fda <main+0x844>
				}
			}
			else if(pass_state == WRONG_PASS)
    357e:	80 91 3b 01 	lds	r24, 0x013B
    3582:	88 23       	and	r24, r24
    3584:	09 f0       	breq	.+2      	; 0x3588 <main+0xdf2>
    3586:	29 cd       	rjmp	.-1454   	; 0x2fda <main+0x844>
			{
				++enter_fail;
    3588:	80 91 3d 01 	lds	r24, 0x013D
    358c:	8f 5f       	subi	r24, 0xFF	; 255
    358e:	80 93 3d 01 	sts	0x013D, r24
				if(enter_fail == 3)
    3592:	80 91 3d 01 	lds	r24, 0x013D
    3596:	83 30       	cpi	r24, 0x03	; 3
    3598:	e1 f4       	brne	.+56     	; 0x35d2 <main+0xe3c>
				{
					UART_sendByte(ALARM_ON);
    359a:	84 e0       	ldi	r24, 0x04	; 4
    359c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					LCD_clearScreen();
    35a0:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    35a4:	21 e0       	ldi	r18, 0x01	; 1
    35a6:	31 e0       	ldi	r19, 0x01	; 1
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	a9 01       	movw	r20, r18
    35ae:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    35b2:	2f e0       	ldi	r18, 0x0F	; 15
    35b4:	31 e0       	ldi	r19, 0x01	; 1
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	a9 01       	movw	r20, r18
    35bc:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					seconds = 0;
    35c0:	10 92 4a 01 	sts	0x014A, r1
					while(seconds < 60);
    35c4:	80 91 4a 01 	lds	r24, 0x014A
    35c8:	8c 33       	cpi	r24, 0x3C	; 60
    35ca:	e0 f3       	brcs	.-8      	; 0x35c4 <main+0xe2e>
					enter_fail = 0;
    35cc:	10 92 3d 01 	sts	0x013D, r1
    35d0:	04 cd       	rjmp	.-1528   	; 0x2fda <main+0x844>
				}
				else
				{
					UART_sendByte(PASS_IN);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					LCD_clearScreen();
    35d8:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayString("Plz enter old");
    35dc:	8b ea       	ldi	r24, 0xAB	; 171
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "pass: ");
    35e4:	29 eb       	ldi	r18, 0xB9	; 185
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	a9 01       	movw	r20, r18
    35ee:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    35f2:	10 92 3a 01 	sts	0x013A, r1
    35f6:	c6 c0       	rjmp	.+396    	; 0x3784 <main+0xfee>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
    35f8:	80 91 3a 01 	lds	r24, 0x013A
    35fc:	08 2f       	mov	r16, r24
    35fe:	10 e0       	ldi	r17, 0x00	; 0
    3600:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3604:	f8 01       	movw	r30, r16
    3606:	e0 5c       	subi	r30, 0xC0	; 192
    3608:	fe 4f       	sbci	r31, 0xFE	; 254
    360a:	80 83       	st	Z, r24
						LCD_displayCharacter('*');
    360c:	8a e2       	ldi	r24, 0x2A	; 42
    360e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    3612:	fe 01       	movw	r30, r28
    3614:	ef 5c       	subi	r30, 0xCF	; 207
    3616:	fe 4f       	sbci	r31, 0xFE	; 254
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	aa ef       	ldi	r26, 0xFA	; 250
    361e:	b3 e4       	ldi	r27, 0x43	; 67
    3620:	80 83       	st	Z, r24
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	a2 83       	std	Z+2, r26	; 0x02
    3626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	8e 01       	movw	r16, r28
    362a:	03 5d       	subi	r16, 0xD3	; 211
    362c:	1e 4f       	sbci	r17, 0xFE	; 254
    362e:	fe 01       	movw	r30, r28
    3630:	ef 5c       	subi	r30, 0xCF	; 207
    3632:	fe 4f       	sbci	r31, 0xFE	; 254
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a ef       	ldi	r20, 0xFA	; 250
    3642:	54 e4       	ldi	r21, 0x44	; 68
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	f8 01       	movw	r30, r16
    364e:	80 83       	st	Z, r24
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	a2 83       	std	Z+2, r26	; 0x02
    3654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3656:	fe 01       	movw	r30, r28
    3658:	e3 5d       	subi	r30, 0xD3	; 211
    365a:	fe 4f       	sbci	r31, 0xFE	; 254
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e8       	ldi	r20, 0x80	; 128
    366a:	5f e3       	ldi	r21, 0x3F	; 63
    366c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3670:	88 23       	and	r24, r24
    3672:	44 f4       	brge	.+16     	; 0x3684 <main+0xeee>
		__ticks = 1;
    3674:	fe 01       	movw	r30, r28
    3676:	e5 5d       	subi	r30, 0xD5	; 213
    3678:	fe 4f       	sbci	r31, 0xFE	; 254
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	64 c0       	rjmp	.+200    	; 0x374c <main+0xfb6>
	else if (__tmp > 65535)
    3684:	fe 01       	movw	r30, r28
    3686:	e3 5d       	subi	r30, 0xD3	; 211
    3688:	fe 4f       	sbci	r31, 0xFE	; 254
    368a:	60 81       	ld	r22, Z
    368c:	71 81       	ldd	r23, Z+1	; 0x01
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	93 81       	ldd	r25, Z+3	; 0x03
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <main+0xf0e>
    36a2:	43 c0       	rjmp	.+134    	; 0x372a <main+0xf94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	fe 01       	movw	r30, r28
    36a6:	ef 5c       	subi	r30, 0xCF	; 207
    36a8:	fe 4f       	sbci	r31, 0xFE	; 254
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8e 01       	movw	r16, r28
    36c4:	05 5d       	subi	r16, 0xD5	; 213
    36c6:	1e 4f       	sbci	r17, 0xFE	; 254
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	1f c0       	rjmp	.+62     	; 0x371a <main+0xf84>
    36dc:	fe 01       	movw	r30, r28
    36de:	e7 5d       	subi	r30, 0xD7	; 215
    36e0:	fe 4f       	sbci	r31, 0xFE	; 254
    36e2:	88 ec       	ldi	r24, 0xC8	; 200
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	fe 01       	movw	r30, r28
    36ec:	e7 5d       	subi	r30, 0xD7	; 215
    36ee:	fe 4f       	sbci	r31, 0xFE	; 254
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <main+0xf5e>
    36f8:	fe 01       	movw	r30, r28
    36fa:	e7 5d       	subi	r30, 0xD7	; 215
    36fc:	fe 4f       	sbci	r31, 0xFE	; 254
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3702:	de 01       	movw	r26, r28
    3704:	a5 5d       	subi	r26, 0xD5	; 213
    3706:	be 4f       	sbci	r27, 0xFE	; 254
    3708:	fe 01       	movw	r30, r28
    370a:	e5 5d       	subi	r30, 0xD5	; 213
    370c:	fe 4f       	sbci	r31, 0xFE	; 254
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	11 96       	adiw	r26, 0x01	; 1
    3716:	9c 93       	st	X, r25
    3718:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371a:	fe 01       	movw	r30, r28
    371c:	e5 5d       	subi	r30, 0xD5	; 213
    371e:	fe 4f       	sbci	r31, 0xFE	; 254
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	d1 f6       	brne	.-76     	; 0x36dc <main+0xf46>
    3728:	28 c0       	rjmp	.+80     	; 0x377a <main+0xfe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	8e 01       	movw	r16, r28
    372c:	05 5d       	subi	r16, 0xD5	; 213
    372e:	1e 4f       	sbci	r17, 0xFE	; 254
    3730:	fe 01       	movw	r30, r28
    3732:	e3 5d       	subi	r30, 0xD3	; 211
    3734:	fe 4f       	sbci	r31, 0xFE	; 254
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    374c:	de 01       	movw	r26, r28
    374e:	a9 5d       	subi	r26, 0xD9	; 217
    3750:	be 4f       	sbci	r27, 0xFE	; 254
    3752:	fe 01       	movw	r30, r28
    3754:	e5 5d       	subi	r30, 0xD5	; 213
    3756:	fe 4f       	sbci	r31, 0xFE	; 254
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
    3762:	fe 01       	movw	r30, r28
    3764:	e9 5d       	subi	r30, 0xD9	; 217
    3766:	fe 4f       	sbci	r31, 0xFE	; 254
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <main+0xfd6>
    3770:	fe 01       	movw	r30, r28
    3772:	e9 5d       	subi	r30, 0xD9	; 217
    3774:	fe 4f       	sbci	r31, 0xFE	; 254
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
				{
					UART_sendByte(PASS_IN);
					LCD_clearScreen();
					LCD_displayString("Plz enter old");
					LCD_displayStringRowColumn(1, 0, "pass: ");
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    377a:	80 91 3a 01 	lds	r24, 0x013A
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	80 93 3a 01 	sts	0x013A, r24
    3784:	80 91 3a 01 	lds	r24, 0x013A
    3788:	85 30       	cpi	r24, 0x05	; 5
    378a:	08 f4       	brcc	.+2      	; 0x378e <main+0xff8>
    378c:	35 cf       	rjmp	.-406    	; 0x35f8 <main+0xe62>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
    378e:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3792:	85 36       	cpi	r24, 0x65	; 101
    3794:	e1 f7       	brne	.-8      	; 0x378e <main+0xff8>
    3796:	fe 01       	movw	r30, r28
    3798:	ed 5d       	subi	r30, 0xDD	; 221
    379a:	fe 4f       	sbci	r31, 0xFE	; 254
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	aa ef       	ldi	r26, 0xFA	; 250
    37a2:	b3 e4       	ldi	r27, 0x43	; 67
    37a4:	80 83       	st	Z, r24
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	a2 83       	std	Z+2, r26	; 0x02
    37aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ac:	8e 01       	movw	r16, r28
    37ae:	01 5e       	subi	r16, 0xE1	; 225
    37b0:	1e 4f       	sbci	r17, 0xFE	; 254
    37b2:	fe 01       	movw	r30, r28
    37b4:	ed 5d       	subi	r30, 0xDD	; 221
    37b6:	fe 4f       	sbci	r31, 0xFE	; 254
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	4a ef       	ldi	r20, 0xFA	; 250
    37c6:	54 e4       	ldi	r21, 0x44	; 68
    37c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	80 83       	st	Z, r24
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	a2 83       	std	Z+2, r26	; 0x02
    37d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37da:	fe 01       	movw	r30, r28
    37dc:	e1 5e       	subi	r30, 0xE1	; 225
    37de:	fe 4f       	sbci	r31, 0xFE	; 254
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	44 f4       	brge	.+16     	; 0x3808 <main+0x1072>
		__ticks = 1;
    37f8:	fe 01       	movw	r30, r28
    37fa:	e3 5e       	subi	r30, 0xE3	; 227
    37fc:	fe 4f       	sbci	r31, 0xFE	; 254
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24
    3806:	64 c0       	rjmp	.+200    	; 0x38d0 <main+0x113a>
	else if (__tmp > 65535)
    3808:	fe 01       	movw	r30, r28
    380a:	e1 5e       	subi	r30, 0xE1	; 225
    380c:	fe 4f       	sbci	r31, 0xFE	; 254
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	57 e4       	ldi	r21, 0x47	; 71
    381e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3822:	18 16       	cp	r1, r24
    3824:	0c f0       	brlt	.+2      	; 0x3828 <main+0x1092>
    3826:	43 c0       	rjmp	.+134    	; 0x38ae <main+0x1118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3828:	fe 01       	movw	r30, r28
    382a:	ed 5d       	subi	r30, 0xDD	; 221
    382c:	fe 4f       	sbci	r31, 0xFE	; 254
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e2       	ldi	r20, 0x20	; 32
    383c:	51 e4       	ldi	r21, 0x41	; 65
    383e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	8e 01       	movw	r16, r28
    3848:	03 5e       	subi	r16, 0xE3	; 227
    384a:	1e 4f       	sbci	r17, 0xFE	; 254
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	f8 01       	movw	r30, r16
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
    385e:	1f c0       	rjmp	.+62     	; 0x389e <main+0x1108>
    3860:	fe 01       	movw	r30, r28
    3862:	e5 5e       	subi	r30, 0xE5	; 229
    3864:	fe 4f       	sbci	r31, 0xFE	; 254
    3866:	88 ec       	ldi	r24, 0xC8	; 200
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
    386e:	fe 01       	movw	r30, r28
    3870:	e5 5e       	subi	r30, 0xE5	; 229
    3872:	fe 4f       	sbci	r31, 0xFE	; 254
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <main+0x10e2>
    387c:	fe 01       	movw	r30, r28
    387e:	e5 5e       	subi	r30, 0xE5	; 229
    3880:	fe 4f       	sbci	r31, 0xFE	; 254
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3886:	de 01       	movw	r26, r28
    3888:	a3 5e       	subi	r26, 0xE3	; 227
    388a:	be 4f       	sbci	r27, 0xFE	; 254
    388c:	fe 01       	movw	r30, r28
    388e:	e3 5e       	subi	r30, 0xE3	; 227
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	11 96       	adiw	r26, 0x01	; 1
    389a:	9c 93       	st	X, r25
    389c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389e:	fe 01       	movw	r30, r28
    38a0:	e3 5e       	subi	r30, 0xE3	; 227
    38a2:	fe 4f       	sbci	r31, 0xFE	; 254
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	d1 f6       	brne	.-76     	; 0x3860 <main+0x10ca>
    38ac:	28 c0       	rjmp	.+80     	; 0x38fe <main+0x1168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ae:	8e 01       	movw	r16, r28
    38b0:	03 5e       	subi	r16, 0xE3	; 227
    38b2:	1e 4f       	sbci	r17, 0xFE	; 254
    38b4:	fe 01       	movw	r30, r28
    38b6:	e1 5e       	subi	r30, 0xE1	; 225
    38b8:	fe 4f       	sbci	r31, 0xFE	; 254
    38ba:	60 81       	ld	r22, Z
    38bc:	71 81       	ldd	r23, Z+1	; 0x01
    38be:	82 81       	ldd	r24, Z+2	; 0x02
    38c0:	93 81       	ldd	r25, Z+3	; 0x03
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	f8 01       	movw	r30, r16
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	de 01       	movw	r26, r28
    38d2:	a7 5e       	subi	r26, 0xE7	; 231
    38d4:	be 4f       	sbci	r27, 0xFE	; 254
    38d6:	fe 01       	movw	r30, r28
    38d8:	e3 5e       	subi	r30, 0xE3	; 227
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	80 81       	ld	r24, Z
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	11 96       	adiw	r26, 0x01	; 1
    38e2:	9c 93       	st	X, r25
    38e4:	8e 93       	st	-X, r24
    38e6:	fe 01       	movw	r30, r28
    38e8:	e7 5e       	subi	r30, 0xE7	; 231
    38ea:	fe 4f       	sbci	r31, 0xFE	; 254
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <main+0x115a>
    38f4:	fe 01       	movw	r30, r28
    38f6:	e7 5e       	subi	r30, 0xE7	; 231
    38f8:	fe 4f       	sbci	r31, 0xFE	; 254
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	80 83       	st	Z, r24
					_delay_ms(500);
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    38fe:	10 92 3a 01 	sts	0x013A, r1
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <main+0x118c>
					{
						UART_sendByte(pass_1[counter]);
    3904:	80 91 3a 01 	lds	r24, 0x013A
    3908:	88 2f       	mov	r24, r24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	fc 01       	movw	r30, r24
    390e:	e0 5c       	subi	r30, 0xC0	; 192
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	80 81       	ld	r24, Z
    3914:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
					_delay_ms(500);
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3918:	80 91 3a 01 	lds	r24, 0x013A
    391c:	8f 5f       	subi	r24, 0xFF	; 255
    391e:	80 93 3a 01 	sts	0x013A, r24
    3922:	80 91 3a 01 	lds	r24, 0x013A
    3926:	85 30       	cpi	r24, 0x05	; 5
    3928:	68 f3       	brcs	.-38     	; 0x3904 <main+0x116e>
					{
						UART_sendByte(pass_1[counter]);
					}
					pass_state = UART_recieveByte();
    392a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    392e:	80 93 3b 01 	sts	0x013B, r24
					if(pass_state == CORRECT_PASS)
    3932:	80 91 3b 01 	lds	r24, 0x013B
    3936:	81 30       	cpi	r24, 0x01	; 1
    3938:	09 f0       	breq	.+2      	; 0x393c <main+0x11a6>
    393a:	4a c0       	rjmp	.+148    	; 0x39d0 <main+0x123a>
					{
						enter_fail = 0;
    393c:	10 92 3d 01 	sts	0x013D, r1
						LCD_clearScreen();
    3940:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    3944:	20 ec       	ldi	r18, 0xC0	; 192
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	61 e0       	ldi	r22, 0x01	; 1
    394c:	a9 01       	movw	r20, r18
    394e:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 3, "Please Wait");
    3952:	2f ec       	ldi	r18, 0xCF	; 207
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	63 e0       	ldi	r22, 0x03	; 3
    395a:	a9 01       	movw	r20, r18
    395c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
						seconds = 0;
    3960:	10 92 4a 01 	sts	0x014A, r1
						while(seconds < 15);
    3964:	80 91 4a 01 	lds	r24, 0x014A
    3968:	8f 30       	cpi	r24, 0x0F	; 15
    396a:	e0 f3       	brcs	.-8      	; 0x3964 <main+0x11ce>
						LCD_clearScreen();
    396c:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
						people_state = UART_recieveByte();
    3970:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3974:	80 93 3f 01 	sts	0x013F, r24
    3978:	12 c0       	rjmp	.+36     	; 0x399e <main+0x1208>
						while(people_state == PEOPLE_ON)
						{
							LCD_displayStringRowColumn(0, 0, "Wait for People");
    397a:	2b ed       	ldi	r18, 0xDB	; 219
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	a9 01       	movw	r20, r18
    3984:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					        LCD_displayStringRowColumn(1, 3, "to Enter");
    3988:	2b ee       	ldi	r18, 0xEB	; 235
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	63 e0       	ldi	r22, 0x03	; 3
    3990:	a9 01       	movw	r20, r18
    3992:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							people_state = UART_recieveByte();
    3996:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    399a:	80 93 3f 01 	sts	0x013F, r24
						LCD_displayStringRowColumn(1, 3, "Please Wait");
						seconds = 0;
						while(seconds < 15);
						LCD_clearScreen();
						people_state = UART_recieveByte();
						while(people_state == PEOPLE_ON)
    399e:	80 91 3f 01 	lds	r24, 0x013F
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	51 f3       	breq	.-44     	; 0x397a <main+0x11e4>
						{
							LCD_displayStringRowColumn(0, 0, "Wait for People");
					        LCD_displayStringRowColumn(1, 3, "to Enter");
							people_state = UART_recieveByte();
						}
						if(people_state == PEOPLE_OFF)
    39a6:	80 91 3f 01 	lds	r24, 0x013F
    39aa:	88 23       	and	r24, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <main+0x121a>
    39ae:	15 cb       	rjmp	.-2518   	; 0x2fda <main+0x844>
						{
							LCD_clearScreen();
    39b0:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 2, "Door Locking");
    39b4:	24 ef       	ldi	r18, 0xF4	; 244
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	62 e0       	ldi	r22, 0x02	; 2
    39bc:	a9 01       	movw	r20, r18
    39be:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							seconds = 0;
    39c2:	10 92 4a 01 	sts	0x014A, r1
							while(seconds < 15);
    39c6:	80 91 4a 01 	lds	r24, 0x014A
    39ca:	8f 30       	cpi	r24, 0x0F	; 15
    39cc:	e0 f3       	brcs	.-8      	; 0x39c6 <main+0x1230>
    39ce:	05 cb       	rjmp	.-2550   	; 0x2fda <main+0x844>
						}
					}
					else if(pass_state == WRONG_PASS)
    39d0:	80 91 3b 01 	lds	r24, 0x013B
    39d4:	88 23       	and	r24, r24
    39d6:	09 f0       	breq	.+2      	; 0x39da <main+0x1244>
    39d8:	00 cb       	rjmp	.-2560   	; 0x2fda <main+0x844>
					{
						++enter_fail;
    39da:	80 91 3d 01 	lds	r24, 0x013D
    39de:	8f 5f       	subi	r24, 0xFF	; 255
    39e0:	80 93 3d 01 	sts	0x013D, r24
						if(enter_fail == 3)
    39e4:	80 91 3d 01 	lds	r24, 0x013D
    39e8:	83 30       	cpi	r24, 0x03	; 3
    39ea:	e1 f4       	brne	.+56     	; 0x3a24 <main+0x128e>
						{
							UART_sendByte(ALARM_ON);
    39ec:	84 e0       	ldi	r24, 0x04	; 4
    39ee:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							LCD_clearScreen();
    39f2:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 1, "System LOCKED");
    39f6:	21 e0       	ldi	r18, 0x01	; 1
    39f8:	31 e0       	ldi	r19, 0x01	; 1
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	61 e0       	ldi	r22, 0x01	; 1
    39fe:	a9 01       	movw	r20, r18
    3a00:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    3a04:	2f e0       	ldi	r18, 0x0F	; 15
    3a06:	31 e0       	ldi	r19, 0x01	; 1
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	a9 01       	movw	r20, r18
    3a0e:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							seconds = 0;
    3a12:	10 92 4a 01 	sts	0x014A, r1
							while(seconds < 60);
    3a16:	80 91 4a 01 	lds	r24, 0x014A
    3a1a:	8c 33       	cpi	r24, 0x3C	; 60
    3a1c:	e0 f3       	brcs	.-8      	; 0x3a16 <main+0x1280>
							enter_fail = 0;
    3a1e:	10 92 3d 01 	sts	0x013D, r1
    3a22:	db ca       	rjmp	.-2634   	; 0x2fda <main+0x844>
						}
						else
						{
							UART_sendByte(PASS_IN);
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							LCD_clearScreen();
    3a2a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayString("Plz enter old");
    3a2e:	8b ea       	ldi	r24, 0xAB	; 171
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
							LCD_displayStringRowColumn(1, 0, "pass: ");
    3a36:	29 eb       	ldi	r18, 0xB9	; 185
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	a9 01       	movw	r20, r18
    3a40:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3a44:	10 92 3a 01 	sts	0x013A, r1
    3a48:	c6 c0       	rjmp	.+396    	; 0x3bd6 <main+0x1440>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
    3a4a:	80 91 3a 01 	lds	r24, 0x013A
    3a4e:	08 2f       	mov	r16, r24
    3a50:	10 e0       	ldi	r17, 0x00	; 0
    3a52:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3a56:	f8 01       	movw	r30, r16
    3a58:	e0 5c       	subi	r30, 0xC0	; 192
    3a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5c:	80 83       	st	Z, r24
								LCD_displayCharacter('*');
    3a5e:	8a e2       	ldi	r24, 0x2A	; 42
    3a60:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    3a64:	fe 01       	movw	r30, r28
    3a66:	eb 5e       	subi	r30, 0xEB	; 235
    3a68:	fe 4f       	sbci	r31, 0xFE	; 254
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	aa ef       	ldi	r26, 0xFA	; 250
    3a70:	b3 e4       	ldi	r27, 0x43	; 67
    3a72:	80 83       	st	Z, r24
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	a2 83       	std	Z+2, r26	; 0x02
    3a78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7a:	8e 01       	movw	r16, r28
    3a7c:	0f 5e       	subi	r16, 0xEF	; 239
    3a7e:	1e 4f       	sbci	r17, 0xFE	; 254
    3a80:	fe 01       	movw	r30, r28
    3a82:	eb 5e       	subi	r30, 0xEB	; 235
    3a84:	fe 4f       	sbci	r31, 0xFE	; 254
    3a86:	60 81       	ld	r22, Z
    3a88:	71 81       	ldd	r23, Z+1	; 0x01
    3a8a:	82 81       	ldd	r24, Z+2	; 0x02
    3a8c:	93 81       	ldd	r25, Z+3	; 0x03
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	4a ef       	ldi	r20, 0xFA	; 250
    3a94:	54 e4       	ldi	r21, 0x44	; 68
    3a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	80 83       	st	Z, r24
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	a2 83       	std	Z+2, r26	; 0x02
    3aa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ef 5e       	subi	r30, 0xEF	; 239
    3aac:	fe 4f       	sbci	r31, 0xFE	; 254
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e8       	ldi	r20, 0x80	; 128
    3abc:	5f e3       	ldi	r21, 0x3F	; 63
    3abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ac2:	88 23       	and	r24, r24
    3ac4:	44 f4       	brge	.+16     	; 0x3ad6 <main+0x1340>
		__ticks = 1;
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e1 5f       	subi	r30, 0xF1	; 241
    3aca:	fe 4f       	sbci	r31, 0xFE	; 254
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	64 c0       	rjmp	.+200    	; 0x3b9e <main+0x1408>
	else if (__tmp > 65535)
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	ef 5e       	subi	r30, 0xEF	; 239
    3ada:	fe 4f       	sbci	r31, 0xFE	; 254
    3adc:	60 81       	ld	r22, Z
    3ade:	71 81       	ldd	r23, Z+1	; 0x01
    3ae0:	82 81       	ldd	r24, Z+2	; 0x02
    3ae2:	93 81       	ldd	r25, Z+3	; 0x03
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	3f ef       	ldi	r19, 0xFF	; 255
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	57 e4       	ldi	r21, 0x47	; 71
    3aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af0:	18 16       	cp	r1, r24
    3af2:	0c f0       	brlt	.+2      	; 0x3af6 <main+0x1360>
    3af4:	43 c0       	rjmp	.+134    	; 0x3b7c <main+0x13e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af6:	fe 01       	movw	r30, r28
    3af8:	eb 5e       	subi	r30, 0xEB	; 235
    3afa:	fe 4f       	sbci	r31, 0xFE	; 254
    3afc:	60 81       	ld	r22, Z
    3afe:	71 81       	ldd	r23, Z+1	; 0x01
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	93 81       	ldd	r25, Z+3	; 0x03
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e2       	ldi	r20, 0x20	; 32
    3b0a:	51 e4       	ldi	r21, 0x41	; 65
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	8e 01       	movw	r16, r28
    3b16:	01 5f       	subi	r16, 0xF1	; 241
    3b18:	1e 4f       	sbci	r17, 0xFE	; 254
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	f8 01       	movw	r30, r16
    3b28:	91 83       	std	Z+1, r25	; 0x01
    3b2a:	80 83       	st	Z, r24
    3b2c:	1f c0       	rjmp	.+62     	; 0x3b6c <main+0x13d6>
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e3 5f       	subi	r30, 0xF3	; 243
    3b32:	fe 4f       	sbci	r31, 0xFE	; 254
    3b34:	88 ec       	ldi	r24, 0xC8	; 200
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	91 83       	std	Z+1, r25	; 0x01
    3b3a:	80 83       	st	Z, r24
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e3 5f       	subi	r30, 0xF3	; 243
    3b40:	fe 4f       	sbci	r31, 0xFE	; 254
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <main+0x13b0>
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e3 5f       	subi	r30, 0xF3	; 243
    3b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b54:	de 01       	movw	r26, r28
    3b56:	a1 5f       	subi	r26, 0xF1	; 241
    3b58:	be 4f       	sbci	r27, 0xFE	; 254
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e1 5f       	subi	r30, 0xF1	; 241
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	11 96       	adiw	r26, 0x01	; 1
    3b68:	9c 93       	st	X, r25
    3b6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e1 5f       	subi	r30, 0xF1	; 241
    3b70:	fe 4f       	sbci	r31, 0xFE	; 254
    3b72:	80 81       	ld	r24, Z
    3b74:	91 81       	ldd	r25, Z+1	; 0x01
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	d1 f6       	brne	.-76     	; 0x3b2e <main+0x1398>
    3b7a:	28 c0       	rjmp	.+80     	; 0x3bcc <main+0x1436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	8e 01       	movw	r16, r28
    3b7e:	01 5f       	subi	r16, 0xF1	; 241
    3b80:	1e 4f       	sbci	r17, 0xFE	; 254
    3b82:	fe 01       	movw	r30, r28
    3b84:	ef 5e       	subi	r30, 0xEF	; 239
    3b86:	fe 4f       	sbci	r31, 0xFE	; 254
    3b88:	60 81       	ld	r22, Z
    3b8a:	71 81       	ldd	r23, Z+1	; 0x01
    3b8c:	82 81       	ldd	r24, Z+2	; 0x02
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	f8 01       	movw	r30, r16
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	80 83       	st	Z, r24
    3b9e:	de 01       	movw	r26, r28
    3ba0:	a5 5f       	subi	r26, 0xF5	; 245
    3ba2:	be 4f       	sbci	r27, 0xFE	; 254
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e1 5f       	subi	r30, 0xF1	; 241
    3ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	11 96       	adiw	r26, 0x01	; 1
    3bb0:	9c 93       	st	X, r25
    3bb2:	8e 93       	st	-X, r24
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e5 5f       	subi	r30, 0xF5	; 245
    3bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	f1 f7       	brne	.-4      	; 0x3bbe <main+0x1428>
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e5 5f       	subi	r30, 0xF5	; 245
    3bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
						{
							UART_sendByte(PASS_IN);
							LCD_clearScreen();
							LCD_displayString("Plz enter old");
							LCD_displayStringRowColumn(1, 0, "pass: ");
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3bcc:	80 91 3a 01 	lds	r24, 0x013A
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	80 93 3a 01 	sts	0x013A, r24
    3bd6:	80 91 3a 01 	lds	r24, 0x013A
    3bda:	85 30       	cpi	r24, 0x05	; 5
    3bdc:	08 f4       	brcc	.+2      	; 0x3be0 <main+0x144a>
    3bde:	35 cf       	rjmp	.-406    	; 0x3a4a <main+0x12b4>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
    3be0:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3be4:	85 36       	cpi	r24, 0x65	; 101
    3be6:	e1 f7       	brne	.-8      	; 0x3be0 <main+0x144a>
    3be8:	fe 01       	movw	r30, r28
    3bea:	e9 5f       	subi	r30, 0xF9	; 249
    3bec:	fe 4f       	sbci	r31, 0xFE	; 254
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	aa ef       	ldi	r26, 0xFA	; 250
    3bf4:	b3 e4       	ldi	r27, 0x43	; 67
    3bf6:	80 83       	st	Z, r24
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	a2 83       	std	Z+2, r26	; 0x02
    3bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfe:	8e 01       	movw	r16, r28
    3c00:	0d 5f       	subi	r16, 0xFD	; 253
    3c02:	1e 4f       	sbci	r17, 0xFE	; 254
    3c04:	fe 01       	movw	r30, r28
    3c06:	e9 5f       	subi	r30, 0xF9	; 249
    3c08:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	4a ef       	ldi	r20, 0xFA	; 250
    3c18:	54 e4       	ldi	r21, 0x44	; 68
    3c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	f8 01       	movw	r30, r16
    3c24:	80 83       	st	Z, r24
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	a2 83       	std	Z+2, r26	; 0x02
    3c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ed 5f       	subi	r30, 0xFD	; 253
    3c30:	fe 4f       	sbci	r31, 0xFE	; 254
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e8       	ldi	r20, 0x80	; 128
    3c40:	5f e3       	ldi	r21, 0x3F	; 63
    3c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c46:	88 23       	and	r24, r24
    3c48:	44 f4       	brge	.+16     	; 0x3c5a <main+0x14c4>
		__ticks = 1;
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	ef 5f       	subi	r30, 0xFF	; 255
    3c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	91 83       	std	Z+1, r25	; 0x01
    3c56:	80 83       	st	Z, r24
    3c58:	64 c0       	rjmp	.+200    	; 0x3d22 <main+0x158c>
	else if (__tmp > 65535)
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ed 5f       	subi	r30, 0xFD	; 253
    3c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	3f ef       	ldi	r19, 0xFF	; 255
    3c6c:	4f e7       	ldi	r20, 0x7F	; 127
    3c6e:	57 e4       	ldi	r21, 0x47	; 71
    3c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c74:	18 16       	cp	r1, r24
    3c76:	0c f0       	brlt	.+2      	; 0x3c7a <main+0x14e4>
    3c78:	43 c0       	rjmp	.+134    	; 0x3d00 <main+0x156a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e9 5f       	subi	r30, 0xF9	; 249
    3c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c80:	60 81       	ld	r22, Z
    3c82:	71 81       	ldd	r23, Z+1	; 0x01
    3c84:	82 81       	ldd	r24, Z+2	; 0x02
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 e2       	ldi	r20, 0x20	; 32
    3c8e:	51 e4       	ldi	r21, 0x41	; 65
    3c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	8e 01       	movw	r16, r28
    3c9a:	0f 5f       	subi	r16, 0xFF	; 255
    3c9c:	1e 4f       	sbci	r17, 0xFE	; 254
    3c9e:	bc 01       	movw	r22, r24
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	f8 01       	movw	r30, r16
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	80 83       	st	Z, r24
    3cb0:	1f c0       	rjmp	.+62     	; 0x3cf0 <main+0x155a>
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e1 50       	subi	r30, 0x01	; 1
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	88 ec       	ldi	r24, 0xC8	; 200
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e1 50       	subi	r30, 0x01	; 1
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	80 81       	ld	r24, Z
    3cc8:	91 81       	ldd	r25, Z+1	; 0x01
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	f1 f7       	brne	.-4      	; 0x3cca <main+0x1534>
    3cce:	fe 01       	movw	r30, r28
    3cd0:	e1 50       	subi	r30, 0x01	; 1
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd8:	de 01       	movw	r26, r28
    3cda:	af 5f       	subi	r26, 0xFF	; 255
    3cdc:	be 4f       	sbci	r27, 0xFE	; 254
    3cde:	fe 01       	movw	r30, r28
    3ce0:	ef 5f       	subi	r30, 0xFF	; 255
    3ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce4:	80 81       	ld	r24, Z
    3ce6:	91 81       	ldd	r25, Z+1	; 0x01
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	11 96       	adiw	r26, 0x01	; 1
    3cec:	9c 93       	st	X, r25
    3cee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ef 5f       	subi	r30, 0xFF	; 255
    3cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	d1 f6       	brne	.-76     	; 0x3cb2 <main+0x151c>
    3cfe:	28 c0       	rjmp	.+80     	; 0x3d50 <main+0x15ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d00:	8e 01       	movw	r16, r28
    3d02:	0f 5f       	subi	r16, 0xFF	; 255
    3d04:	1e 4f       	sbci	r17, 0xFE	; 254
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 5f       	subi	r30, 0xFD	; 253
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	60 81       	ld	r22, Z
    3d0e:	71 81       	ldd	r23, Z+1	; 0x01
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	93 81       	ldd	r25, Z+3	; 0x03
    3d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	f8 01       	movw	r30, r16
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	80 83       	st	Z, r24
    3d22:	de 01       	movw	r26, r28
    3d24:	a3 50       	subi	r26, 0x03	; 3
    3d26:	bf 4f       	sbci	r27, 0xFF	; 255
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ef 5f       	subi	r30, 0xFF	; 255
    3d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	11 96       	adiw	r26, 0x01	; 1
    3d34:	9c 93       	st	X, r25
    3d36:	8e 93       	st	-X, r24
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e3 50       	subi	r30, 0x03	; 3
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	80 81       	ld	r24, Z
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <main+0x15ac>
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 50       	subi	r30, 0x03	; 3
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
							_delay_ms(500);
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3d50:	10 92 3a 01 	sts	0x013A, r1
    3d54:	0f c0       	rjmp	.+30     	; 0x3d74 <main+0x15de>
							{
								UART_sendByte(pass_1[counter]);
    3d56:	80 91 3a 01 	lds	r24, 0x013A
    3d5a:	88 2f       	mov	r24, r24
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e0 5c       	subi	r30, 0xC0	; 192
    3d62:	fe 4f       	sbci	r31, 0xFE	; 254
    3d64:	80 81       	ld	r24, Z
    3d66:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
							_delay_ms(500);
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3d6a:	80 91 3a 01 	lds	r24, 0x013A
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	80 93 3a 01 	sts	0x013A, r24
    3d74:	80 91 3a 01 	lds	r24, 0x013A
    3d78:	85 30       	cpi	r24, 0x05	; 5
    3d7a:	68 f3       	brcs	.-38     	; 0x3d56 <main+0x15c0>
							{
								UART_sendByte(pass_1[counter]);
							}
							pass_state = UART_recieveByte();
    3d7c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3d80:	80 93 3b 01 	sts	0x013B, r24
							if(pass_state == CORRECT_PASS)
    3d84:	80 91 3b 01 	lds	r24, 0x013B
    3d88:	81 30       	cpi	r24, 0x01	; 1
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <main+0x15f8>
    3d8c:	4a c0       	rjmp	.+148    	; 0x3e22 <main+0x168c>
							{
								enter_fail = 0;
    3d8e:	10 92 3d 01 	sts	0x013D, r1
								LCD_clearScreen();
    3d92:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
								LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    3d96:	20 ec       	ldi	r18, 0xC0	; 192
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	61 e0       	ldi	r22, 0x01	; 1
    3d9e:	a9 01       	movw	r20, r18
    3da0:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
								LCD_displayStringRowColumn(1, 3, "Please Wait");
    3da4:	2f ec       	ldi	r18, 0xCF	; 207
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	63 e0       	ldi	r22, 0x03	; 3
    3dac:	a9 01       	movw	r20, r18
    3dae:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
								seconds = 0;
    3db2:	10 92 4a 01 	sts	0x014A, r1
								while(seconds < 15);
    3db6:	80 91 4a 01 	lds	r24, 0x014A
    3dba:	8f 30       	cpi	r24, 0x0F	; 15
    3dbc:	e0 f3       	brcs	.-8      	; 0x3db6 <main+0x1620>
								LCD_clearScreen();
    3dbe:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
								people_state = UART_recieveByte();
    3dc2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3dc6:	80 93 3f 01 	sts	0x013F, r24
    3dca:	12 c0       	rjmp	.+36     	; 0x3df0 <main+0x165a>
								while(people_state == PEOPLE_ON)
								{
									LCD_displayStringRowColumn(0, 0, "Wait for People");
    3dcc:	2b ed       	ldi	r18, 0xDB	; 219
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	a9 01       	movw	r20, r18
    3dd6:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									LCD_displayStringRowColumn(1, 3, "to Enter");
    3dda:	2b ee       	ldi	r18, 0xEB	; 235
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	63 e0       	ldi	r22, 0x03	; 3
    3de2:	a9 01       	movw	r20, r18
    3de4:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									people_state = UART_recieveByte();
    3de8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    3dec:	80 93 3f 01 	sts	0x013F, r24
								LCD_displayStringRowColumn(1, 3, "Please Wait");
								seconds = 0;
								while(seconds < 15);
								LCD_clearScreen();
								people_state = UART_recieveByte();
								while(people_state == PEOPLE_ON)
    3df0:	80 91 3f 01 	lds	r24, 0x013F
    3df4:	81 30       	cpi	r24, 0x01	; 1
    3df6:	51 f3       	breq	.-44     	; 0x3dcc <main+0x1636>
								{
									LCD_displayStringRowColumn(0, 0, "Wait for People");
									LCD_displayStringRowColumn(1, 3, "to Enter");
									people_state = UART_recieveByte();
								}
								if(people_state == PEOPLE_OFF)
    3df8:	80 91 3f 01 	lds	r24, 0x013F
    3dfc:	88 23       	and	r24, r24
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <main+0x166c>
    3e00:	ec c8       	rjmp	.-3624   	; 0x2fda <main+0x844>
								{
									LCD_clearScreen();
    3e02:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									LCD_displayStringRowColumn(0, 2, "Door Locking");
    3e06:	24 ef       	ldi	r18, 0xF4	; 244
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	62 e0       	ldi	r22, 0x02	; 2
    3e0e:	a9 01       	movw	r20, r18
    3e10:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									seconds = 0;
    3e14:	10 92 4a 01 	sts	0x014A, r1
									while(seconds < 15);
    3e18:	80 91 4a 01 	lds	r24, 0x014A
    3e1c:	8f 30       	cpi	r24, 0x0F	; 15
    3e1e:	e0 f3       	brcs	.-8      	; 0x3e18 <main+0x1682>
    3e20:	dc c8       	rjmp	.-3656   	; 0x2fda <main+0x844>
								}
							}
							else if(pass_state == WRONG_PASS)
    3e22:	80 91 3b 01 	lds	r24, 0x013B
    3e26:	88 23       	and	r24, r24
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <main+0x1696>
    3e2a:	d7 c8       	rjmp	.-3666   	; 0x2fda <main+0x844>
							{
								++enter_fail;
    3e2c:	80 91 3d 01 	lds	r24, 0x013D
    3e30:	8f 5f       	subi	r24, 0xFF	; 255
    3e32:	80 93 3d 01 	sts	0x013D, r24
								if(enter_fail == 3)
    3e36:	80 91 3d 01 	lds	r24, 0x013D
    3e3a:	83 30       	cpi	r24, 0x03	; 3
    3e3c:	11 f0       	breq	.+4      	; 0x3e42 <main+0x16ac>
    3e3e:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <main+0x3420>
								{
									UART_sendByte(ALARM_ON);
    3e42:	84 e0       	ldi	r24, 0x04	; 4
    3e44:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
									LCD_clearScreen();
    3e48:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									LCD_displayStringRowColumn(0, 1, "System LOCKED");
    3e4c:	21 e0       	ldi	r18, 0x01	; 1
    3e4e:	31 e0       	ldi	r19, 0x01	; 1
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	a9 01       	movw	r20, r18
    3e56:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    3e5a:	2f e0       	ldi	r18, 0x0F	; 15
    3e5c:	31 e0       	ldi	r19, 0x01	; 1
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	a9 01       	movw	r20, r18
    3e64:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									seconds = 0;
    3e68:	10 92 4a 01 	sts	0x014A, r1
									while(seconds < 60);
    3e6c:	80 91 4a 01 	lds	r24, 0x014A
    3e70:	8c 33       	cpi	r24, 0x3C	; 60
    3e72:	e0 f3       	brcs	.-8      	; 0x3e6c <main+0x16d6>
									enter_fail = 0;
    3e74:	10 92 3d 01 	sts	0x013D, r1
    3e78:	b0 c8       	rjmp	.-3744   	; 0x2fda <main+0x844>
						}
					}
				}
			}
		}
		else if(option == '-')
    3e7a:	80 91 3c 01 	lds	r24, 0x013C
    3e7e:	8d 32       	cpi	r24, 0x2D	; 45
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <main+0x16ee>
    3e82:	ab c8       	rjmp	.-3754   	; 0x2fda <main+0x844>
		{
			UART_sendByte(PASS_UPDATE);
    3e84:	83 e0       	ldi	r24, 0x03	; 3
    3e86:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
			LCD_clearScreen();
    3e8a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    3e8e:	8b ea       	ldi	r24, 0xAB	; 171
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    3e96:	29 eb       	ldi	r18, 0xB9	; 185
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	a9 01       	movw	r20, r18
    3ea0:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3ea4:	10 92 3a 01 	sts	0x013A, r1
    3ea8:	c6 c0       	rjmp	.+396    	; 0x4036 <main+0x18a0>
			{
				pass_1[counter] = KEYPAD_getPressedKey();
    3eaa:	80 91 3a 01 	lds	r24, 0x013A
    3eae:	08 2f       	mov	r16, r24
    3eb0:	10 e0       	ldi	r17, 0x00	; 0
    3eb2:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	e0 5c       	subi	r30, 0xC0	; 192
    3eba:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebc:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    3ebe:	8a e2       	ldi	r24, 0x2A	; 42
    3ec0:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e7 50       	subi	r30, 0x07	; 7
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	aa ef       	ldi	r26, 0xFA	; 250
    3ed0:	b3 e4       	ldi	r27, 0x43	; 67
    3ed2:	80 83       	st	Z, r24
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	a2 83       	std	Z+2, r26	; 0x02
    3ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	8e 01       	movw	r16, r28
    3edc:	0b 50       	subi	r16, 0x0B	; 11
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e7 50       	subi	r30, 0x07	; 7
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	4a ef       	ldi	r20, 0xFA	; 250
    3ef4:	54 e4       	ldi	r21, 0x44	; 68
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	f8 01       	movw	r30, r16
    3f00:	80 83       	st	Z, r24
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	a2 83       	std	Z+2, r26	; 0x02
    3f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f08:	fe 01       	movw	r30, r28
    3f0a:	eb 50       	subi	r30, 0x0B	; 11
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e8       	ldi	r20, 0x80	; 128
    3f1c:	5f e3       	ldi	r21, 0x3F	; 63
    3f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f22:	88 23       	and	r24, r24
    3f24:	44 f4       	brge	.+16     	; 0x3f36 <main+0x17a0>
		__ticks = 1;
    3f26:	fe 01       	movw	r30, r28
    3f28:	ed 50       	subi	r30, 0x0D	; 13
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	80 83       	st	Z, r24
    3f34:	64 c0       	rjmp	.+200    	; 0x3ffe <main+0x1868>
	else if (__tmp > 65535)
    3f36:	fe 01       	movw	r30, r28
    3f38:	eb 50       	subi	r30, 0x0B	; 11
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	3f ef       	ldi	r19, 0xFF	; 255
    3f48:	4f e7       	ldi	r20, 0x7F	; 127
    3f4a:	57 e4       	ldi	r21, 0x47	; 71
    3f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f50:	18 16       	cp	r1, r24
    3f52:	0c f0       	brlt	.+2      	; 0x3f56 <main+0x17c0>
    3f54:	43 c0       	rjmp	.+134    	; 0x3fdc <main+0x1846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f56:	fe 01       	movw	r30, r28
    3f58:	e7 50       	subi	r30, 0x07	; 7
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e2       	ldi	r20, 0x20	; 32
    3f6a:	51 e4       	ldi	r21, 0x41	; 65
    3f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8e 01       	movw	r16, r28
    3f76:	0d 50       	subi	r16, 0x0D	; 13
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	f8 01       	movw	r30, r16
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	80 83       	st	Z, r24
    3f8c:	1f c0       	rjmp	.+62     	; 0x3fcc <main+0x1836>
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ef 50       	subi	r30, 0x0F	; 15
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ef 50       	subi	r30, 0x0F	; 15
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <main+0x1810>
    3faa:	fe 01       	movw	r30, r28
    3fac:	ef 50       	subi	r30, 0x0F	; 15
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb4:	de 01       	movw	r26, r28
    3fb6:	ad 50       	subi	r26, 0x0D	; 13
    3fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fba:	fe 01       	movw	r30, r28
    3fbc:	ed 50       	subi	r30, 0x0D	; 13
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	11 96       	adiw	r26, 0x01	; 1
    3fc8:	9c 93       	st	X, r25
    3fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	fe 01       	movw	r30, r28
    3fce:	ed 50       	subi	r30, 0x0D	; 13
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	d1 f6       	brne	.-76     	; 0x3f8e <main+0x17f8>
    3fda:	28 c0       	rjmp	.+80     	; 0x402c <main+0x1896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fdc:	8e 01       	movw	r16, r28
    3fde:	0d 50       	subi	r16, 0x0D	; 13
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	eb 50       	subi	r30, 0x0B	; 11
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	60 81       	ld	r22, Z
    3fea:	71 81       	ldd	r23, Z+1	; 0x01
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	de 01       	movw	r26, r28
    4000:	a1 51       	subi	r26, 0x11	; 17
    4002:	bf 4f       	sbci	r27, 0xFF	; 255
    4004:	fe 01       	movw	r30, r28
    4006:	ed 50       	subi	r30, 0x0D	; 13
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	11 96       	adiw	r26, 0x01	; 1
    4010:	9c 93       	st	X, r25
    4012:	8e 93       	st	-X, r24
    4014:	fe 01       	movw	r30, r28
    4016:	e1 51       	subi	r30, 0x11	; 17
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <main+0x1888>
    4022:	fe 01       	movw	r30, r28
    4024:	e1 51       	subi	r30, 0x11	; 17
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
		{
			UART_sendByte(PASS_UPDATE);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    402c:	80 91 3a 01 	lds	r24, 0x013A
    4030:	8f 5f       	subi	r24, 0xFF	; 255
    4032:	80 93 3a 01 	sts	0x013A, r24
    4036:	80 91 3a 01 	lds	r24, 0x013A
    403a:	85 30       	cpi	r24, 0x05	; 5
    403c:	08 f4       	brcc	.+2      	; 0x4040 <main+0x18aa>
    403e:	35 cf       	rjmp	.-406    	; 0x3eaa <main+0x1714>
			{
				pass_1[counter] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != 'e');
    4040:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4044:	85 36       	cpi	r24, 0x65	; 101
    4046:	e1 f7       	brne	.-8      	; 0x4040 <main+0x18aa>
    4048:	fe 01       	movw	r30, r28
    404a:	e5 51       	subi	r30, 0x15	; 21
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	aa ef       	ldi	r26, 0xFA	; 250
    4054:	b3 e4       	ldi	r27, 0x43	; 67
    4056:	80 83       	st	Z, r24
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	a2 83       	std	Z+2, r26	; 0x02
    405c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405e:	8e 01       	movw	r16, r28
    4060:	09 51       	subi	r16, 0x19	; 25
    4062:	1f 4f       	sbci	r17, 0xFF	; 255
    4064:	fe 01       	movw	r30, r28
    4066:	e5 51       	subi	r30, 0x15	; 21
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	60 81       	ld	r22, Z
    406c:	71 81       	ldd	r23, Z+1	; 0x01
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	4a ef       	ldi	r20, 0xFA	; 250
    4078:	54 e4       	ldi	r21, 0x44	; 68
    407a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	f8 01       	movw	r30, r16
    4084:	80 83       	st	Z, r24
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	a2 83       	std	Z+2, r26	; 0x02
    408a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    408c:	fe 01       	movw	r30, r28
    408e:	e9 51       	subi	r30, 0x19	; 25
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	60 81       	ld	r22, Z
    4094:	71 81       	ldd	r23, Z+1	; 0x01
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	93 81       	ldd	r25, Z+3	; 0x03
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e8       	ldi	r20, 0x80	; 128
    40a0:	5f e3       	ldi	r21, 0x3F	; 63
    40a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	44 f4       	brge	.+16     	; 0x40ba <main+0x1924>
		__ticks = 1;
    40aa:	fe 01       	movw	r30, r28
    40ac:	eb 51       	subi	r30, 0x1B	; 27
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
    40b8:	64 c0       	rjmp	.+200    	; 0x4182 <main+0x19ec>
	else if (__tmp > 65535)
    40ba:	fe 01       	movw	r30, r28
    40bc:	e9 51       	subi	r30, 0x19	; 25
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	60 81       	ld	r22, Z
    40c2:	71 81       	ldd	r23, Z+1	; 0x01
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	3f ef       	ldi	r19, 0xFF	; 255
    40cc:	4f e7       	ldi	r20, 0x7F	; 127
    40ce:	57 e4       	ldi	r21, 0x47	; 71
    40d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d4:	18 16       	cp	r1, r24
    40d6:	0c f0       	brlt	.+2      	; 0x40da <main+0x1944>
    40d8:	43 c0       	rjmp	.+134    	; 0x4160 <main+0x19ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40da:	fe 01       	movw	r30, r28
    40dc:	e5 51       	subi	r30, 0x15	; 21
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e2       	ldi	r20, 0x20	; 32
    40ee:	51 e4       	ldi	r21, 0x41	; 65
    40f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	8e 01       	movw	r16, r28
    40fa:	0b 51       	subi	r16, 0x1B	; 27
    40fc:	1f 4f       	sbci	r17, 0xFF	; 255
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	f8 01       	movw	r30, r16
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	1f c0       	rjmp	.+62     	; 0x4150 <main+0x19ba>
    4112:	fe 01       	movw	r30, r28
    4114:	ed 51       	subi	r30, 0x1D	; 29
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	88 ec       	ldi	r24, 0xC8	; 200
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	91 83       	std	Z+1, r25	; 0x01
    411e:	80 83       	st	Z, r24
    4120:	fe 01       	movw	r30, r28
    4122:	ed 51       	subi	r30, 0x1D	; 29
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <main+0x1994>
    412e:	fe 01       	movw	r30, r28
    4130:	ed 51       	subi	r30, 0x1D	; 29
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4138:	de 01       	movw	r26, r28
    413a:	ab 51       	subi	r26, 0x1B	; 27
    413c:	bf 4f       	sbci	r27, 0xFF	; 255
    413e:	fe 01       	movw	r30, r28
    4140:	eb 51       	subi	r30, 0x1B	; 27
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	11 96       	adiw	r26, 0x01	; 1
    414c:	9c 93       	st	X, r25
    414e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4150:	fe 01       	movw	r30, r28
    4152:	eb 51       	subi	r30, 0x1B	; 27
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	d1 f6       	brne	.-76     	; 0x4112 <main+0x197c>
    415e:	28 c0       	rjmp	.+80     	; 0x41b0 <main+0x1a1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4160:	8e 01       	movw	r16, r28
    4162:	0b 51       	subi	r16, 0x1B	; 27
    4164:	1f 4f       	sbci	r17, 0xFF	; 255
    4166:	fe 01       	movw	r30, r28
    4168:	e9 51       	subi	r30, 0x19	; 25
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	60 81       	ld	r22, Z
    416e:	71 81       	ldd	r23, Z+1	; 0x01
    4170:	82 81       	ldd	r24, Z+2	; 0x02
    4172:	93 81       	ldd	r25, Z+3	; 0x03
    4174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	f8 01       	movw	r30, r16
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
    4182:	de 01       	movw	r26, r28
    4184:	af 51       	subi	r26, 0x1F	; 31
    4186:	bf 4f       	sbci	r27, 0xFF	; 255
    4188:	fe 01       	movw	r30, r28
    418a:	eb 51       	subi	r30, 0x1B	; 27
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 81       	ld	r24, Z
    4190:	91 81       	ldd	r25, Z+1	; 0x01
    4192:	11 96       	adiw	r26, 0x01	; 1
    4194:	9c 93       	st	X, r25
    4196:	8e 93       	st	-X, r24
    4198:	fe 01       	movw	r30, r28
    419a:	ef 51       	subi	r30, 0x1F	; 31
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	91 81       	ldd	r25, Z+1	; 0x01
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <main+0x1a0c>
    41a6:	fe 01       	movw	r30, r28
    41a8:	ef 51       	subi	r30, 0x1F	; 31
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
			_delay_ms(500);
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    41b0:	10 92 3a 01 	sts	0x013A, r1
    41b4:	0f c0       	rjmp	.+30     	; 0x41d4 <main+0x1a3e>
			{
				UART_sendByte(pass_1[counter]);
    41b6:	80 91 3a 01 	lds	r24, 0x013A
    41ba:	88 2f       	mov	r24, r24
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	fc 01       	movw	r30, r24
    41c0:	e0 5c       	subi	r30, 0xC0	; 192
    41c2:	fe 4f       	sbci	r31, 0xFE	; 254
    41c4:	80 81       	ld	r24, Z
    41c6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != 'e');
			_delay_ms(500);
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    41ca:	80 91 3a 01 	lds	r24, 0x013A
    41ce:	8f 5f       	subi	r24, 0xFF	; 255
    41d0:	80 93 3a 01 	sts	0x013A, r24
    41d4:	80 91 3a 01 	lds	r24, 0x013A
    41d8:	85 30       	cpi	r24, 0x05	; 5
    41da:	68 f3       	brcs	.-38     	; 0x41b6 <main+0x1a20>
			{
				UART_sendByte(pass_1[counter]);
			}
			pass_state = UART_recieveByte();
    41dc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    41e0:	80 93 3b 01 	sts	0x013B, r24
			if(pass_state == CORRECT_PASS)
    41e4:	80 91 3b 01 	lds	r24, 0x013B
    41e8:	81 30       	cpi	r24, 0x01	; 1
    41ea:	09 f0       	breq	.+2      	; 0x41ee <main+0x1a58>
    41ec:	64 c3       	rjmp	.+1736   	; 0x48b6 <main+0x2120>
			{
				update_fail = 0;
    41ee:	10 92 3e 01 	sts	0x013E, r1
				do
				{
					/* receive the password from the user*/
					UART_sendByte(PASS_LOADING);
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					LCD_clearScreen();
    41f8:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayString("Plz Enter Pass:");
    41fc:	80 e6       	ldi	r24, 0x60	; 96
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
					LCD_moveCursor(1, 0);
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_moveCursor>
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    420c:	10 92 3a 01 	sts	0x013A, r1
    4210:	c6 c0       	rjmp	.+396    	; 0x439e <main+0x1c08>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
    4212:	80 91 3a 01 	lds	r24, 0x013A
    4216:	08 2f       	mov	r16, r24
    4218:	10 e0       	ldi	r17, 0x00	; 0
    421a:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    421e:	f8 01       	movw	r30, r16
    4220:	e0 5c       	subi	r30, 0xC0	; 192
    4222:	fe 4f       	sbci	r31, 0xFE	; 254
    4224:	80 83       	st	Z, r24
						LCD_displayCharacter('*');
    4226:	8a e2       	ldi	r24, 0x2A	; 42
    4228:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    422c:	fe 01       	movw	r30, r28
    422e:	e3 52       	subi	r30, 0x23	; 35
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	aa ef       	ldi	r26, 0xFA	; 250
    4238:	b3 e4       	ldi	r27, 0x43	; 67
    423a:	80 83       	st	Z, r24
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	a2 83       	std	Z+2, r26	; 0x02
    4240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4242:	8e 01       	movw	r16, r28
    4244:	07 52       	subi	r16, 0x27	; 39
    4246:	1f 4f       	sbci	r17, 0xFF	; 255
    4248:	fe 01       	movw	r30, r28
    424a:	e3 52       	subi	r30, 0x23	; 35
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	4a ef       	ldi	r20, 0xFA	; 250
    425c:	54 e4       	ldi	r21, 0x44	; 68
    425e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	f8 01       	movw	r30, r16
    4268:	80 83       	st	Z, r24
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	a2 83       	std	Z+2, r26	; 0x02
    426e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4270:	fe 01       	movw	r30, r28
    4272:	e7 52       	subi	r30, 0x27	; 39
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	60 81       	ld	r22, Z
    4278:	71 81       	ldd	r23, Z+1	; 0x01
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e8       	ldi	r20, 0x80	; 128
    4284:	5f e3       	ldi	r21, 0x3F	; 63
    4286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    428a:	88 23       	and	r24, r24
    428c:	44 f4       	brge	.+16     	; 0x429e <main+0x1b08>
		__ticks = 1;
    428e:	fe 01       	movw	r30, r28
    4290:	e9 52       	subi	r30, 0x29	; 41
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	64 c0       	rjmp	.+200    	; 0x4366 <main+0x1bd0>
	else if (__tmp > 65535)
    429e:	fe 01       	movw	r30, r28
    42a0:	e7 52       	subi	r30, 0x27	; 39
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	3f ef       	ldi	r19, 0xFF	; 255
    42b0:	4f e7       	ldi	r20, 0x7F	; 127
    42b2:	57 e4       	ldi	r21, 0x47	; 71
    42b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b8:	18 16       	cp	r1, r24
    42ba:	0c f0       	brlt	.+2      	; 0x42be <main+0x1b28>
    42bc:	43 c0       	rjmp	.+134    	; 0x4344 <main+0x1bae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42be:	fe 01       	movw	r30, r28
    42c0:	e3 52       	subi	r30, 0x23	; 35
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	60 81       	ld	r22, Z
    42c6:	71 81       	ldd	r23, Z+1	; 0x01
    42c8:	82 81       	ldd	r24, Z+2	; 0x02
    42ca:	93 81       	ldd	r25, Z+3	; 0x03
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e2       	ldi	r20, 0x20	; 32
    42d2:	51 e4       	ldi	r21, 0x41	; 65
    42d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	8e 01       	movw	r16, r28
    42de:	09 52       	subi	r16, 0x29	; 41
    42e0:	1f 4f       	sbci	r17, 0xFF	; 255
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	f8 01       	movw	r30, r16
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	80 83       	st	Z, r24
    42f4:	1f c0       	rjmp	.+62     	; 0x4334 <main+0x1b9e>
    42f6:	fe 01       	movw	r30, r28
    42f8:	eb 52       	subi	r30, 0x2B	; 43
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	88 ec       	ldi	r24, 0xC8	; 200
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	80 83       	st	Z, r24
    4304:	fe 01       	movw	r30, r28
    4306:	eb 52       	subi	r30, 0x2B	; 43
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	80 81       	ld	r24, Z
    430c:	91 81       	ldd	r25, Z+1	; 0x01
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	f1 f7       	brne	.-4      	; 0x430e <main+0x1b78>
    4312:	fe 01       	movw	r30, r28
    4314:	eb 52       	subi	r30, 0x2B	; 43
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431c:	de 01       	movw	r26, r28
    431e:	a9 52       	subi	r26, 0x29	; 41
    4320:	bf 4f       	sbci	r27, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	e9 52       	subi	r30, 0x29	; 41
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	91 81       	ldd	r25, Z+1	; 0x01
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	11 96       	adiw	r26, 0x01	; 1
    4330:	9c 93       	st	X, r25
    4332:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4334:	fe 01       	movw	r30, r28
    4336:	e9 52       	subi	r30, 0x29	; 41
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	80 81       	ld	r24, Z
    433c:	91 81       	ldd	r25, Z+1	; 0x01
    433e:	00 97       	sbiw	r24, 0x00	; 0
    4340:	d1 f6       	brne	.-76     	; 0x42f6 <main+0x1b60>
    4342:	28 c0       	rjmp	.+80     	; 0x4394 <main+0x1bfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4344:	8e 01       	movw	r16, r28
    4346:	09 52       	subi	r16, 0x29	; 41
    4348:	1f 4f       	sbci	r17, 0xFF	; 255
    434a:	fe 01       	movw	r30, r28
    434c:	e7 52       	subi	r30, 0x27	; 39
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	f8 01       	movw	r30, r16
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
    4366:	de 01       	movw	r26, r28
    4368:	ad 52       	subi	r26, 0x2D	; 45
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e9 52       	subi	r30, 0x29	; 41
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	11 96       	adiw	r26, 0x01	; 1
    4378:	9c 93       	st	X, r25
    437a:	8e 93       	st	-X, r24
    437c:	fe 01       	movw	r30, r28
    437e:	ed 52       	subi	r30, 0x2D	; 45
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	80 81       	ld	r24, Z
    4384:	91 81       	ldd	r25, Z+1	; 0x01
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <main+0x1bf0>
    438a:	fe 01       	movw	r30, r28
    438c:	ed 52       	subi	r30, 0x2D	; 45
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	80 83       	st	Z, r24
					/* receive the password from the user*/
					UART_sendByte(PASS_LOADING);
					LCD_clearScreen();
					LCD_displayString("Plz Enter Pass:");
					LCD_moveCursor(1, 0);
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4394:	80 91 3a 01 	lds	r24, 0x013A
    4398:	8f 5f       	subi	r24, 0xFF	; 255
    439a:	80 93 3a 01 	sts	0x013A, r24
    439e:	80 91 3a 01 	lds	r24, 0x013A
    43a2:	85 30       	cpi	r24, 0x05	; 5
    43a4:	08 f4       	brcc	.+2      	; 0x43a8 <main+0x1c12>
    43a6:	35 cf       	rjmp	.-406    	; 0x4212 <main+0x1a7c>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
    43a8:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    43ac:	85 36       	cpi	r24, 0x65	; 101
    43ae:	e1 f7       	brne	.-8      	; 0x43a8 <main+0x1c12>
    43b0:	fe 01       	movw	r30, r28
    43b2:	e1 53       	subi	r30, 0x31	; 49
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	aa ef       	ldi	r26, 0xFA	; 250
    43bc:	b3 e4       	ldi	r27, 0x43	; 67
    43be:	80 83       	st	Z, r24
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	a2 83       	std	Z+2, r26	; 0x02
    43c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c6:	8e 01       	movw	r16, r28
    43c8:	05 53       	subi	r16, 0x35	; 53
    43ca:	1f 4f       	sbci	r17, 0xFF	; 255
    43cc:	fe 01       	movw	r30, r28
    43ce:	e1 53       	subi	r30, 0x31	; 49
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	60 81       	ld	r22, Z
    43d4:	71 81       	ldd	r23, Z+1	; 0x01
    43d6:	82 81       	ldd	r24, Z+2	; 0x02
    43d8:	93 81       	ldd	r25, Z+3	; 0x03
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	4a ef       	ldi	r20, 0xFA	; 250
    43e0:	54 e4       	ldi	r21, 0x44	; 68
    43e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	f8 01       	movw	r30, r16
    43ec:	80 83       	st	Z, r24
    43ee:	91 83       	std	Z+1, r25	; 0x01
    43f0:	a2 83       	std	Z+2, r26	; 0x02
    43f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43f4:	fe 01       	movw	r30, r28
    43f6:	e5 53       	subi	r30, 0x35	; 53
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	60 81       	ld	r22, Z
    43fc:	71 81       	ldd	r23, Z+1	; 0x01
    43fe:	82 81       	ldd	r24, Z+2	; 0x02
    4400:	93 81       	ldd	r25, Z+3	; 0x03
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	40 e8       	ldi	r20, 0x80	; 128
    4408:	5f e3       	ldi	r21, 0x3F	; 63
    440a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    440e:	88 23       	and	r24, r24
    4410:	44 f4       	brge	.+16     	; 0x4422 <main+0x1c8c>
		__ticks = 1;
    4412:	fe 01       	movw	r30, r28
    4414:	e7 53       	subi	r30, 0x37	; 55
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	80 83       	st	Z, r24
    4420:	64 c0       	rjmp	.+200    	; 0x44ea <main+0x1d54>
	else if (__tmp > 65535)
    4422:	fe 01       	movw	r30, r28
    4424:	e5 53       	subi	r30, 0x35	; 53
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	60 81       	ld	r22, Z
    442a:	71 81       	ldd	r23, Z+1	; 0x01
    442c:	82 81       	ldd	r24, Z+2	; 0x02
    442e:	93 81       	ldd	r25, Z+3	; 0x03
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	3f ef       	ldi	r19, 0xFF	; 255
    4434:	4f e7       	ldi	r20, 0x7F	; 127
    4436:	57 e4       	ldi	r21, 0x47	; 71
    4438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    443c:	18 16       	cp	r1, r24
    443e:	0c f0       	brlt	.+2      	; 0x4442 <main+0x1cac>
    4440:	43 c0       	rjmp	.+134    	; 0x44c8 <main+0x1d32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4442:	fe 01       	movw	r30, r28
    4444:	e1 53       	subi	r30, 0x31	; 49
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	60 81       	ld	r22, Z
    444a:	71 81       	ldd	r23, Z+1	; 0x01
    444c:	82 81       	ldd	r24, Z+2	; 0x02
    444e:	93 81       	ldd	r25, Z+3	; 0x03
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e2       	ldi	r20, 0x20	; 32
    4456:	51 e4       	ldi	r21, 0x41	; 65
    4458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	8e 01       	movw	r16, r28
    4462:	07 53       	subi	r16, 0x37	; 55
    4464:	1f 4f       	sbci	r17, 0xFF	; 255
    4466:	bc 01       	movw	r22, r24
    4468:	cd 01       	movw	r24, r26
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	f8 01       	movw	r30, r16
    4474:	91 83       	std	Z+1, r25	; 0x01
    4476:	80 83       	st	Z, r24
    4478:	1f c0       	rjmp	.+62     	; 0x44b8 <main+0x1d22>
    447a:	fe 01       	movw	r30, r28
    447c:	e9 53       	subi	r30, 0x39	; 57
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	88 ec       	ldi	r24, 0xC8	; 200
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	91 83       	std	Z+1, r25	; 0x01
    4486:	80 83       	st	Z, r24
    4488:	fe 01       	movw	r30, r28
    448a:	e9 53       	subi	r30, 0x39	; 57
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	01 97       	sbiw	r24, 0x01	; 1
    4494:	f1 f7       	brne	.-4      	; 0x4492 <main+0x1cfc>
    4496:	fe 01       	movw	r30, r28
    4498:	e9 53       	subi	r30, 0x39	; 57
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	91 83       	std	Z+1, r25	; 0x01
    449e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a0:	de 01       	movw	r26, r28
    44a2:	a7 53       	subi	r26, 0x37	; 55
    44a4:	bf 4f       	sbci	r27, 0xFF	; 255
    44a6:	fe 01       	movw	r30, r28
    44a8:	e7 53       	subi	r30, 0x37	; 55
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	80 81       	ld	r24, Z
    44ae:	91 81       	ldd	r25, Z+1	; 0x01
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	11 96       	adiw	r26, 0x01	; 1
    44b4:	9c 93       	st	X, r25
    44b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b8:	fe 01       	movw	r30, r28
    44ba:	e7 53       	subi	r30, 0x37	; 55
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	80 81       	ld	r24, Z
    44c0:	91 81       	ldd	r25, Z+1	; 0x01
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	d1 f6       	brne	.-76     	; 0x447a <main+0x1ce4>
    44c6:	27 c0       	rjmp	.+78     	; 0x4516 <main+0x1d80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c8:	8e 01       	movw	r16, r28
    44ca:	07 53       	subi	r16, 0x37	; 55
    44cc:	1f 4f       	sbci	r17, 0xFF	; 255
    44ce:	fe 01       	movw	r30, r28
    44d0:	e5 53       	subi	r30, 0x35	; 53
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	60 81       	ld	r22, Z
    44d6:	71 81       	ldd	r23, Z+1	; 0x01
    44d8:	82 81       	ldd	r24, Z+2	; 0x02
    44da:	93 81       	ldd	r25, Z+3	; 0x03
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	f8 01       	movw	r30, r16
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	80 83       	st	Z, r24
    44ea:	de 01       	movw	r26, r28
    44ec:	ab 53       	subi	r26, 0x3B	; 59
    44ee:	bf 4f       	sbci	r27, 0xFF	; 255
    44f0:	fe 01       	movw	r30, r28
    44f2:	e7 53       	subi	r30, 0x37	; 55
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	80 81       	ld	r24, Z
    44f8:	91 81       	ldd	r25, Z+1	; 0x01
    44fa:	8d 93       	st	X+, r24
    44fc:	9c 93       	st	X, r25
    44fe:	fe 01       	movw	r30, r28
    4500:	eb 53       	subi	r30, 0x3B	; 59
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	80 81       	ld	r24, Z
    4506:	91 81       	ldd	r25, Z+1	; 0x01
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	f1 f7       	brne	.-4      	; 0x4508 <main+0x1d72>
    450c:	fe 01       	movw	r30, r28
    450e:	eb 53       	subi	r30, 0x3B	; 59
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	91 83       	std	Z+1, r25	; 0x01
    4514:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_clearScreen();
    4516:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayString("Plz re-enter the");
    451a:	80 e7       	ldi	r24, 0x70	; 112
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "same pass: ");
    4522:	21 e8       	ldi	r18, 0x81	; 129
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	60 e0       	ldi	r22, 0x00	; 0
    452a:	a9 01       	movw	r20, r18
    452c:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4530:	10 92 3a 01 	sts	0x013A, r1
    4534:	c6 c0       	rjmp	.+396    	; 0x46c2 <main+0x1f2c>
					{
						pass_2[counter] = KEYPAD_getPressedKey();
    4536:	80 91 3a 01 	lds	r24, 0x013A
    453a:	08 2f       	mov	r16, r24
    453c:	10 e0       	ldi	r17, 0x00	; 0
    453e:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4542:	f8 01       	movw	r30, r16
    4544:	eb 5b       	subi	r30, 0xBB	; 187
    4546:	fe 4f       	sbci	r31, 0xFE	; 254
    4548:	80 83       	st	Z, r24
						LCD_displayCharacter('*');
    454a:	8a e2       	ldi	r24, 0x2A	; 42
    454c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    4550:	fe 01       	movw	r30, r28
    4552:	ef 53       	subi	r30, 0x3F	; 63
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	aa ef       	ldi	r26, 0xFA	; 250
    455c:	b3 e4       	ldi	r27, 0x43	; 67
    455e:	80 83       	st	Z, r24
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	a2 83       	std	Z+2, r26	; 0x02
    4564:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4566:	8e 01       	movw	r16, r28
    4568:	03 54       	subi	r16, 0x43	; 67
    456a:	1f 4f       	sbci	r17, 0xFF	; 255
    456c:	fe 01       	movw	r30, r28
    456e:	ef 53       	subi	r30, 0x3F	; 63
    4570:	ff 4f       	sbci	r31, 0xFF	; 255
    4572:	60 81       	ld	r22, Z
    4574:	71 81       	ldd	r23, Z+1	; 0x01
    4576:	82 81       	ldd	r24, Z+2	; 0x02
    4578:	93 81       	ldd	r25, Z+3	; 0x03
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	4a ef       	ldi	r20, 0xFA	; 250
    4580:	54 e4       	ldi	r21, 0x44	; 68
    4582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	f8 01       	movw	r30, r16
    458c:	80 83       	st	Z, r24
    458e:	91 83       	std	Z+1, r25	; 0x01
    4590:	a2 83       	std	Z+2, r26	; 0x02
    4592:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4594:	fe 01       	movw	r30, r28
    4596:	e3 54       	subi	r30, 0x43	; 67
    4598:	ff 4f       	sbci	r31, 0xFF	; 255
    459a:	60 81       	ld	r22, Z
    459c:	71 81       	ldd	r23, Z+1	; 0x01
    459e:	82 81       	ldd	r24, Z+2	; 0x02
    45a0:	93 81       	ldd	r25, Z+3	; 0x03
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	40 e8       	ldi	r20, 0x80	; 128
    45a8:	5f e3       	ldi	r21, 0x3F	; 63
    45aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ae:	88 23       	and	r24, r24
    45b0:	44 f4       	brge	.+16     	; 0x45c2 <main+0x1e2c>
		__ticks = 1;
    45b2:	fe 01       	movw	r30, r28
    45b4:	e5 54       	subi	r30, 0x45	; 69
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	80 83       	st	Z, r24
    45c0:	64 c0       	rjmp	.+200    	; 0x468a <main+0x1ef4>
	else if (__tmp > 65535)
    45c2:	fe 01       	movw	r30, r28
    45c4:	e3 54       	subi	r30, 0x43	; 67
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	60 81       	ld	r22, Z
    45ca:	71 81       	ldd	r23, Z+1	; 0x01
    45cc:	82 81       	ldd	r24, Z+2	; 0x02
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	3f ef       	ldi	r19, 0xFF	; 255
    45d4:	4f e7       	ldi	r20, 0x7F	; 127
    45d6:	57 e4       	ldi	r21, 0x47	; 71
    45d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45dc:	18 16       	cp	r1, r24
    45de:	0c f0       	brlt	.+2      	; 0x45e2 <main+0x1e4c>
    45e0:	43 c0       	rjmp	.+134    	; 0x4668 <main+0x1ed2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e2:	fe 01       	movw	r30, r28
    45e4:	ef 53       	subi	r30, 0x3F	; 63
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	60 81       	ld	r22, Z
    45ea:	71 81       	ldd	r23, Z+1	; 0x01
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	93 81       	ldd	r25, Z+3	; 0x03
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e2       	ldi	r20, 0x20	; 32
    45f6:	51 e4       	ldi	r21, 0x41	; 65
    45f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	8e 01       	movw	r16, r28
    4602:	05 54       	subi	r16, 0x45	; 69
    4604:	1f 4f       	sbci	r17, 0xFF	; 255
    4606:	bc 01       	movw	r22, r24
    4608:	cd 01       	movw	r24, r26
    460a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	f8 01       	movw	r30, r16
    4614:	91 83       	std	Z+1, r25	; 0x01
    4616:	80 83       	st	Z, r24
    4618:	1f c0       	rjmp	.+62     	; 0x4658 <main+0x1ec2>
    461a:	fe 01       	movw	r30, r28
    461c:	e7 54       	subi	r30, 0x47	; 71
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	88 ec       	ldi	r24, 0xC8	; 200
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	91 83       	std	Z+1, r25	; 0x01
    4626:	80 83       	st	Z, r24
    4628:	fe 01       	movw	r30, r28
    462a:	e7 54       	subi	r30, 0x47	; 71
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	80 81       	ld	r24, Z
    4630:	91 81       	ldd	r25, Z+1	; 0x01
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <main+0x1e9c>
    4636:	fe 01       	movw	r30, r28
    4638:	e7 54       	subi	r30, 0x47	; 71
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4640:	de 01       	movw	r26, r28
    4642:	a5 54       	subi	r26, 0x45	; 69
    4644:	bf 4f       	sbci	r27, 0xFF	; 255
    4646:	fe 01       	movw	r30, r28
    4648:	e5 54       	subi	r30, 0x45	; 69
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	11 96       	adiw	r26, 0x01	; 1
    4654:	9c 93       	st	X, r25
    4656:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4658:	fe 01       	movw	r30, r28
    465a:	e5 54       	subi	r30, 0x45	; 69
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	80 81       	ld	r24, Z
    4660:	91 81       	ldd	r25, Z+1	; 0x01
    4662:	00 97       	sbiw	r24, 0x00	; 0
    4664:	d1 f6       	brne	.-76     	; 0x461a <main+0x1e84>
    4666:	28 c0       	rjmp	.+80     	; 0x46b8 <main+0x1f22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4668:	8e 01       	movw	r16, r28
    466a:	05 54       	subi	r16, 0x45	; 69
    466c:	1f 4f       	sbci	r17, 0xFF	; 255
    466e:	fe 01       	movw	r30, r28
    4670:	e3 54       	subi	r30, 0x43	; 67
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	60 81       	ld	r22, Z
    4676:	71 81       	ldd	r23, Z+1	; 0x01
    4678:	82 81       	ldd	r24, Z+2	; 0x02
    467a:	93 81       	ldd	r25, Z+3	; 0x03
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	f8 01       	movw	r30, r16
    4686:	91 83       	std	Z+1, r25	; 0x01
    4688:	80 83       	st	Z, r24
    468a:	de 01       	movw	r26, r28
    468c:	a9 54       	subi	r26, 0x49	; 73
    468e:	bf 4f       	sbci	r27, 0xFF	; 255
    4690:	fe 01       	movw	r30, r28
    4692:	e5 54       	subi	r30, 0x45	; 69
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	11 96       	adiw	r26, 0x01	; 1
    469c:	9c 93       	st	X, r25
    469e:	8e 93       	st	-X, r24
    46a0:	fe 01       	movw	r30, r28
    46a2:	e9 54       	subi	r30, 0x49	; 73
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <main+0x1f14>
    46ae:	fe 01       	movw	r30, r28
    46b0:	e9 54       	subi	r30, 0x49	; 73
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
					while(KEYPAD_getPressedKey() != 'e');
					_delay_ms(500);
					LCD_clearScreen();
					LCD_displayString("Plz re-enter the");
					LCD_displayStringRowColumn(1, 0, "same pass: ");
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    46b8:	80 91 3a 01 	lds	r24, 0x013A
    46bc:	8f 5f       	subi	r24, 0xFF	; 255
    46be:	80 93 3a 01 	sts	0x013A, r24
    46c2:	80 91 3a 01 	lds	r24, 0x013A
    46c6:	85 30       	cpi	r24, 0x05	; 5
    46c8:	08 f4       	brcc	.+2      	; 0x46cc <main+0x1f36>
    46ca:	35 cf       	rjmp	.-406    	; 0x4536 <main+0x1da0>
					{
						pass_2[counter] = KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
    46cc:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    46d0:	85 36       	cpi	r24, 0x65	; 101
    46d2:	e1 f7       	brne	.-8      	; 0x46cc <main+0x1f36>
    46d4:	fe 01       	movw	r30, r28
    46d6:	ed 54       	subi	r30, 0x4D	; 77
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	aa ef       	ldi	r26, 0xFA	; 250
    46e0:	b3 e4       	ldi	r27, 0x43	; 67
    46e2:	80 83       	st	Z, r24
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	a2 83       	std	Z+2, r26	; 0x02
    46e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ea:	8e 01       	movw	r16, r28
    46ec:	01 55       	subi	r16, 0x51	; 81
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	ed 54       	subi	r30, 0x4D	; 77
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	4a ef       	ldi	r20, 0xFA	; 250
    4704:	54 e4       	ldi	r21, 0x44	; 68
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	f8 01       	movw	r30, r16
    4710:	80 83       	st	Z, r24
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	a2 83       	std	Z+2, r26	; 0x02
    4716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4718:	fe 01       	movw	r30, r28
    471a:	e1 55       	subi	r30, 0x51	; 81
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e8       	ldi	r20, 0x80	; 128
    472c:	5f e3       	ldi	r21, 0x3F	; 63
    472e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4732:	88 23       	and	r24, r24
    4734:	44 f4       	brge	.+16     	; 0x4746 <main+0x1fb0>
		__ticks = 1;
    4736:	fe 01       	movw	r30, r28
    4738:	e3 55       	subi	r30, 0x53	; 83
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	91 83       	std	Z+1, r25	; 0x01
    4742:	80 83       	st	Z, r24
    4744:	64 c0       	rjmp	.+200    	; 0x480e <main+0x2078>
	else if (__tmp > 65535)
    4746:	fe 01       	movw	r30, r28
    4748:	e1 55       	subi	r30, 0x51	; 81
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	4f e7       	ldi	r20, 0x7F	; 127
    475a:	57 e4       	ldi	r21, 0x47	; 71
    475c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4760:	18 16       	cp	r1, r24
    4762:	0c f0       	brlt	.+2      	; 0x4766 <main+0x1fd0>
    4764:	43 c0       	rjmp	.+134    	; 0x47ec <main+0x2056>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4766:	fe 01       	movw	r30, r28
    4768:	ed 54       	subi	r30, 0x4D	; 77
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e2       	ldi	r20, 0x20	; 32
    477a:	51 e4       	ldi	r21, 0x41	; 65
    477c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4780:	dc 01       	movw	r26, r24
    4782:	cb 01       	movw	r24, r22
    4784:	8e 01       	movw	r16, r28
    4786:	03 55       	subi	r16, 0x53	; 83
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	f8 01       	movw	r30, r16
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
    479c:	1f c0       	rjmp	.+62     	; 0x47dc <main+0x2046>
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 55       	subi	r30, 0x55	; 85
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	88 ec       	ldi	r24, 0xC8	; 200
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
    47ac:	fe 01       	movw	r30, r28
    47ae:	e5 55       	subi	r30, 0x55	; 85
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <main+0x2020>
    47ba:	fe 01       	movw	r30, r28
    47bc:	e5 55       	subi	r30, 0x55	; 85
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c4:	de 01       	movw	r26, r28
    47c6:	a3 55       	subi	r26, 0x53	; 83
    47c8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ca:	fe 01       	movw	r30, r28
    47cc:	e3 55       	subi	r30, 0x53	; 83
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	9c 93       	st	X, r25
    47da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47dc:	fe 01       	movw	r30, r28
    47de:	e3 55       	subi	r30, 0x53	; 83
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	d1 f6       	brne	.-76     	; 0x479e <main+0x2008>
    47ea:	28 c0       	rjmp	.+80     	; 0x483c <main+0x20a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ec:	8e 01       	movw	r16, r28
    47ee:	03 55       	subi	r16, 0x53	; 83
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e1 55       	subi	r30, 0x51	; 81
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	f8 01       	movw	r30, r16
    480a:	91 83       	std	Z+1, r25	; 0x01
    480c:	80 83       	st	Z, r24
    480e:	de 01       	movw	r26, r28
    4810:	a7 55       	subi	r26, 0x57	; 87
    4812:	bf 4f       	sbci	r27, 0xFF	; 255
    4814:	fe 01       	movw	r30, r28
    4816:	e3 55       	subi	r30, 0x53	; 83
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	80 81       	ld	r24, Z
    481c:	91 81       	ldd	r25, Z+1	; 0x01
    481e:	11 96       	adiw	r26, 0x01	; 1
    4820:	9c 93       	st	X, r25
    4822:	8e 93       	st	-X, r24
    4824:	fe 01       	movw	r30, r28
    4826:	e7 55       	subi	r30, 0x57	; 87
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	91 81       	ldd	r25, Z+1	; 0x01
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	f1 f7       	brne	.-4      	; 0x482e <main+0x2098>
    4832:	fe 01       	movw	r30, r28
    4834:	e7 55       	subi	r30, 0x57	; 87
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	91 83       	std	Z+1, r25	; 0x01
    483a:	80 83       	st	Z, r24
					_delay_ms(500);
					/* send the two passwords to the control ecu */
					for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    483c:	10 92 3a 01 	sts	0x013A, r1
    4840:	0f c0       	rjmp	.+30     	; 0x4860 <main+0x20ca>
					{
						UART_sendByte(pass_1[counter]);
    4842:	80 91 3a 01 	lds	r24, 0x013A
    4846:	88 2f       	mov	r24, r24
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	fc 01       	movw	r30, r24
    484c:	e0 5c       	subi	r30, 0xC0	; 192
    484e:	fe 4f       	sbci	r31, 0xFE	; 254
    4850:	80 81       	ld	r24, Z
    4852:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
					_delay_ms(500);
					/* send the two passwords to the control ecu */
					for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    4856:	80 91 3a 01 	lds	r24, 0x013A
    485a:	8f 5f       	subi	r24, 0xFF	; 255
    485c:	80 93 3a 01 	sts	0x013A, r24
    4860:	80 91 3a 01 	lds	r24, 0x013A
    4864:	85 30       	cpi	r24, 0x05	; 5
    4866:	68 f3       	brcs	.-38     	; 0x4842 <main+0x20ac>
					{
						UART_sendByte(pass_1[counter]);
					}
					for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    4868:	10 92 3a 01 	sts	0x013A, r1
    486c:	0f c0       	rjmp	.+30     	; 0x488c <main+0x20f6>
					{
						UART_sendByte(pass_2[counter]);
    486e:	80 91 3a 01 	lds	r24, 0x013A
    4872:	88 2f       	mov	r24, r24
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	fc 01       	movw	r30, r24
    4878:	eb 5b       	subi	r30, 0xBB	; 187
    487a:	fe 4f       	sbci	r31, 0xFE	; 254
    487c:	80 81       	ld	r24, Z
    487e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					/* send the two passwords to the control ecu */
					for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
					{
						UART_sendByte(pass_1[counter]);
					}
					for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    4882:	80 91 3a 01 	lds	r24, 0x013A
    4886:	8f 5f       	subi	r24, 0xFF	; 255
    4888:	80 93 3a 01 	sts	0x013A, r24
    488c:	80 91 3a 01 	lds	r24, 0x013A
    4890:	85 30       	cpi	r24, 0x05	; 5
    4892:	68 f3       	brcs	.-38     	; 0x486e <main+0x20d8>
					{
						UART_sendByte(pass_2[counter]);
					}
					pass_state = UART_recieveByte();
    4894:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    4898:	80 93 3b 01 	sts	0x013B, r24
					if(pass_state == CORRECT_PASS)
    489c:	80 91 3b 01 	lds	r24, 0x013B
    48a0:	81 30       	cpi	r24, 0x01	; 1
    48a2:	11 f4       	brne	.+4      	; 0x48a8 <main+0x2112>
					{
						LCD_clearScreen();
    48a4:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					}
					}while(pass_state != CORRECT_PASS);
    48a8:	80 91 3b 01 	lds	r24, 0x013B
    48ac:	81 30       	cpi	r24, 0x01	; 1
    48ae:	09 f0       	breq	.+2      	; 0x48b2 <main+0x211c>
    48b0:	a0 cc       	rjmp	.-1728   	; 0x41f2 <main+0x1a5c>
    48b2:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
			}
			else if(pass_state == WRONG_PASS)
    48b6:	80 91 3b 01 	lds	r24, 0x013B
    48ba:	88 23       	and	r24, r24
    48bc:	11 f0       	breq	.+4      	; 0x48c2 <main+0x212c>
    48be:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
			{
				++update_fail;
    48c2:	80 91 3e 01 	lds	r24, 0x013E
    48c6:	8f 5f       	subi	r24, 0xFF	; 255
    48c8:	80 93 3e 01 	sts	0x013E, r24
				if(update_fail == 3)
    48cc:	80 91 3e 01 	lds	r24, 0x013E
    48d0:	83 30       	cpi	r24, 0x03	; 3
    48d2:	e9 f4       	brne	.+58     	; 0x490e <main+0x2178>
				{
					UART_sendByte(ALARM_ON);
    48d4:	84 e0       	ldi	r24, 0x04	; 4
    48d6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					LCD_clearScreen();
    48da:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    48de:	21 e0       	ldi	r18, 0x01	; 1
    48e0:	31 e0       	ldi	r19, 0x01	; 1
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	a9 01       	movw	r20, r18
    48e8:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    48ec:	2f e0       	ldi	r18, 0x0F	; 15
    48ee:	31 e0       	ldi	r19, 0x01	; 1
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	60 e0       	ldi	r22, 0x00	; 0
    48f4:	a9 01       	movw	r20, r18
    48f6:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					seconds = 0;
    48fa:	10 92 4a 01 	sts	0x014A, r1
					while(seconds < 60);
    48fe:	80 91 4a 01 	lds	r24, 0x014A
    4902:	8c 33       	cpi	r24, 0x3C	; 60
    4904:	e0 f3       	brcs	.-8      	; 0x48fe <main+0x2168>
					update_fail = 0;
    4906:	10 92 3e 01 	sts	0x013E, r1
    490a:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
				}
				else
				{
					UART_sendByte(PASS_UPDATE);
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
					LCD_clearScreen();
    4914:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
					LCD_displayString("Plz enter old");
    4918:	8b ea       	ldi	r24, 0xAB	; 171
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "pass: ");
    4920:	29 eb       	ldi	r18, 0xB9	; 185
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	a9 01       	movw	r20, r18
    492a:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    492e:	10 92 3a 01 	sts	0x013A, r1
    4932:	c6 c0       	rjmp	.+396    	; 0x4ac0 <main+0x232a>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
    4934:	80 91 3a 01 	lds	r24, 0x013A
    4938:	08 2f       	mov	r16, r24
    493a:	10 e0       	ldi	r17, 0x00	; 0
    493c:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4940:	f8 01       	movw	r30, r16
    4942:	e0 5c       	subi	r30, 0xC0	; 192
    4944:	fe 4f       	sbci	r31, 0xFE	; 254
    4946:	80 83       	st	Z, r24
						LCD_displayCharacter('*');
    4948:	8a e2       	ldi	r24, 0x2A	; 42
    494a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    494e:	fe 01       	movw	r30, r28
    4950:	eb 55       	subi	r30, 0x5B	; 91
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	aa ef       	ldi	r26, 0xFA	; 250
    495a:	b3 e4       	ldi	r27, 0x43	; 67
    495c:	80 83       	st	Z, r24
    495e:	91 83       	std	Z+1, r25	; 0x01
    4960:	a2 83       	std	Z+2, r26	; 0x02
    4962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4964:	8e 01       	movw	r16, r28
    4966:	0f 55       	subi	r16, 0x5F	; 95
    4968:	1f 4f       	sbci	r17, 0xFF	; 255
    496a:	fe 01       	movw	r30, r28
    496c:	eb 55       	subi	r30, 0x5B	; 91
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	60 81       	ld	r22, Z
    4972:	71 81       	ldd	r23, Z+1	; 0x01
    4974:	82 81       	ldd	r24, Z+2	; 0x02
    4976:	93 81       	ldd	r25, Z+3	; 0x03
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	4a ef       	ldi	r20, 0xFA	; 250
    497e:	54 e4       	ldi	r21, 0x44	; 68
    4980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	f8 01       	movw	r30, r16
    498a:	80 83       	st	Z, r24
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	a2 83       	std	Z+2, r26	; 0x02
    4990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4992:	fe 01       	movw	r30, r28
    4994:	ef 55       	subi	r30, 0x5F	; 95
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	60 81       	ld	r22, Z
    499a:	71 81       	ldd	r23, Z+1	; 0x01
    499c:	82 81       	ldd	r24, Z+2	; 0x02
    499e:	93 81       	ldd	r25, Z+3	; 0x03
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	40 e8       	ldi	r20, 0x80	; 128
    49a6:	5f e3       	ldi	r21, 0x3F	; 63
    49a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49ac:	88 23       	and	r24, r24
    49ae:	44 f4       	brge	.+16     	; 0x49c0 <main+0x222a>
		__ticks = 1;
    49b0:	fe 01       	movw	r30, r28
    49b2:	e1 56       	subi	r30, 0x61	; 97
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24
    49be:	64 c0       	rjmp	.+200    	; 0x4a88 <main+0x22f2>
	else if (__tmp > 65535)
    49c0:	fe 01       	movw	r30, r28
    49c2:	ef 55       	subi	r30, 0x5F	; 95
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	60 81       	ld	r22, Z
    49c8:	71 81       	ldd	r23, Z+1	; 0x01
    49ca:	82 81       	ldd	r24, Z+2	; 0x02
    49cc:	93 81       	ldd	r25, Z+3	; 0x03
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	3f ef       	ldi	r19, 0xFF	; 255
    49d2:	4f e7       	ldi	r20, 0x7F	; 127
    49d4:	57 e4       	ldi	r21, 0x47	; 71
    49d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49da:	18 16       	cp	r1, r24
    49dc:	0c f0       	brlt	.+2      	; 0x49e0 <main+0x224a>
    49de:	43 c0       	rjmp	.+134    	; 0x4a66 <main+0x22d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e0:	fe 01       	movw	r30, r28
    49e2:	eb 55       	subi	r30, 0x5B	; 91
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e2       	ldi	r20, 0x20	; 32
    49f4:	51 e4       	ldi	r21, 0x41	; 65
    49f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	8e 01       	movw	r16, r28
    4a00:	01 56       	subi	r16, 0x61	; 97
    4a02:	1f 4f       	sbci	r17, 0xFF	; 255
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	f8 01       	movw	r30, r16
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
    4a16:	1f c0       	rjmp	.+62     	; 0x4a56 <main+0x22c0>
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e3 56       	subi	r30, 0x63	; 99
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	88 ec       	ldi	r24, 0xC8	; 200
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
    4a26:	fe 01       	movw	r30, r28
    4a28:	e3 56       	subi	r30, 0x63	; 99
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	80 81       	ld	r24, Z
    4a2e:	91 81       	ldd	r25, Z+1	; 0x01
    4a30:	01 97       	sbiw	r24, 0x01	; 1
    4a32:	f1 f7       	brne	.-4      	; 0x4a30 <main+0x229a>
    4a34:	fe 01       	movw	r30, r28
    4a36:	e3 56       	subi	r30, 0x63	; 99
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	91 83       	std	Z+1, r25	; 0x01
    4a3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3e:	de 01       	movw	r26, r28
    4a40:	a1 56       	subi	r26, 0x61	; 97
    4a42:	bf 4f       	sbci	r27, 0xFF	; 255
    4a44:	fe 01       	movw	r30, r28
    4a46:	e1 56       	subi	r30, 0x61	; 97
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	80 81       	ld	r24, Z
    4a4c:	91 81       	ldd	r25, Z+1	; 0x01
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	11 96       	adiw	r26, 0x01	; 1
    4a52:	9c 93       	st	X, r25
    4a54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a56:	fe 01       	movw	r30, r28
    4a58:	e1 56       	subi	r30, 0x61	; 97
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	80 81       	ld	r24, Z
    4a5e:	91 81       	ldd	r25, Z+1	; 0x01
    4a60:	00 97       	sbiw	r24, 0x00	; 0
    4a62:	d1 f6       	brne	.-76     	; 0x4a18 <main+0x2282>
    4a64:	28 c0       	rjmp	.+80     	; 0x4ab6 <main+0x2320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a66:	8e 01       	movw	r16, r28
    4a68:	01 56       	subi	r16, 0x61	; 97
    4a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	ef 55       	subi	r30, 0x5F	; 95
    4a70:	ff 4f       	sbci	r31, 0xFF	; 255
    4a72:	60 81       	ld	r22, Z
    4a74:	71 81       	ldd	r23, Z+1	; 0x01
    4a76:	82 81       	ldd	r24, Z+2	; 0x02
    4a78:	93 81       	ldd	r25, Z+3	; 0x03
    4a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	f8 01       	movw	r30, r16
    4a84:	91 83       	std	Z+1, r25	; 0x01
    4a86:	80 83       	st	Z, r24
    4a88:	de 01       	movw	r26, r28
    4a8a:	a5 56       	subi	r26, 0x65	; 101
    4a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e1 56       	subi	r30, 0x61	; 97
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	11 96       	adiw	r26, 0x01	; 1
    4a9a:	9c 93       	st	X, r25
    4a9c:	8e 93       	st	-X, r24
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e5 56       	subi	r30, 0x65	; 101
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <main+0x2312>
    4aac:	fe 01       	movw	r30, r28
    4aae:	e5 56       	subi	r30, 0x65	; 101
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
				{
					UART_sendByte(PASS_UPDATE);
					LCD_clearScreen();
					LCD_displayString("Plz enter old");
					LCD_displayStringRowColumn(1, 0, "pass: ");
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4ab6:	80 91 3a 01 	lds	r24, 0x013A
    4aba:	8f 5f       	subi	r24, 0xFF	; 255
    4abc:	80 93 3a 01 	sts	0x013A, r24
    4ac0:	80 91 3a 01 	lds	r24, 0x013A
    4ac4:	85 30       	cpi	r24, 0x05	; 5
    4ac6:	08 f4       	brcc	.+2      	; 0x4aca <main+0x2334>
    4ac8:	35 cf       	rjmp	.-406    	; 0x4934 <main+0x219e>
					{
						pass_1[counter] = KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
    4aca:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4ace:	85 36       	cpi	r24, 0x65	; 101
    4ad0:	e1 f7       	brne	.-8      	; 0x4aca <main+0x2334>
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	e9 56       	subi	r30, 0x69	; 105
    4ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	aa ef       	ldi	r26, 0xFA	; 250
    4ade:	b3 e4       	ldi	r27, 0x43	; 67
    4ae0:	80 83       	st	Z, r24
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	a2 83       	std	Z+2, r26	; 0x02
    4ae6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae8:	8e 01       	movw	r16, r28
    4aea:	0d 56       	subi	r16, 0x6D	; 109
    4aec:	1f 4f       	sbci	r17, 0xFF	; 255
    4aee:	fe 01       	movw	r30, r28
    4af0:	e9 56       	subi	r30, 0x69	; 105
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	4a ef       	ldi	r20, 0xFA	; 250
    4b02:	54 e4       	ldi	r21, 0x44	; 68
    4b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	f8 01       	movw	r30, r16
    4b0e:	80 83       	st	Z, r24
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	a2 83       	std	Z+2, r26	; 0x02
    4b14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b16:	fe 01       	movw	r30, r28
    4b18:	ed 56       	subi	r30, 0x6D	; 109
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	60 81       	ld	r22, Z
    4b1e:	71 81       	ldd	r23, Z+1	; 0x01
    4b20:	82 81       	ldd	r24, Z+2	; 0x02
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e8       	ldi	r20, 0x80	; 128
    4b2a:	5f e3       	ldi	r21, 0x3F	; 63
    4b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b30:	88 23       	and	r24, r24
    4b32:	44 f4       	brge	.+16     	; 0x4b44 <main+0x23ae>
		__ticks = 1;
    4b34:	fe 01       	movw	r30, r28
    4b36:	ef 56       	subi	r30, 0x6F	; 111
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	80 83       	st	Z, r24
    4b42:	64 c0       	rjmp	.+200    	; 0x4c0c <main+0x2476>
	else if (__tmp > 65535)
    4b44:	fe 01       	movw	r30, r28
    4b46:	ed 56       	subi	r30, 0x6D	; 109
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	60 81       	ld	r22, Z
    4b4c:	71 81       	ldd	r23, Z+1	; 0x01
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	3f ef       	ldi	r19, 0xFF	; 255
    4b56:	4f e7       	ldi	r20, 0x7F	; 127
    4b58:	57 e4       	ldi	r21, 0x47	; 71
    4b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b5e:	18 16       	cp	r1, r24
    4b60:	0c f0       	brlt	.+2      	; 0x4b64 <main+0x23ce>
    4b62:	43 c0       	rjmp	.+134    	; 0x4bea <main+0x2454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b64:	fe 01       	movw	r30, r28
    4b66:	e9 56       	subi	r30, 0x69	; 105
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	60 81       	ld	r22, Z
    4b6c:	71 81       	ldd	r23, Z+1	; 0x01
    4b6e:	82 81       	ldd	r24, Z+2	; 0x02
    4b70:	93 81       	ldd	r25, Z+3	; 0x03
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	40 e2       	ldi	r20, 0x20	; 32
    4b78:	51 e4       	ldi	r21, 0x41	; 65
    4b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	8e 01       	movw	r16, r28
    4b84:	0f 56       	subi	r16, 0x6F	; 111
    4b86:	1f 4f       	sbci	r17, 0xFF	; 255
    4b88:	bc 01       	movw	r22, r24
    4b8a:	cd 01       	movw	r24, r26
    4b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	f8 01       	movw	r30, r16
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
    4b9a:	1f c0       	rjmp	.+62     	; 0x4bda <main+0x2444>
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e1 57       	subi	r30, 0x71	; 113
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	88 ec       	ldi	r24, 0xC8	; 200
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	91 83       	std	Z+1, r25	; 0x01
    4ba8:	80 83       	st	Z, r24
    4baa:	fe 01       	movw	r30, r28
    4bac:	e1 57       	subi	r30, 0x71	; 113
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	80 81       	ld	r24, Z
    4bb2:	91 81       	ldd	r25, Z+1	; 0x01
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <main+0x241e>
    4bb8:	fe 01       	movw	r30, r28
    4bba:	e1 57       	subi	r30, 0x71	; 113
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	91 83       	std	Z+1, r25	; 0x01
    4bc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc2:	de 01       	movw	r26, r28
    4bc4:	af 56       	subi	r26, 0x6F	; 111
    4bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc8:	fe 01       	movw	r30, r28
    4bca:	ef 56       	subi	r30, 0x6F	; 111
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 81       	ld	r24, Z
    4bd0:	91 81       	ldd	r25, Z+1	; 0x01
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	11 96       	adiw	r26, 0x01	; 1
    4bd6:	9c 93       	st	X, r25
    4bd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bda:	fe 01       	movw	r30, r28
    4bdc:	ef 56       	subi	r30, 0x6F	; 111
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	80 81       	ld	r24, Z
    4be2:	91 81       	ldd	r25, Z+1	; 0x01
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	d1 f6       	brne	.-76     	; 0x4b9c <main+0x2406>
    4be8:	28 c0       	rjmp	.+80     	; 0x4c3a <main+0x24a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bea:	8e 01       	movw	r16, r28
    4bec:	0f 56       	subi	r16, 0x6F	; 111
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	ed 56       	subi	r30, 0x6D	; 109
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	60 81       	ld	r22, Z
    4bf8:	71 81       	ldd	r23, Z+1	; 0x01
    4bfa:	82 81       	ldd	r24, Z+2	; 0x02
    4bfc:	93 81       	ldd	r25, Z+3	; 0x03
    4bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	f8 01       	movw	r30, r16
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	80 83       	st	Z, r24
    4c0c:	de 01       	movw	r26, r28
    4c0e:	a3 57       	subi	r26, 0x73	; 115
    4c10:	bf 4f       	sbci	r27, 0xFF	; 255
    4c12:	fe 01       	movw	r30, r28
    4c14:	ef 56       	subi	r30, 0x6F	; 111
    4c16:	ff 4f       	sbci	r31, 0xFF	; 255
    4c18:	80 81       	ld	r24, Z
    4c1a:	91 81       	ldd	r25, Z+1	; 0x01
    4c1c:	11 96       	adiw	r26, 0x01	; 1
    4c1e:	9c 93       	st	X, r25
    4c20:	8e 93       	st	-X, r24
    4c22:	fe 01       	movw	r30, r28
    4c24:	e3 57       	subi	r30, 0x73	; 115
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <main+0x2496>
    4c30:	fe 01       	movw	r30, r28
    4c32:	e3 57       	subi	r30, 0x73	; 115
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	80 83       	st	Z, r24
					_delay_ms(500);
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4c3a:	10 92 3a 01 	sts	0x013A, r1
    4c3e:	0f c0       	rjmp	.+30     	; 0x4c5e <main+0x24c8>
					{
						UART_sendByte(pass_1[counter]);
    4c40:	80 91 3a 01 	lds	r24, 0x013A
    4c44:	88 2f       	mov	r24, r24
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	fc 01       	movw	r30, r24
    4c4a:	e0 5c       	subi	r30, 0xC0	; 192
    4c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4e:	80 81       	ld	r24, Z
    4c50:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
						LCD_displayCharacter('*');
						_delay_ms(500);
					}
					while(KEYPAD_getPressedKey() != 'e');
					_delay_ms(500);
					for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4c54:	80 91 3a 01 	lds	r24, 0x013A
    4c58:	8f 5f       	subi	r24, 0xFF	; 255
    4c5a:	80 93 3a 01 	sts	0x013A, r24
    4c5e:	80 91 3a 01 	lds	r24, 0x013A
    4c62:	85 30       	cpi	r24, 0x05	; 5
    4c64:	68 f3       	brcs	.-38     	; 0x4c40 <main+0x24aa>
					{
						UART_sendByte(pass_1[counter]);
					}
					pass_state = UART_recieveByte();
    4c66:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    4c6a:	80 93 3b 01 	sts	0x013B, r24
					if(pass_state == CORRECT_PASS)
    4c6e:	80 91 3b 01 	lds	r24, 0x013B
    4c72:	81 30       	cpi	r24, 0x01	; 1
    4c74:	09 f0       	breq	.+2      	; 0x4c78 <main+0x24e2>
    4c76:	64 c3       	rjmp	.+1736   	; 0x5340 <main+0x2baa>
					{
						update_fail = 0;
    4c78:	10 92 3e 01 	sts	0x013E, r1
						do
						{
							/* receive the password from the user*/
							UART_sendByte(PASS_LOADING);
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							LCD_clearScreen();
    4c82:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayString("Plz Enter Pass:");
    4c86:	80 e6       	ldi	r24, 0x60	; 96
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
							LCD_moveCursor(1, 0);
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	60 e0       	ldi	r22, 0x00	; 0
    4c92:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_moveCursor>
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4c96:	10 92 3a 01 	sts	0x013A, r1
    4c9a:	c6 c0       	rjmp	.+396    	; 0x4e28 <main+0x2692>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
    4c9c:	80 91 3a 01 	lds	r24, 0x013A
    4ca0:	08 2f       	mov	r16, r24
    4ca2:	10 e0       	ldi	r17, 0x00	; 0
    4ca4:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4ca8:	f8 01       	movw	r30, r16
    4caa:	e0 5c       	subi	r30, 0xC0	; 192
    4cac:	fe 4f       	sbci	r31, 0xFE	; 254
    4cae:	80 83       	st	Z, r24
								LCD_displayCharacter('*');
    4cb0:	8a e2       	ldi	r24, 0x2A	; 42
    4cb2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e7 57       	subi	r30, 0x77	; 119
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	aa ef       	ldi	r26, 0xFA	; 250
    4cc2:	b3 e4       	ldi	r27, 0x43	; 67
    4cc4:	80 83       	st	Z, r24
    4cc6:	91 83       	std	Z+1, r25	; 0x01
    4cc8:	a2 83       	std	Z+2, r26	; 0x02
    4cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ccc:	8e 01       	movw	r16, r28
    4cce:	0b 57       	subi	r16, 0x7B	; 123
    4cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e7 57       	subi	r30, 0x77	; 119
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	60 81       	ld	r22, Z
    4cda:	71 81       	ldd	r23, Z+1	; 0x01
    4cdc:	82 81       	ldd	r24, Z+2	; 0x02
    4cde:	93 81       	ldd	r25, Z+3	; 0x03
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	4a ef       	ldi	r20, 0xFA	; 250
    4ce6:	54 e4       	ldi	r21, 0x44	; 68
    4ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	f8 01       	movw	r30, r16
    4cf2:	80 83       	st	Z, r24
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	a2 83       	std	Z+2, r26	; 0x02
    4cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	eb 57       	subi	r30, 0x7B	; 123
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	60 81       	ld	r22, Z
    4d02:	71 81       	ldd	r23, Z+1	; 0x01
    4d04:	82 81       	ldd	r24, Z+2	; 0x02
    4d06:	93 81       	ldd	r25, Z+3	; 0x03
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e8       	ldi	r20, 0x80	; 128
    4d0e:	5f e3       	ldi	r21, 0x3F	; 63
    4d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d14:	88 23       	and	r24, r24
    4d16:	44 f4       	brge	.+16     	; 0x4d28 <main+0x2592>
		__ticks = 1;
    4d18:	fe 01       	movw	r30, r28
    4d1a:	ed 57       	subi	r30, 0x7D	; 125
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	91 83       	std	Z+1, r25	; 0x01
    4d24:	80 83       	st	Z, r24
    4d26:	64 c0       	rjmp	.+200    	; 0x4df0 <main+0x265a>
	else if (__tmp > 65535)
    4d28:	fe 01       	movw	r30, r28
    4d2a:	eb 57       	subi	r30, 0x7B	; 123
    4d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2e:	60 81       	ld	r22, Z
    4d30:	71 81       	ldd	r23, Z+1	; 0x01
    4d32:	82 81       	ldd	r24, Z+2	; 0x02
    4d34:	93 81       	ldd	r25, Z+3	; 0x03
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	3f ef       	ldi	r19, 0xFF	; 255
    4d3a:	4f e7       	ldi	r20, 0x7F	; 127
    4d3c:	57 e4       	ldi	r21, 0x47	; 71
    4d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d42:	18 16       	cp	r1, r24
    4d44:	0c f0       	brlt	.+2      	; 0x4d48 <main+0x25b2>
    4d46:	43 c0       	rjmp	.+134    	; 0x4dce <main+0x2638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d48:	fe 01       	movw	r30, r28
    4d4a:	e7 57       	subi	r30, 0x77	; 119
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	60 81       	ld	r22, Z
    4d50:	71 81       	ldd	r23, Z+1	; 0x01
    4d52:	82 81       	ldd	r24, Z+2	; 0x02
    4d54:	93 81       	ldd	r25, Z+3	; 0x03
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e2       	ldi	r20, 0x20	; 32
    4d5c:	51 e4       	ldi	r21, 0x41	; 65
    4d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	8e 01       	movw	r16, r28
    4d68:	0d 57       	subi	r16, 0x7D	; 125
    4d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d6c:	bc 01       	movw	r22, r24
    4d6e:	cd 01       	movw	r24, r26
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	f8 01       	movw	r30, r16
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	1f c0       	rjmp	.+62     	; 0x4dbe <main+0x2628>
    4d80:	fe 01       	movw	r30, r28
    4d82:	ef 57       	subi	r30, 0x7F	; 127
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	88 ec       	ldi	r24, 0xC8	; 200
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	91 83       	std	Z+1, r25	; 0x01
    4d8c:	80 83       	st	Z, r24
    4d8e:	fe 01       	movw	r30, r28
    4d90:	ef 57       	subi	r30, 0x7F	; 127
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	01 97       	sbiw	r24, 0x01	; 1
    4d9a:	f1 f7       	brne	.-4      	; 0x4d98 <main+0x2602>
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	ef 57       	subi	r30, 0x7F	; 127
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	91 83       	std	Z+1, r25	; 0x01
    4da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da6:	de 01       	movw	r26, r28
    4da8:	ad 57       	subi	r26, 0x7D	; 125
    4daa:	bf 4f       	sbci	r27, 0xFF	; 255
    4dac:	fe 01       	movw	r30, r28
    4dae:	ed 57       	subi	r30, 0x7D	; 125
    4db0:	ff 4f       	sbci	r31, 0xFF	; 255
    4db2:	80 81       	ld	r24, Z
    4db4:	91 81       	ldd	r25, Z+1	; 0x01
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	11 96       	adiw	r26, 0x01	; 1
    4dba:	9c 93       	st	X, r25
    4dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	ed 57       	subi	r30, 0x7D	; 125
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	80 81       	ld	r24, Z
    4dc6:	91 81       	ldd	r25, Z+1	; 0x01
    4dc8:	00 97       	sbiw	r24, 0x00	; 0
    4dca:	d1 f6       	brne	.-76     	; 0x4d80 <main+0x25ea>
    4dcc:	28 c0       	rjmp	.+80     	; 0x4e1e <main+0x2688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dce:	8e 01       	movw	r16, r28
    4dd0:	0d 57       	subi	r16, 0x7D	; 125
    4dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	eb 57       	subi	r30, 0x7B	; 123
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	60 81       	ld	r22, Z
    4ddc:	71 81       	ldd	r23, Z+1	; 0x01
    4dde:	82 81       	ldd	r24, Z+2	; 0x02
    4de0:	93 81       	ldd	r25, Z+3	; 0x03
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	f8 01       	movw	r30, r16
    4dec:	91 83       	std	Z+1, r25	; 0x01
    4dee:	80 83       	st	Z, r24
    4df0:	de 01       	movw	r26, r28
    4df2:	a1 58       	subi	r26, 0x81	; 129
    4df4:	bf 4f       	sbci	r27, 0xFF	; 255
    4df6:	fe 01       	movw	r30, r28
    4df8:	ed 57       	subi	r30, 0x7D	; 125
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	11 96       	adiw	r26, 0x01	; 1
    4e02:	9c 93       	st	X, r25
    4e04:	8e 93       	st	-X, r24
    4e06:	fe 01       	movw	r30, r28
    4e08:	e1 58       	subi	r30, 0x81	; 129
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	01 97       	sbiw	r24, 0x01	; 1
    4e12:	f1 f7       	brne	.-4      	; 0x4e10 <main+0x267a>
    4e14:	fe 01       	movw	r30, r28
    4e16:	e1 58       	subi	r30, 0x81	; 129
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	80 83       	st	Z, r24
							/* receive the password from the user*/
							UART_sendByte(PASS_LOADING);
							LCD_clearScreen();
							LCD_displayString("Plz Enter Pass:");
							LCD_moveCursor(1, 0);
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4e1e:	80 91 3a 01 	lds	r24, 0x013A
    4e22:	8f 5f       	subi	r24, 0xFF	; 255
    4e24:	80 93 3a 01 	sts	0x013A, r24
    4e28:	80 91 3a 01 	lds	r24, 0x013A
    4e2c:	85 30       	cpi	r24, 0x05	; 5
    4e2e:	08 f4       	brcc	.+2      	; 0x4e32 <main+0x269c>
    4e30:	35 cf       	rjmp	.-406    	; 0x4c9c <main+0x2506>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
    4e32:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4e36:	85 36       	cpi	r24, 0x65	; 101
    4e38:	e1 f7       	brne	.-8      	; 0x4e32 <main+0x269c>
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e5 58       	subi	r30, 0x85	; 133
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	aa ef       	ldi	r26, 0xFA	; 250
    4e46:	b3 e4       	ldi	r27, 0x43	; 67
    4e48:	80 83       	st	Z, r24
    4e4a:	91 83       	std	Z+1, r25	; 0x01
    4e4c:	a2 83       	std	Z+2, r26	; 0x02
    4e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e50:	8e 01       	movw	r16, r28
    4e52:	09 58       	subi	r16, 0x89	; 137
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	fe 01       	movw	r30, r28
    4e58:	e5 58       	subi	r30, 0x85	; 133
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	60 81       	ld	r22, Z
    4e5e:	71 81       	ldd	r23, Z+1	; 0x01
    4e60:	82 81       	ldd	r24, Z+2	; 0x02
    4e62:	93 81       	ldd	r25, Z+3	; 0x03
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	4a ef       	ldi	r20, 0xFA	; 250
    4e6a:	54 e4       	ldi	r21, 0x44	; 68
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	f8 01       	movw	r30, r16
    4e76:	80 83       	st	Z, r24
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	a2 83       	std	Z+2, r26	; 0x02
    4e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e7e:	fe 01       	movw	r30, r28
    4e80:	e9 58       	subi	r30, 0x89	; 137
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	60 81       	ld	r22, Z
    4e86:	71 81       	ldd	r23, Z+1	; 0x01
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	40 e8       	ldi	r20, 0x80	; 128
    4e92:	5f e3       	ldi	r21, 0x3F	; 63
    4e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e98:	88 23       	and	r24, r24
    4e9a:	44 f4       	brge	.+16     	; 0x4eac <main+0x2716>
		__ticks = 1;
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	eb 58       	subi	r30, 0x8B	; 139
    4ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	91 83       	std	Z+1, r25	; 0x01
    4ea8:	80 83       	st	Z, r24
    4eaa:	64 c0       	rjmp	.+200    	; 0x4f74 <main+0x27de>
	else if (__tmp > 65535)
    4eac:	fe 01       	movw	r30, r28
    4eae:	e9 58       	subi	r30, 0x89	; 137
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	60 81       	ld	r22, Z
    4eb4:	71 81       	ldd	r23, Z+1	; 0x01
    4eb6:	82 81       	ldd	r24, Z+2	; 0x02
    4eb8:	93 81       	ldd	r25, Z+3	; 0x03
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	3f ef       	ldi	r19, 0xFF	; 255
    4ebe:	4f e7       	ldi	r20, 0x7F	; 127
    4ec0:	57 e4       	ldi	r21, 0x47	; 71
    4ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ec6:	18 16       	cp	r1, r24
    4ec8:	0c f0       	brlt	.+2      	; 0x4ecc <main+0x2736>
    4eca:	43 c0       	rjmp	.+134    	; 0x4f52 <main+0x27bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ecc:	fe 01       	movw	r30, r28
    4ece:	e5 58       	subi	r30, 0x85	; 133
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	40 e2       	ldi	r20, 0x20	; 32
    4ee0:	51 e4       	ldi	r21, 0x41	; 65
    4ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	8e 01       	movw	r16, r28
    4eec:	0b 58       	subi	r16, 0x8B	; 139
    4eee:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef0:	bc 01       	movw	r22, r24
    4ef2:	cd 01       	movw	r24, r26
    4ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	f8 01       	movw	r30, r16
    4efe:	91 83       	std	Z+1, r25	; 0x01
    4f00:	80 83       	st	Z, r24
    4f02:	1f c0       	rjmp	.+62     	; 0x4f42 <main+0x27ac>
    4f04:	fe 01       	movw	r30, r28
    4f06:	ed 58       	subi	r30, 0x8D	; 141
    4f08:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0a:	88 ec       	ldi	r24, 0xC8	; 200
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	91 83       	std	Z+1, r25	; 0x01
    4f10:	80 83       	st	Z, r24
    4f12:	fe 01       	movw	r30, r28
    4f14:	ed 58       	subi	r30, 0x8D	; 141
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	80 81       	ld	r24, Z
    4f1a:	91 81       	ldd	r25, Z+1	; 0x01
    4f1c:	01 97       	sbiw	r24, 0x01	; 1
    4f1e:	f1 f7       	brne	.-4      	; 0x4f1c <main+0x2786>
    4f20:	fe 01       	movw	r30, r28
    4f22:	ed 58       	subi	r30, 0x8D	; 141
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	91 83       	std	Z+1, r25	; 0x01
    4f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2a:	de 01       	movw	r26, r28
    4f2c:	ab 58       	subi	r26, 0x8B	; 139
    4f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f30:	fe 01       	movw	r30, r28
    4f32:	eb 58       	subi	r30, 0x8B	; 139
    4f34:	ff 4f       	sbci	r31, 0xFF	; 255
    4f36:	80 81       	ld	r24, Z
    4f38:	91 81       	ldd	r25, Z+1	; 0x01
    4f3a:	01 97       	sbiw	r24, 0x01	; 1
    4f3c:	11 96       	adiw	r26, 0x01	; 1
    4f3e:	9c 93       	st	X, r25
    4f40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f42:	fe 01       	movw	r30, r28
    4f44:	eb 58       	subi	r30, 0x8B	; 139
    4f46:	ff 4f       	sbci	r31, 0xFF	; 255
    4f48:	80 81       	ld	r24, Z
    4f4a:	91 81       	ldd	r25, Z+1	; 0x01
    4f4c:	00 97       	sbiw	r24, 0x00	; 0
    4f4e:	d1 f6       	brne	.-76     	; 0x4f04 <main+0x276e>
    4f50:	27 c0       	rjmp	.+78     	; 0x4fa0 <main+0x280a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f52:	8e 01       	movw	r16, r28
    4f54:	0b 58       	subi	r16, 0x8B	; 139
    4f56:	1f 4f       	sbci	r17, 0xFF	; 255
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e9 58       	subi	r30, 0x89	; 137
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	f8 01       	movw	r30, r16
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	80 83       	st	Z, r24
    4f74:	de 01       	movw	r26, r28
    4f76:	af 58       	subi	r26, 0x8F	; 143
    4f78:	bf 4f       	sbci	r27, 0xFF	; 255
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	eb 58       	subi	r30, 0x8B	; 139
    4f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f80:	80 81       	ld	r24, Z
    4f82:	91 81       	ldd	r25, Z+1	; 0x01
    4f84:	8d 93       	st	X+, r24
    4f86:	9c 93       	st	X, r25
    4f88:	fe 01       	movw	r30, r28
    4f8a:	ef 58       	subi	r30, 0x8F	; 143
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	80 81       	ld	r24, Z
    4f90:	91 81       	ldd	r25, Z+1	; 0x01
    4f92:	01 97       	sbiw	r24, 0x01	; 1
    4f94:	f1 f7       	brne	.-4      	; 0x4f92 <main+0x27fc>
    4f96:	fe 01       	movw	r30, r28
    4f98:	ef 58       	subi	r30, 0x8F	; 143
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	91 83       	std	Z+1, r25	; 0x01
    4f9e:	80 83       	st	Z, r24
							_delay_ms(500);
							LCD_clearScreen();
    4fa0:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayString("Plz re-enter the");
    4fa4:	80 e7       	ldi	r24, 0x70	; 112
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
							LCD_displayStringRowColumn(1, 0, "same pass: ");
    4fac:	21 e8       	ldi	r18, 0x81	; 129
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	60 e0       	ldi	r22, 0x00	; 0
    4fb4:	a9 01       	movw	r20, r18
    4fb6:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    4fba:	10 92 3a 01 	sts	0x013A, r1
    4fbe:	c6 c0       	rjmp	.+396    	; 0x514c <main+0x29b6>
							{
								pass_2[counter] = KEYPAD_getPressedKey();
    4fc0:	80 91 3a 01 	lds	r24, 0x013A
    4fc4:	08 2f       	mov	r16, r24
    4fc6:	10 e0       	ldi	r17, 0x00	; 0
    4fc8:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    4fcc:	f8 01       	movw	r30, r16
    4fce:	eb 5b       	subi	r30, 0xBB	; 187
    4fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd2:	80 83       	st	Z, r24
								LCD_displayCharacter('*');
    4fd4:	8a e2       	ldi	r24, 0x2A	; 42
    4fd6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    4fda:	fe 01       	movw	r30, r28
    4fdc:	e3 59       	subi	r30, 0x93	; 147
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	80 e0       	ldi	r24, 0x00	; 0
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	aa ef       	ldi	r26, 0xFA	; 250
    4fe6:	b3 e4       	ldi	r27, 0x43	; 67
    4fe8:	80 83       	st	Z, r24
    4fea:	91 83       	std	Z+1, r25	; 0x01
    4fec:	a2 83       	std	Z+2, r26	; 0x02
    4fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff0:	8e 01       	movw	r16, r28
    4ff2:	07 59       	subi	r16, 0x97	; 151
    4ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	e3 59       	subi	r30, 0x93	; 147
    4ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffc:	60 81       	ld	r22, Z
    4ffe:	71 81       	ldd	r23, Z+1	; 0x01
    5000:	82 81       	ldd	r24, Z+2	; 0x02
    5002:	93 81       	ldd	r25, Z+3	; 0x03
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	4a ef       	ldi	r20, 0xFA	; 250
    500a:	54 e4       	ldi	r21, 0x44	; 68
    500c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	f8 01       	movw	r30, r16
    5016:	80 83       	st	Z, r24
    5018:	91 83       	std	Z+1, r25	; 0x01
    501a:	a2 83       	std	Z+2, r26	; 0x02
    501c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    501e:	fe 01       	movw	r30, r28
    5020:	e7 59       	subi	r30, 0x97	; 151
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	60 81       	ld	r22, Z
    5026:	71 81       	ldd	r23, Z+1	; 0x01
    5028:	82 81       	ldd	r24, Z+2	; 0x02
    502a:	93 81       	ldd	r25, Z+3	; 0x03
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	40 e8       	ldi	r20, 0x80	; 128
    5032:	5f e3       	ldi	r21, 0x3F	; 63
    5034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5038:	88 23       	and	r24, r24
    503a:	44 f4       	brge	.+16     	; 0x504c <main+0x28b6>
		__ticks = 1;
    503c:	fe 01       	movw	r30, r28
    503e:	e9 59       	subi	r30, 0x99	; 153
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
    504a:	64 c0       	rjmp	.+200    	; 0x5114 <main+0x297e>
	else if (__tmp > 65535)
    504c:	fe 01       	movw	r30, r28
    504e:	e7 59       	subi	r30, 0x97	; 151
    5050:	ff 4f       	sbci	r31, 0xFF	; 255
    5052:	60 81       	ld	r22, Z
    5054:	71 81       	ldd	r23, Z+1	; 0x01
    5056:	82 81       	ldd	r24, Z+2	; 0x02
    5058:	93 81       	ldd	r25, Z+3	; 0x03
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	3f ef       	ldi	r19, 0xFF	; 255
    505e:	4f e7       	ldi	r20, 0x7F	; 127
    5060:	57 e4       	ldi	r21, 0x47	; 71
    5062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5066:	18 16       	cp	r1, r24
    5068:	0c f0       	brlt	.+2      	; 0x506c <main+0x28d6>
    506a:	43 c0       	rjmp	.+134    	; 0x50f2 <main+0x295c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    506c:	fe 01       	movw	r30, r28
    506e:	e3 59       	subi	r30, 0x93	; 147
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	60 81       	ld	r22, Z
    5074:	71 81       	ldd	r23, Z+1	; 0x01
    5076:	82 81       	ldd	r24, Z+2	; 0x02
    5078:	93 81       	ldd	r25, Z+3	; 0x03
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	40 e2       	ldi	r20, 0x20	; 32
    5080:	51 e4       	ldi	r21, 0x41	; 65
    5082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5086:	dc 01       	movw	r26, r24
    5088:	cb 01       	movw	r24, r22
    508a:	8e 01       	movw	r16, r28
    508c:	09 59       	subi	r16, 0x99	; 153
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	bc 01       	movw	r22, r24
    5092:	cd 01       	movw	r24, r26
    5094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5098:	dc 01       	movw	r26, r24
    509a:	cb 01       	movw	r24, r22
    509c:	f8 01       	movw	r30, r16
    509e:	91 83       	std	Z+1, r25	; 0x01
    50a0:	80 83       	st	Z, r24
    50a2:	1f c0       	rjmp	.+62     	; 0x50e2 <main+0x294c>
    50a4:	fe 01       	movw	r30, r28
    50a6:	eb 59       	subi	r30, 0x9B	; 155
    50a8:	ff 4f       	sbci	r31, 0xFF	; 255
    50aa:	88 ec       	ldi	r24, 0xC8	; 200
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	91 83       	std	Z+1, r25	; 0x01
    50b0:	80 83       	st	Z, r24
    50b2:	fe 01       	movw	r30, r28
    50b4:	eb 59       	subi	r30, 0x9B	; 155
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 81       	ld	r24, Z
    50ba:	91 81       	ldd	r25, Z+1	; 0x01
    50bc:	01 97       	sbiw	r24, 0x01	; 1
    50be:	f1 f7       	brne	.-4      	; 0x50bc <main+0x2926>
    50c0:	fe 01       	movw	r30, r28
    50c2:	eb 59       	subi	r30, 0x9B	; 155
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	91 83       	std	Z+1, r25	; 0x01
    50c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ca:	de 01       	movw	r26, r28
    50cc:	a9 59       	subi	r26, 0x99	; 153
    50ce:	bf 4f       	sbci	r27, 0xFF	; 255
    50d0:	fe 01       	movw	r30, r28
    50d2:	e9 59       	subi	r30, 0x99	; 153
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	01 97       	sbiw	r24, 0x01	; 1
    50dc:	11 96       	adiw	r26, 0x01	; 1
    50de:	9c 93       	st	X, r25
    50e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50e2:	fe 01       	movw	r30, r28
    50e4:	e9 59       	subi	r30, 0x99	; 153
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	00 97       	sbiw	r24, 0x00	; 0
    50ee:	d1 f6       	brne	.-76     	; 0x50a4 <main+0x290e>
    50f0:	28 c0       	rjmp	.+80     	; 0x5142 <main+0x29ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f2:	8e 01       	movw	r16, r28
    50f4:	09 59       	subi	r16, 0x99	; 153
    50f6:	1f 4f       	sbci	r17, 0xFF	; 255
    50f8:	fe 01       	movw	r30, r28
    50fa:	e7 59       	subi	r30, 0x97	; 151
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	60 81       	ld	r22, Z
    5100:	71 81       	ldd	r23, Z+1	; 0x01
    5102:	82 81       	ldd	r24, Z+2	; 0x02
    5104:	93 81       	ldd	r25, Z+3	; 0x03
    5106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	f8 01       	movw	r30, r16
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
    5114:	de 01       	movw	r26, r28
    5116:	ad 59       	subi	r26, 0x9D	; 157
    5118:	bf 4f       	sbci	r27, 0xFF	; 255
    511a:	fe 01       	movw	r30, r28
    511c:	e9 59       	subi	r30, 0x99	; 153
    511e:	ff 4f       	sbci	r31, 0xFF	; 255
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	11 96       	adiw	r26, 0x01	; 1
    5126:	9c 93       	st	X, r25
    5128:	8e 93       	st	-X, r24
    512a:	fe 01       	movw	r30, r28
    512c:	ed 59       	subi	r30, 0x9D	; 157
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	80 81       	ld	r24, Z
    5132:	91 81       	ldd	r25, Z+1	; 0x01
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <main+0x299e>
    5138:	fe 01       	movw	r30, r28
    513a:	ed 59       	subi	r30, 0x9D	; 157
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24
							while(KEYPAD_getPressedKey() != 'e');
							_delay_ms(500);
							LCD_clearScreen();
							LCD_displayString("Plz re-enter the");
							LCD_displayStringRowColumn(1, 0, "same pass: ");
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    5142:	80 91 3a 01 	lds	r24, 0x013A
    5146:	8f 5f       	subi	r24, 0xFF	; 255
    5148:	80 93 3a 01 	sts	0x013A, r24
    514c:	80 91 3a 01 	lds	r24, 0x013A
    5150:	85 30       	cpi	r24, 0x05	; 5
    5152:	08 f4       	brcc	.+2      	; 0x5156 <main+0x29c0>
    5154:	35 cf       	rjmp	.-406    	; 0x4fc0 <main+0x282a>
							{
								pass_2[counter] = KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
    5156:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    515a:	85 36       	cpi	r24, 0x65	; 101
    515c:	e1 f7       	brne	.-8      	; 0x5156 <main+0x29c0>
    515e:	fe 01       	movw	r30, r28
    5160:	e1 5a       	subi	r30, 0xA1	; 161
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 e0       	ldi	r24, 0x00	; 0
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	aa ef       	ldi	r26, 0xFA	; 250
    516a:	b3 e4       	ldi	r27, 0x43	; 67
    516c:	80 83       	st	Z, r24
    516e:	91 83       	std	Z+1, r25	; 0x01
    5170:	a2 83       	std	Z+2, r26	; 0x02
    5172:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5174:	8e 01       	movw	r16, r28
    5176:	05 5a       	subi	r16, 0xA5	; 165
    5178:	1f 4f       	sbci	r17, 0xFF	; 255
    517a:	fe 01       	movw	r30, r28
    517c:	e1 5a       	subi	r30, 0xA1	; 161
    517e:	ff 4f       	sbci	r31, 0xFF	; 255
    5180:	60 81       	ld	r22, Z
    5182:	71 81       	ldd	r23, Z+1	; 0x01
    5184:	82 81       	ldd	r24, Z+2	; 0x02
    5186:	93 81       	ldd	r25, Z+3	; 0x03
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	4a ef       	ldi	r20, 0xFA	; 250
    518e:	54 e4       	ldi	r21, 0x44	; 68
    5190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5194:	dc 01       	movw	r26, r24
    5196:	cb 01       	movw	r24, r22
    5198:	f8 01       	movw	r30, r16
    519a:	80 83       	st	Z, r24
    519c:	91 83       	std	Z+1, r25	; 0x01
    519e:	a2 83       	std	Z+2, r26	; 0x02
    51a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51a2:	fe 01       	movw	r30, r28
    51a4:	e5 5a       	subi	r30, 0xA5	; 165
    51a6:	ff 4f       	sbci	r31, 0xFF	; 255
    51a8:	60 81       	ld	r22, Z
    51aa:	71 81       	ldd	r23, Z+1	; 0x01
    51ac:	82 81       	ldd	r24, Z+2	; 0x02
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	20 e0       	ldi	r18, 0x00	; 0
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	40 e8       	ldi	r20, 0x80	; 128
    51b6:	5f e3       	ldi	r21, 0x3F	; 63
    51b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51bc:	88 23       	and	r24, r24
    51be:	44 f4       	brge	.+16     	; 0x51d0 <main+0x2a3a>
		__ticks = 1;
    51c0:	fe 01       	movw	r30, r28
    51c2:	e7 5a       	subi	r30, 0xA7	; 167
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	80 83       	st	Z, r24
    51ce:	64 c0       	rjmp	.+200    	; 0x5298 <main+0x2b02>
	else if (__tmp > 65535)
    51d0:	fe 01       	movw	r30, r28
    51d2:	e5 5a       	subi	r30, 0xA5	; 165
    51d4:	ff 4f       	sbci	r31, 0xFF	; 255
    51d6:	60 81       	ld	r22, Z
    51d8:	71 81       	ldd	r23, Z+1	; 0x01
    51da:	82 81       	ldd	r24, Z+2	; 0x02
    51dc:	93 81       	ldd	r25, Z+3	; 0x03
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	3f ef       	ldi	r19, 0xFF	; 255
    51e2:	4f e7       	ldi	r20, 0x7F	; 127
    51e4:	57 e4       	ldi	r21, 0x47	; 71
    51e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51ea:	18 16       	cp	r1, r24
    51ec:	0c f0       	brlt	.+2      	; 0x51f0 <main+0x2a5a>
    51ee:	43 c0       	rjmp	.+134    	; 0x5276 <main+0x2ae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51f0:	fe 01       	movw	r30, r28
    51f2:	e1 5a       	subi	r30, 0xA1	; 161
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	60 81       	ld	r22, Z
    51f8:	71 81       	ldd	r23, Z+1	; 0x01
    51fa:	82 81       	ldd	r24, Z+2	; 0x02
    51fc:	93 81       	ldd	r25, Z+3	; 0x03
    51fe:	20 e0       	ldi	r18, 0x00	; 0
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	40 e2       	ldi	r20, 0x20	; 32
    5204:	51 e4       	ldi	r21, 0x41	; 65
    5206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	8e 01       	movw	r16, r28
    5210:	07 5a       	subi	r16, 0xA7	; 167
    5212:	1f 4f       	sbci	r17, 0xFF	; 255
    5214:	bc 01       	movw	r22, r24
    5216:	cd 01       	movw	r24, r26
    5218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	f8 01       	movw	r30, r16
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	80 83       	st	Z, r24
    5226:	1f c0       	rjmp	.+62     	; 0x5266 <main+0x2ad0>
    5228:	fe 01       	movw	r30, r28
    522a:	e9 5a       	subi	r30, 0xA9	; 169
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	88 ec       	ldi	r24, 0xC8	; 200
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	91 83       	std	Z+1, r25	; 0x01
    5234:	80 83       	st	Z, r24
    5236:	fe 01       	movw	r30, r28
    5238:	e9 5a       	subi	r30, 0xA9	; 169
    523a:	ff 4f       	sbci	r31, 0xFF	; 255
    523c:	80 81       	ld	r24, Z
    523e:	91 81       	ldd	r25, Z+1	; 0x01
    5240:	01 97       	sbiw	r24, 0x01	; 1
    5242:	f1 f7       	brne	.-4      	; 0x5240 <main+0x2aaa>
    5244:	fe 01       	movw	r30, r28
    5246:	e9 5a       	subi	r30, 0xA9	; 169
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	91 83       	std	Z+1, r25	; 0x01
    524c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    524e:	de 01       	movw	r26, r28
    5250:	a7 5a       	subi	r26, 0xA7	; 167
    5252:	bf 4f       	sbci	r27, 0xFF	; 255
    5254:	fe 01       	movw	r30, r28
    5256:	e7 5a       	subi	r30, 0xA7	; 167
    5258:	ff 4f       	sbci	r31, 0xFF	; 255
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	01 97       	sbiw	r24, 0x01	; 1
    5260:	11 96       	adiw	r26, 0x01	; 1
    5262:	9c 93       	st	X, r25
    5264:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5266:	fe 01       	movw	r30, r28
    5268:	e7 5a       	subi	r30, 0xA7	; 167
    526a:	ff 4f       	sbci	r31, 0xFF	; 255
    526c:	80 81       	ld	r24, Z
    526e:	91 81       	ldd	r25, Z+1	; 0x01
    5270:	00 97       	sbiw	r24, 0x00	; 0
    5272:	d1 f6       	brne	.-76     	; 0x5228 <main+0x2a92>
    5274:	28 c0       	rjmp	.+80     	; 0x52c6 <main+0x2b30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5276:	8e 01       	movw	r16, r28
    5278:	07 5a       	subi	r16, 0xA7	; 167
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
    527c:	fe 01       	movw	r30, r28
    527e:	e5 5a       	subi	r30, 0xA5	; 165
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    528e:	dc 01       	movw	r26, r24
    5290:	cb 01       	movw	r24, r22
    5292:	f8 01       	movw	r30, r16
    5294:	91 83       	std	Z+1, r25	; 0x01
    5296:	80 83       	st	Z, r24
    5298:	de 01       	movw	r26, r28
    529a:	ab 5a       	subi	r26, 0xAB	; 171
    529c:	bf 4f       	sbci	r27, 0xFF	; 255
    529e:	fe 01       	movw	r30, r28
    52a0:	e7 5a       	subi	r30, 0xA7	; 167
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	80 81       	ld	r24, Z
    52a6:	91 81       	ldd	r25, Z+1	; 0x01
    52a8:	11 96       	adiw	r26, 0x01	; 1
    52aa:	9c 93       	st	X, r25
    52ac:	8e 93       	st	-X, r24
    52ae:	fe 01       	movw	r30, r28
    52b0:	eb 5a       	subi	r30, 0xAB	; 171
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	80 81       	ld	r24, Z
    52b6:	91 81       	ldd	r25, Z+1	; 0x01
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	f1 f7       	brne	.-4      	; 0x52b8 <main+0x2b22>
    52bc:	fe 01       	movw	r30, r28
    52be:	eb 5a       	subi	r30, 0xAB	; 171
    52c0:	ff 4f       	sbci	r31, 0xFF	; 255
    52c2:	91 83       	std	Z+1, r25	; 0x01
    52c4:	80 83       	st	Z, r24
							_delay_ms(500);
							/* send the two passwords to the control ecu */
							for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    52c6:	10 92 3a 01 	sts	0x013A, r1
    52ca:	0f c0       	rjmp	.+30     	; 0x52ea <main+0x2b54>
							{
								UART_sendByte(pass_1[counter]);
    52cc:	80 91 3a 01 	lds	r24, 0x013A
    52d0:	88 2f       	mov	r24, r24
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	fc 01       	movw	r30, r24
    52d6:	e0 5c       	subi	r30, 0xC0	; 192
    52d8:	fe 4f       	sbci	r31, 0xFE	; 254
    52da:	80 81       	ld	r24, Z
    52dc:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
							_delay_ms(500);
							/* send the two passwords to the control ecu */
							for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    52e0:	80 91 3a 01 	lds	r24, 0x013A
    52e4:	8f 5f       	subi	r24, 0xFF	; 255
    52e6:	80 93 3a 01 	sts	0x013A, r24
    52ea:	80 91 3a 01 	lds	r24, 0x013A
    52ee:	85 30       	cpi	r24, 0x05	; 5
    52f0:	68 f3       	brcs	.-38     	; 0x52cc <main+0x2b36>
							{
								UART_sendByte(pass_1[counter]);
							}
							for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    52f2:	10 92 3a 01 	sts	0x013A, r1
    52f6:	0f c0       	rjmp	.+30     	; 0x5316 <main+0x2b80>
							{
								UART_sendByte(pass_2[counter]);
    52f8:	80 91 3a 01 	lds	r24, 0x013A
    52fc:	88 2f       	mov	r24, r24
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	fc 01       	movw	r30, r24
    5302:	eb 5b       	subi	r30, 0xBB	; 187
    5304:	fe 4f       	sbci	r31, 0xFE	; 254
    5306:	80 81       	ld	r24, Z
    5308:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							/* send the two passwords to the control ecu */
							for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
							{
								UART_sendByte(pass_1[counter]);
							}
							for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    530c:	80 91 3a 01 	lds	r24, 0x013A
    5310:	8f 5f       	subi	r24, 0xFF	; 255
    5312:	80 93 3a 01 	sts	0x013A, r24
    5316:	80 91 3a 01 	lds	r24, 0x013A
    531a:	85 30       	cpi	r24, 0x05	; 5
    531c:	68 f3       	brcs	.-38     	; 0x52f8 <main+0x2b62>
							{
								UART_sendByte(pass_2[counter]);
							}
							pass_state = UART_recieveByte();
    531e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    5322:	80 93 3b 01 	sts	0x013B, r24
							if(pass_state == CORRECT_PASS)
    5326:	80 91 3b 01 	lds	r24, 0x013B
    532a:	81 30       	cpi	r24, 0x01	; 1
    532c:	11 f4       	brne	.+4      	; 0x5332 <main+0x2b9c>
							{
								LCD_clearScreen();
    532e:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							}
							}while(pass_state != CORRECT_PASS);
    5332:	80 91 3b 01 	lds	r24, 0x013B
    5336:	81 30       	cpi	r24, 0x01	; 1
    5338:	09 f0       	breq	.+2      	; 0x533c <main+0x2ba6>
    533a:	a0 cc       	rjmp	.-1728   	; 0x4c7c <main+0x24e6>
    533c:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
					}
					else if(pass_state == WRONG_PASS)
    5340:	80 91 3b 01 	lds	r24, 0x013B
    5344:	88 23       	and	r24, r24
    5346:	11 f0       	breq	.+4      	; 0x534c <main+0x2bb6>
    5348:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
					{
						++update_fail;
    534c:	80 91 3e 01 	lds	r24, 0x013E
    5350:	8f 5f       	subi	r24, 0xFF	; 255
    5352:	80 93 3e 01 	sts	0x013E, r24
						if(update_fail == 3)
    5356:	80 91 3e 01 	lds	r24, 0x013E
    535a:	83 30       	cpi	r24, 0x03	; 3
    535c:	e9 f4       	brne	.+58     	; 0x5398 <main+0x2c02>
						{
							UART_sendByte(ALARM_ON);
    535e:	84 e0       	ldi	r24, 0x04	; 4
    5360:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							LCD_clearScreen();
    5364:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
						    LCD_displayStringRowColumn(0, 1, "System LOCKED");
    5368:	21 e0       	ldi	r18, 0x01	; 1
    536a:	31 e0       	ldi	r19, 0x01	; 1
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	a9 01       	movw	r20, r18
    5372:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    5376:	2f e0       	ldi	r18, 0x0F	; 15
    5378:	31 e0       	ldi	r19, 0x01	; 1
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	60 e0       	ldi	r22, 0x00	; 0
    537e:	a9 01       	movw	r20, r18
    5380:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							seconds = 0;
    5384:	10 92 4a 01 	sts	0x014A, r1
							while(seconds < 60);
    5388:	80 91 4a 01 	lds	r24, 0x014A
    538c:	8c 33       	cpi	r24, 0x3C	; 60
    538e:	e0 f3       	brcs	.-8      	; 0x5388 <main+0x2bf2>
						    update_fail = 0;
    5390:	10 92 3e 01 	sts	0x013E, r1
    5394:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
						}
						else
						{
							UART_sendByte(PASS_UPDATE);
    5398:	83 e0       	ldi	r24, 0x03	; 3
    539a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
							LCD_clearScreen();
    539e:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
							LCD_displayString("Plz enter old");
    53a2:	8b ea       	ldi	r24, 0xAB	; 171
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
							LCD_displayStringRowColumn(1, 0, "pass: ");
    53aa:	29 eb       	ldi	r18, 0xB9	; 185
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	60 e0       	ldi	r22, 0x00	; 0
    53b2:	a9 01       	movw	r20, r18
    53b4:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    53b8:	10 92 3a 01 	sts	0x013A, r1
    53bc:	c6 c0       	rjmp	.+396    	; 0x554a <main+0x2db4>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
    53be:	80 91 3a 01 	lds	r24, 0x013A
    53c2:	08 2f       	mov	r16, r24
    53c4:	10 e0       	ldi	r17, 0x00	; 0
    53c6:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    53ca:	f8 01       	movw	r30, r16
    53cc:	e0 5c       	subi	r30, 0xC0	; 192
    53ce:	fe 4f       	sbci	r31, 0xFE	; 254
    53d0:	80 83       	st	Z, r24
								LCD_displayCharacter('*');
    53d2:	8a e2       	ldi	r24, 0x2A	; 42
    53d4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    53d8:	fe 01       	movw	r30, r28
    53da:	ef 5a       	subi	r30, 0xAF	; 175
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	aa ef       	ldi	r26, 0xFA	; 250
    53e4:	b3 e4       	ldi	r27, 0x43	; 67
    53e6:	80 83       	st	Z, r24
    53e8:	91 83       	std	Z+1, r25	; 0x01
    53ea:	a2 83       	std	Z+2, r26	; 0x02
    53ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ee:	8e 01       	movw	r16, r28
    53f0:	03 5b       	subi	r16, 0xB3	; 179
    53f2:	1f 4f       	sbci	r17, 0xFF	; 255
    53f4:	fe 01       	movw	r30, r28
    53f6:	ef 5a       	subi	r30, 0xAF	; 175
    53f8:	ff 4f       	sbci	r31, 0xFF	; 255
    53fa:	60 81       	ld	r22, Z
    53fc:	71 81       	ldd	r23, Z+1	; 0x01
    53fe:	82 81       	ldd	r24, Z+2	; 0x02
    5400:	93 81       	ldd	r25, Z+3	; 0x03
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	4a ef       	ldi	r20, 0xFA	; 250
    5408:	54 e4       	ldi	r21, 0x44	; 68
    540a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	f8 01       	movw	r30, r16
    5414:	80 83       	st	Z, r24
    5416:	91 83       	std	Z+1, r25	; 0x01
    5418:	a2 83       	std	Z+2, r26	; 0x02
    541a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    541c:	fe 01       	movw	r30, r28
    541e:	e3 5b       	subi	r30, 0xB3	; 179
    5420:	ff 4f       	sbci	r31, 0xFF	; 255
    5422:	60 81       	ld	r22, Z
    5424:	71 81       	ldd	r23, Z+1	; 0x01
    5426:	82 81       	ldd	r24, Z+2	; 0x02
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e8       	ldi	r20, 0x80	; 128
    5430:	5f e3       	ldi	r21, 0x3F	; 63
    5432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5436:	88 23       	and	r24, r24
    5438:	44 f4       	brge	.+16     	; 0x544a <main+0x2cb4>
		__ticks = 1;
    543a:	fe 01       	movw	r30, r28
    543c:	e5 5b       	subi	r30, 0xB5	; 181
    543e:	ff 4f       	sbci	r31, 0xFF	; 255
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	91 83       	std	Z+1, r25	; 0x01
    5446:	80 83       	st	Z, r24
    5448:	64 c0       	rjmp	.+200    	; 0x5512 <main+0x2d7c>
	else if (__tmp > 65535)
    544a:	fe 01       	movw	r30, r28
    544c:	e3 5b       	subi	r30, 0xB3	; 179
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	60 81       	ld	r22, Z
    5452:	71 81       	ldd	r23, Z+1	; 0x01
    5454:	82 81       	ldd	r24, Z+2	; 0x02
    5456:	93 81       	ldd	r25, Z+3	; 0x03
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	3f ef       	ldi	r19, 0xFF	; 255
    545c:	4f e7       	ldi	r20, 0x7F	; 127
    545e:	57 e4       	ldi	r21, 0x47	; 71
    5460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5464:	18 16       	cp	r1, r24
    5466:	0c f0       	brlt	.+2      	; 0x546a <main+0x2cd4>
    5468:	43 c0       	rjmp	.+134    	; 0x54f0 <main+0x2d5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    546a:	fe 01       	movw	r30, r28
    546c:	ef 5a       	subi	r30, 0xAF	; 175
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	60 81       	ld	r22, Z
    5472:	71 81       	ldd	r23, Z+1	; 0x01
    5474:	82 81       	ldd	r24, Z+2	; 0x02
    5476:	93 81       	ldd	r25, Z+3	; 0x03
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	40 e2       	ldi	r20, 0x20	; 32
    547e:	51 e4       	ldi	r21, 0x41	; 65
    5480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	8e 01       	movw	r16, r28
    548a:	05 5b       	subi	r16, 0xB5	; 181
    548c:	1f 4f       	sbci	r17, 0xFF	; 255
    548e:	bc 01       	movw	r22, r24
    5490:	cd 01       	movw	r24, r26
    5492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	f8 01       	movw	r30, r16
    549c:	91 83       	std	Z+1, r25	; 0x01
    549e:	80 83       	st	Z, r24
    54a0:	1f c0       	rjmp	.+62     	; 0x54e0 <main+0x2d4a>
    54a2:	fe 01       	movw	r30, r28
    54a4:	e7 5b       	subi	r30, 0xB7	; 183
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	88 ec       	ldi	r24, 0xC8	; 200
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	91 83       	std	Z+1, r25	; 0x01
    54ae:	80 83       	st	Z, r24
    54b0:	fe 01       	movw	r30, r28
    54b2:	e7 5b       	subi	r30, 0xB7	; 183
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	80 81       	ld	r24, Z
    54b8:	91 81       	ldd	r25, Z+1	; 0x01
    54ba:	01 97       	sbiw	r24, 0x01	; 1
    54bc:	f1 f7       	brne	.-4      	; 0x54ba <main+0x2d24>
    54be:	fe 01       	movw	r30, r28
    54c0:	e7 5b       	subi	r30, 0xB7	; 183
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	91 83       	std	Z+1, r25	; 0x01
    54c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54c8:	de 01       	movw	r26, r28
    54ca:	a5 5b       	subi	r26, 0xB5	; 181
    54cc:	bf 4f       	sbci	r27, 0xFF	; 255
    54ce:	fe 01       	movw	r30, r28
    54d0:	e5 5b       	subi	r30, 0xB5	; 181
    54d2:	ff 4f       	sbci	r31, 0xFF	; 255
    54d4:	80 81       	ld	r24, Z
    54d6:	91 81       	ldd	r25, Z+1	; 0x01
    54d8:	01 97       	sbiw	r24, 0x01	; 1
    54da:	11 96       	adiw	r26, 0x01	; 1
    54dc:	9c 93       	st	X, r25
    54de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54e0:	fe 01       	movw	r30, r28
    54e2:	e5 5b       	subi	r30, 0xB5	; 181
    54e4:	ff 4f       	sbci	r31, 0xFF	; 255
    54e6:	80 81       	ld	r24, Z
    54e8:	91 81       	ldd	r25, Z+1	; 0x01
    54ea:	00 97       	sbiw	r24, 0x00	; 0
    54ec:	d1 f6       	brne	.-76     	; 0x54a2 <main+0x2d0c>
    54ee:	28 c0       	rjmp	.+80     	; 0x5540 <main+0x2daa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54f0:	8e 01       	movw	r16, r28
    54f2:	05 5b       	subi	r16, 0xB5	; 181
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
    54f6:	fe 01       	movw	r30, r28
    54f8:	e3 5b       	subi	r30, 0xB3	; 179
    54fa:	ff 4f       	sbci	r31, 0xFF	; 255
    54fc:	60 81       	ld	r22, Z
    54fe:	71 81       	ldd	r23, Z+1	; 0x01
    5500:	82 81       	ldd	r24, Z+2	; 0x02
    5502:	93 81       	ldd	r25, Z+3	; 0x03
    5504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	f8 01       	movw	r30, r16
    550e:	91 83       	std	Z+1, r25	; 0x01
    5510:	80 83       	st	Z, r24
    5512:	de 01       	movw	r26, r28
    5514:	a9 5b       	subi	r26, 0xB9	; 185
    5516:	bf 4f       	sbci	r27, 0xFF	; 255
    5518:	fe 01       	movw	r30, r28
    551a:	e5 5b       	subi	r30, 0xB5	; 181
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	11 96       	adiw	r26, 0x01	; 1
    5524:	9c 93       	st	X, r25
    5526:	8e 93       	st	-X, r24
    5528:	fe 01       	movw	r30, r28
    552a:	e9 5b       	subi	r30, 0xB9	; 185
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	f1 f7       	brne	.-4      	; 0x5532 <main+0x2d9c>
    5536:	fe 01       	movw	r30, r28
    5538:	e9 5b       	subi	r30, 0xB9	; 185
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	91 83       	std	Z+1, r25	; 0x01
    553e:	80 83       	st	Z, r24
						{
							UART_sendByte(PASS_UPDATE);
							LCD_clearScreen();
							LCD_displayString("Plz enter old");
							LCD_displayStringRowColumn(1, 0, "pass: ");
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    5540:	80 91 3a 01 	lds	r24, 0x013A
    5544:	8f 5f       	subi	r24, 0xFF	; 255
    5546:	80 93 3a 01 	sts	0x013A, r24
    554a:	80 91 3a 01 	lds	r24, 0x013A
    554e:	85 30       	cpi	r24, 0x05	; 5
    5550:	08 f4       	brcc	.+2      	; 0x5554 <main+0x2dbe>
    5552:	35 cf       	rjmp	.-406    	; 0x53be <main+0x2c28>
							{
								pass_1[counter] = KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
    5554:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    5558:	85 36       	cpi	r24, 0x65	; 101
    555a:	e1 f7       	brne	.-8      	; 0x5554 <main+0x2dbe>
    555c:	fe 01       	movw	r30, r28
    555e:	ed 5b       	subi	r30, 0xBD	; 189
    5560:	ff 4f       	sbci	r31, 0xFF	; 255
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	aa ef       	ldi	r26, 0xFA	; 250
    5568:	b3 e4       	ldi	r27, 0x43	; 67
    556a:	80 83       	st	Z, r24
    556c:	91 83       	std	Z+1, r25	; 0x01
    556e:	a2 83       	std	Z+2, r26	; 0x02
    5570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5572:	8e 01       	movw	r16, r28
    5574:	01 5c       	subi	r16, 0xC1	; 193
    5576:	1f 4f       	sbci	r17, 0xFF	; 255
    5578:	fe 01       	movw	r30, r28
    557a:	ed 5b       	subi	r30, 0xBD	; 189
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	60 81       	ld	r22, Z
    5580:	71 81       	ldd	r23, Z+1	; 0x01
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	4a ef       	ldi	r20, 0xFA	; 250
    558c:	54 e4       	ldi	r21, 0x44	; 68
    558e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5592:	dc 01       	movw	r26, r24
    5594:	cb 01       	movw	r24, r22
    5596:	f8 01       	movw	r30, r16
    5598:	80 83       	st	Z, r24
    559a:	91 83       	std	Z+1, r25	; 0x01
    559c:	a2 83       	std	Z+2, r26	; 0x02
    559e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55a0:	fe 01       	movw	r30, r28
    55a2:	ff 96       	adiw	r30, 0x3f	; 63
    55a4:	60 81       	ld	r22, Z
    55a6:	71 81       	ldd	r23, Z+1	; 0x01
    55a8:	82 81       	ldd	r24, Z+2	; 0x02
    55aa:	93 81       	ldd	r25, Z+3	; 0x03
    55ac:	20 e0       	ldi	r18, 0x00	; 0
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	40 e8       	ldi	r20, 0x80	; 128
    55b2:	5f e3       	ldi	r21, 0x3F	; 63
    55b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55b8:	88 23       	and	r24, r24
    55ba:	2c f4       	brge	.+10     	; 0x55c6 <main+0x2e30>
		__ticks = 1;
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	9e af       	std	Y+62, r25	; 0x3e
    55c2:	8d af       	std	Y+61, r24	; 0x3d
    55c4:	46 c0       	rjmp	.+140    	; 0x5652 <main+0x2ebc>
	else if (__tmp > 65535)
    55c6:	fe 01       	movw	r30, r28
    55c8:	ff 96       	adiw	r30, 0x3f	; 63
    55ca:	60 81       	ld	r22, Z
    55cc:	71 81       	ldd	r23, Z+1	; 0x01
    55ce:	82 81       	ldd	r24, Z+2	; 0x02
    55d0:	93 81       	ldd	r25, Z+3	; 0x03
    55d2:	20 e0       	ldi	r18, 0x00	; 0
    55d4:	3f ef       	ldi	r19, 0xFF	; 255
    55d6:	4f e7       	ldi	r20, 0x7F	; 127
    55d8:	57 e4       	ldi	r21, 0x47	; 71
    55da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55de:	18 16       	cp	r1, r24
    55e0:	64 f5       	brge	.+88     	; 0x563a <main+0x2ea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55e2:	fe 01       	movw	r30, r28
    55e4:	ed 5b       	subi	r30, 0xBD	; 189
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	60 81       	ld	r22, Z
    55ea:	71 81       	ldd	r23, Z+1	; 0x01
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	93 81       	ldd	r25, Z+3	; 0x03
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	40 e2       	ldi	r20, 0x20	; 32
    55f6:	51 e4       	ldi	r21, 0x41	; 65
    55f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55fc:	dc 01       	movw	r26, r24
    55fe:	cb 01       	movw	r24, r22
    5600:	bc 01       	movw	r22, r24
    5602:	cd 01       	movw	r24, r26
    5604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	9e af       	std	Y+62, r25	; 0x3e
    560e:	8d af       	std	Y+61, r24	; 0x3d
    5610:	0f c0       	rjmp	.+30     	; 0x5630 <main+0x2e9a>
    5612:	88 ec       	ldi	r24, 0xC8	; 200
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	9c af       	std	Y+60, r25	; 0x3c
    5618:	8b af       	std	Y+59, r24	; 0x3b
    561a:	8b ad       	ldd	r24, Y+59	; 0x3b
    561c:	9c ad       	ldd	r25, Y+60	; 0x3c
    561e:	01 97       	sbiw	r24, 0x01	; 1
    5620:	f1 f7       	brne	.-4      	; 0x561e <main+0x2e88>
    5622:	9c af       	std	Y+60, r25	; 0x3c
    5624:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5626:	8d ad       	ldd	r24, Y+61	; 0x3d
    5628:	9e ad       	ldd	r25, Y+62	; 0x3e
    562a:	01 97       	sbiw	r24, 0x01	; 1
    562c:	9e af       	std	Y+62, r25	; 0x3e
    562e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5630:	8d ad       	ldd	r24, Y+61	; 0x3d
    5632:	9e ad       	ldd	r25, Y+62	; 0x3e
    5634:	00 97       	sbiw	r24, 0x00	; 0
    5636:	69 f7       	brne	.-38     	; 0x5612 <main+0x2e7c>
    5638:	16 c0       	rjmp	.+44     	; 0x5666 <main+0x2ed0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    563a:	fe 01       	movw	r30, r28
    563c:	ff 96       	adiw	r30, 0x3f	; 63
    563e:	60 81       	ld	r22, Z
    5640:	71 81       	ldd	r23, Z+1	; 0x01
    5642:	82 81       	ldd	r24, Z+2	; 0x02
    5644:	93 81       	ldd	r25, Z+3	; 0x03
    5646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	9e af       	std	Y+62, r25	; 0x3e
    5650:	8d af       	std	Y+61, r24	; 0x3d
    5652:	8d ad       	ldd	r24, Y+61	; 0x3d
    5654:	9e ad       	ldd	r25, Y+62	; 0x3e
    5656:	9a af       	std	Y+58, r25	; 0x3a
    5658:	89 af       	std	Y+57, r24	; 0x39
    565a:	89 ad       	ldd	r24, Y+57	; 0x39
    565c:	9a ad       	ldd	r25, Y+58	; 0x3a
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	f1 f7       	brne	.-4      	; 0x565e <main+0x2ec8>
    5662:	9a af       	std	Y+58, r25	; 0x3a
    5664:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(500);
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    5666:	10 92 3a 01 	sts	0x013A, r1
    566a:	0f c0       	rjmp	.+30     	; 0x568a <main+0x2ef4>
							{
								UART_sendByte(pass_1[counter]);
    566c:	80 91 3a 01 	lds	r24, 0x013A
    5670:	88 2f       	mov	r24, r24
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	fc 01       	movw	r30, r24
    5676:	e0 5c       	subi	r30, 0xC0	; 192
    5678:	fe 4f       	sbci	r31, 0xFE	; 254
    567a:	80 81       	ld	r24, Z
    567c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							while(KEYPAD_getPressedKey() != 'e');
							_delay_ms(500);
							for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    5680:	80 91 3a 01 	lds	r24, 0x013A
    5684:	8f 5f       	subi	r24, 0xFF	; 255
    5686:	80 93 3a 01 	sts	0x013A, r24
    568a:	80 91 3a 01 	lds	r24, 0x013A
    568e:	85 30       	cpi	r24, 0x05	; 5
    5690:	68 f3       	brcs	.-38     	; 0x566c <main+0x2ed6>
							{
								UART_sendByte(pass_1[counter]);
							}
							pass_state = UART_recieveByte();
    5692:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    5696:	80 93 3b 01 	sts	0x013B, r24
							if(pass_state == CORRECT_PASS)
    569a:	80 91 3b 01 	lds	r24, 0x013B
    569e:	81 30       	cpi	r24, 0x01	; 1
    56a0:	09 f0       	breq	.+2      	; 0x56a4 <main+0x2f0e>
    56a2:	5d c2       	rjmp	.+1210   	; 0x5b5e <main+0x33c8>
							{
								update_fail = 0;
    56a4:	10 92 3e 01 	sts	0x013E, r1
								do
								{
									/* receive the password from the user*/
									UART_sendByte(PASS_LOADING);
    56a8:	81 e0       	ldi	r24, 0x01	; 1
    56aa:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
									LCD_clearScreen();
    56ae:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									LCD_displayString("Plz Enter Pass:");
    56b2:	80 e6       	ldi	r24, 0x60	; 96
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
									LCD_moveCursor(1, 0);
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	60 e0       	ldi	r22, 0x00	; 0
    56be:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_moveCursor>
									for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    56c2:	10 92 3a 01 	sts	0x013A, r1
    56c6:	84 c0       	rjmp	.+264    	; 0x57d0 <main+0x303a>
									{
										pass_1[counter] = KEYPAD_getPressedKey();
    56c8:	80 91 3a 01 	lds	r24, 0x013A
    56cc:	08 2f       	mov	r16, r24
    56ce:	10 e0       	ldi	r17, 0x00	; 0
    56d0:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    56d4:	f8 01       	movw	r30, r16
    56d6:	e0 5c       	subi	r30, 0xC0	; 192
    56d8:	fe 4f       	sbci	r31, 0xFE	; 254
    56da:	80 83       	st	Z, r24
										LCD_displayCharacter('*');
    56dc:	8a e2       	ldi	r24, 0x2A	; 42
    56de:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	aa ef       	ldi	r26, 0xFA	; 250
    56e8:	b3 e4       	ldi	r27, 0x43	; 67
    56ea:	8d ab       	std	Y+53, r24	; 0x35
    56ec:	9e ab       	std	Y+54, r25	; 0x36
    56ee:	af ab       	std	Y+55, r26	; 0x37
    56f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56f2:	6d a9       	ldd	r22, Y+53	; 0x35
    56f4:	7e a9       	ldd	r23, Y+54	; 0x36
    56f6:	8f a9       	ldd	r24, Y+55	; 0x37
    56f8:	98 ad       	ldd	r25, Y+56	; 0x38
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	4a ef       	ldi	r20, 0xFA	; 250
    5700:	54 e4       	ldi	r21, 0x44	; 68
    5702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	89 ab       	std	Y+49, r24	; 0x31
    570c:	9a ab       	std	Y+50, r25	; 0x32
    570e:	ab ab       	std	Y+51, r26	; 0x33
    5710:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5712:	69 a9       	ldd	r22, Y+49	; 0x31
    5714:	7a a9       	ldd	r23, Y+50	; 0x32
    5716:	8b a9       	ldd	r24, Y+51	; 0x33
    5718:	9c a9       	ldd	r25, Y+52	; 0x34
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	40 e8       	ldi	r20, 0x80	; 128
    5720:	5f e3       	ldi	r21, 0x3F	; 63
    5722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5726:	88 23       	and	r24, r24
    5728:	2c f4       	brge	.+10     	; 0x5734 <main+0x2f9e>
		__ticks = 1;
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	98 ab       	std	Y+48, r25	; 0x30
    5730:	8f a7       	std	Y+47, r24	; 0x2f
    5732:	3f c0       	rjmp	.+126    	; 0x57b2 <main+0x301c>
	else if (__tmp > 65535)
    5734:	69 a9       	ldd	r22, Y+49	; 0x31
    5736:	7a a9       	ldd	r23, Y+50	; 0x32
    5738:	8b a9       	ldd	r24, Y+51	; 0x33
    573a:	9c a9       	ldd	r25, Y+52	; 0x34
    573c:	20 e0       	ldi	r18, 0x00	; 0
    573e:	3f ef       	ldi	r19, 0xFF	; 255
    5740:	4f e7       	ldi	r20, 0x7F	; 127
    5742:	57 e4       	ldi	r21, 0x47	; 71
    5744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5748:	18 16       	cp	r1, r24
    574a:	4c f5       	brge	.+82     	; 0x579e <main+0x3008>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    574c:	6d a9       	ldd	r22, Y+53	; 0x35
    574e:	7e a9       	ldd	r23, Y+54	; 0x36
    5750:	8f a9       	ldd	r24, Y+55	; 0x37
    5752:	98 ad       	ldd	r25, Y+56	; 0x38
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	40 e2       	ldi	r20, 0x20	; 32
    575a:	51 e4       	ldi	r21, 0x41	; 65
    575c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	bc 01       	movw	r22, r24
    5766:	cd 01       	movw	r24, r26
    5768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    576c:	dc 01       	movw	r26, r24
    576e:	cb 01       	movw	r24, r22
    5770:	98 ab       	std	Y+48, r25	; 0x30
    5772:	8f a7       	std	Y+47, r24	; 0x2f
    5774:	0f c0       	rjmp	.+30     	; 0x5794 <main+0x2ffe>
    5776:	88 ec       	ldi	r24, 0xC8	; 200
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	9e a7       	std	Y+46, r25	; 0x2e
    577c:	8d a7       	std	Y+45, r24	; 0x2d
    577e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5780:	9e a5       	ldd	r25, Y+46	; 0x2e
    5782:	01 97       	sbiw	r24, 0x01	; 1
    5784:	f1 f7       	brne	.-4      	; 0x5782 <main+0x2fec>
    5786:	9e a7       	std	Y+46, r25	; 0x2e
    5788:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    578a:	8f a5       	ldd	r24, Y+47	; 0x2f
    578c:	98 a9       	ldd	r25, Y+48	; 0x30
    578e:	01 97       	sbiw	r24, 0x01	; 1
    5790:	98 ab       	std	Y+48, r25	; 0x30
    5792:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5794:	8f a5       	ldd	r24, Y+47	; 0x2f
    5796:	98 a9       	ldd	r25, Y+48	; 0x30
    5798:	00 97       	sbiw	r24, 0x00	; 0
    579a:	69 f7       	brne	.-38     	; 0x5776 <main+0x2fe0>
    579c:	14 c0       	rjmp	.+40     	; 0x57c6 <main+0x3030>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    579e:	69 a9       	ldd	r22, Y+49	; 0x31
    57a0:	7a a9       	ldd	r23, Y+50	; 0x32
    57a2:	8b a9       	ldd	r24, Y+51	; 0x33
    57a4:	9c a9       	ldd	r25, Y+52	; 0x34
    57a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	98 ab       	std	Y+48, r25	; 0x30
    57b0:	8f a7       	std	Y+47, r24	; 0x2f
    57b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    57b4:	98 a9       	ldd	r25, Y+48	; 0x30
    57b6:	9c a7       	std	Y+44, r25	; 0x2c
    57b8:	8b a7       	std	Y+43, r24	; 0x2b
    57ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    57bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	f1 f7       	brne	.-4      	; 0x57be <main+0x3028>
    57c2:	9c a7       	std	Y+44, r25	; 0x2c
    57c4:	8b a7       	std	Y+43, r24	; 0x2b
									/* receive the password from the user*/
									UART_sendByte(PASS_LOADING);
									LCD_clearScreen();
									LCD_displayString("Plz Enter Pass:");
									LCD_moveCursor(1, 0);
									for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    57c6:	80 91 3a 01 	lds	r24, 0x013A
    57ca:	8f 5f       	subi	r24, 0xFF	; 255
    57cc:	80 93 3a 01 	sts	0x013A, r24
    57d0:	80 91 3a 01 	lds	r24, 0x013A
    57d4:	85 30       	cpi	r24, 0x05	; 5
    57d6:	08 f4       	brcc	.+2      	; 0x57da <main+0x3044>
    57d8:	77 cf       	rjmp	.-274    	; 0x56c8 <main+0x2f32>
									{
										pass_1[counter] = KEYPAD_getPressedKey();
										LCD_displayCharacter('*');
										_delay_ms(500);
									}
									while(KEYPAD_getPressedKey() != 'e');
    57da:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    57de:	85 36       	cpi	r24, 0x65	; 101
    57e0:	e1 f7       	brne	.-8      	; 0x57da <main+0x3044>
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	aa ef       	ldi	r26, 0xFA	; 250
    57e8:	b3 e4       	ldi	r27, 0x43	; 67
    57ea:	8f a3       	std	Y+39, r24	; 0x27
    57ec:	98 a7       	std	Y+40, r25	; 0x28
    57ee:	a9 a7       	std	Y+41, r26	; 0x29
    57f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57f2:	6f a1       	ldd	r22, Y+39	; 0x27
    57f4:	78 a5       	ldd	r23, Y+40	; 0x28
    57f6:	89 a5       	ldd	r24, Y+41	; 0x29
    57f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	4a ef       	ldi	r20, 0xFA	; 250
    5800:	54 e4       	ldi	r21, 0x44	; 68
    5802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	8b a3       	std	Y+35, r24	; 0x23
    580c:	9c a3       	std	Y+36, r25	; 0x24
    580e:	ad a3       	std	Y+37, r26	; 0x25
    5810:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5812:	6b a1       	ldd	r22, Y+35	; 0x23
    5814:	7c a1       	ldd	r23, Y+36	; 0x24
    5816:	8d a1       	ldd	r24, Y+37	; 0x25
    5818:	9e a1       	ldd	r25, Y+38	; 0x26
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	40 e8       	ldi	r20, 0x80	; 128
    5820:	5f e3       	ldi	r21, 0x3F	; 63
    5822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5826:	88 23       	and	r24, r24
    5828:	2c f4       	brge	.+10     	; 0x5834 <main+0x309e>
		__ticks = 1;
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	9a a3       	std	Y+34, r25	; 0x22
    5830:	89 a3       	std	Y+33, r24	; 0x21
    5832:	3f c0       	rjmp	.+126    	; 0x58b2 <main+0x311c>
	else if (__tmp > 65535)
    5834:	6b a1       	ldd	r22, Y+35	; 0x23
    5836:	7c a1       	ldd	r23, Y+36	; 0x24
    5838:	8d a1       	ldd	r24, Y+37	; 0x25
    583a:	9e a1       	ldd	r25, Y+38	; 0x26
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	3f ef       	ldi	r19, 0xFF	; 255
    5840:	4f e7       	ldi	r20, 0x7F	; 127
    5842:	57 e4       	ldi	r21, 0x47	; 71
    5844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5848:	18 16       	cp	r1, r24
    584a:	4c f5       	brge	.+82     	; 0x589e <main+0x3108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    584c:	6f a1       	ldd	r22, Y+39	; 0x27
    584e:	78 a5       	ldd	r23, Y+40	; 0x28
    5850:	89 a5       	ldd	r24, Y+41	; 0x29
    5852:	9a a5       	ldd	r25, Y+42	; 0x2a
    5854:	20 e0       	ldi	r18, 0x00	; 0
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	40 e2       	ldi	r20, 0x20	; 32
    585a:	51 e4       	ldi	r21, 0x41	; 65
    585c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	bc 01       	movw	r22, r24
    5866:	cd 01       	movw	r24, r26
    5868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    586c:	dc 01       	movw	r26, r24
    586e:	cb 01       	movw	r24, r22
    5870:	9a a3       	std	Y+34, r25	; 0x22
    5872:	89 a3       	std	Y+33, r24	; 0x21
    5874:	0f c0       	rjmp	.+30     	; 0x5894 <main+0x30fe>
    5876:	88 ec       	ldi	r24, 0xC8	; 200
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	98 a3       	std	Y+32, r25	; 0x20
    587c:	8f 8f       	std	Y+31, r24	; 0x1f
    587e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5880:	98 a1       	ldd	r25, Y+32	; 0x20
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	f1 f7       	brne	.-4      	; 0x5882 <main+0x30ec>
    5886:	98 a3       	std	Y+32, r25	; 0x20
    5888:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    588a:	89 a1       	ldd	r24, Y+33	; 0x21
    588c:	9a a1       	ldd	r25, Y+34	; 0x22
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	9a a3       	std	Y+34, r25	; 0x22
    5892:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5894:	89 a1       	ldd	r24, Y+33	; 0x21
    5896:	9a a1       	ldd	r25, Y+34	; 0x22
    5898:	00 97       	sbiw	r24, 0x00	; 0
    589a:	69 f7       	brne	.-38     	; 0x5876 <main+0x30e0>
    589c:	14 c0       	rjmp	.+40     	; 0x58c6 <main+0x3130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    589e:	6b a1       	ldd	r22, Y+35	; 0x23
    58a0:	7c a1       	ldd	r23, Y+36	; 0x24
    58a2:	8d a1       	ldd	r24, Y+37	; 0x25
    58a4:	9e a1       	ldd	r25, Y+38	; 0x26
    58a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	9a a3       	std	Y+34, r25	; 0x22
    58b0:	89 a3       	std	Y+33, r24	; 0x21
    58b2:	89 a1       	ldd	r24, Y+33	; 0x21
    58b4:	9a a1       	ldd	r25, Y+34	; 0x22
    58b6:	9e 8f       	std	Y+30, r25	; 0x1e
    58b8:	8d 8f       	std	Y+29, r24	; 0x1d
    58ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    58bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    58be:	01 97       	sbiw	r24, 0x01	; 1
    58c0:	f1 f7       	brne	.-4      	; 0x58be <main+0x3128>
    58c2:	9e 8f       	std	Y+30, r25	; 0x1e
    58c4:	8d 8f       	std	Y+29, r24	; 0x1d
									_delay_ms(500);
									LCD_clearScreen();
    58c6:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									LCD_displayString("Plz re-enter the");
    58ca:	80 e7       	ldi	r24, 0x70	; 112
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_displayString>
									LCD_displayStringRowColumn(1, 0, "same pass: ");
    58d2:	21 e8       	ldi	r18, 0x81	; 129
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	81 e0       	ldi	r24, 0x01	; 1
    58d8:	60 e0       	ldi	r22, 0x00	; 0
    58da:	a9 01       	movw	r20, r18
    58dc:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    58e0:	10 92 3a 01 	sts	0x013A, r1
    58e4:	84 c0       	rjmp	.+264    	; 0x59ee <main+0x3258>
									{
										pass_2[counter] = KEYPAD_getPressedKey();
    58e6:	80 91 3a 01 	lds	r24, 0x013A
    58ea:	08 2f       	mov	r16, r24
    58ec:	10 e0       	ldi	r17, 0x00	; 0
    58ee:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    58f2:	f8 01       	movw	r30, r16
    58f4:	eb 5b       	subi	r30, 0xBB	; 187
    58f6:	fe 4f       	sbci	r31, 0xFE	; 254
    58f8:	80 83       	st	Z, r24
										LCD_displayCharacter('*');
    58fa:	8a e2       	ldi	r24, 0x2A	; 42
    58fc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_displayCharacter>
    5900:	80 e0       	ldi	r24, 0x00	; 0
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	aa ef       	ldi	r26, 0xFA	; 250
    5906:	b3 e4       	ldi	r27, 0x43	; 67
    5908:	89 8f       	std	Y+25, r24	; 0x19
    590a:	9a 8f       	std	Y+26, r25	; 0x1a
    590c:	ab 8f       	std	Y+27, r26	; 0x1b
    590e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5910:	69 8d       	ldd	r22, Y+25	; 0x19
    5912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	4a ef       	ldi	r20, 0xFA	; 250
    591e:	54 e4       	ldi	r21, 0x44	; 68
    5920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	8d 8b       	std	Y+21, r24	; 0x15
    592a:	9e 8b       	std	Y+22, r25	; 0x16
    592c:	af 8b       	std	Y+23, r26	; 0x17
    592e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5930:	6d 89       	ldd	r22, Y+21	; 0x15
    5932:	7e 89       	ldd	r23, Y+22	; 0x16
    5934:	8f 89       	ldd	r24, Y+23	; 0x17
    5936:	98 8d       	ldd	r25, Y+24	; 0x18
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	40 e8       	ldi	r20, 0x80	; 128
    593e:	5f e3       	ldi	r21, 0x3F	; 63
    5940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5944:	88 23       	and	r24, r24
    5946:	2c f4       	brge	.+10     	; 0x5952 <main+0x31bc>
		__ticks = 1;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	9c 8b       	std	Y+20, r25	; 0x14
    594e:	8b 8b       	std	Y+19, r24	; 0x13
    5950:	3f c0       	rjmp	.+126    	; 0x59d0 <main+0x323a>
	else if (__tmp > 65535)
    5952:	6d 89       	ldd	r22, Y+21	; 0x15
    5954:	7e 89       	ldd	r23, Y+22	; 0x16
    5956:	8f 89       	ldd	r24, Y+23	; 0x17
    5958:	98 8d       	ldd	r25, Y+24	; 0x18
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	3f ef       	ldi	r19, 0xFF	; 255
    595e:	4f e7       	ldi	r20, 0x7F	; 127
    5960:	57 e4       	ldi	r21, 0x47	; 71
    5962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5966:	18 16       	cp	r1, r24
    5968:	4c f5       	brge	.+82     	; 0x59bc <main+0x3226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    596a:	69 8d       	ldd	r22, Y+25	; 0x19
    596c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    596e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 e2       	ldi	r20, 0x20	; 32
    5978:	51 e4       	ldi	r21, 0x41	; 65
    597a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	bc 01       	movw	r22, r24
    5984:	cd 01       	movw	r24, r26
    5986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	9c 8b       	std	Y+20, r25	; 0x14
    5990:	8b 8b       	std	Y+19, r24	; 0x13
    5992:	0f c0       	rjmp	.+30     	; 0x59b2 <main+0x321c>
    5994:	88 ec       	ldi	r24, 0xC8	; 200
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	9a 8b       	std	Y+18, r25	; 0x12
    599a:	89 8b       	std	Y+17, r24	; 0x11
    599c:	89 89       	ldd	r24, Y+17	; 0x11
    599e:	9a 89       	ldd	r25, Y+18	; 0x12
    59a0:	01 97       	sbiw	r24, 0x01	; 1
    59a2:	f1 f7       	brne	.-4      	; 0x59a0 <main+0x320a>
    59a4:	9a 8b       	std	Y+18, r25	; 0x12
    59a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59a8:	8b 89       	ldd	r24, Y+19	; 0x13
    59aa:	9c 89       	ldd	r25, Y+20	; 0x14
    59ac:	01 97       	sbiw	r24, 0x01	; 1
    59ae:	9c 8b       	std	Y+20, r25	; 0x14
    59b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b2:	8b 89       	ldd	r24, Y+19	; 0x13
    59b4:	9c 89       	ldd	r25, Y+20	; 0x14
    59b6:	00 97       	sbiw	r24, 0x00	; 0
    59b8:	69 f7       	brne	.-38     	; 0x5994 <main+0x31fe>
    59ba:	14 c0       	rjmp	.+40     	; 0x59e4 <main+0x324e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59bc:	6d 89       	ldd	r22, Y+21	; 0x15
    59be:	7e 89       	ldd	r23, Y+22	; 0x16
    59c0:	8f 89       	ldd	r24, Y+23	; 0x17
    59c2:	98 8d       	ldd	r25, Y+24	; 0x18
    59c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	9c 8b       	std	Y+20, r25	; 0x14
    59ce:	8b 8b       	std	Y+19, r24	; 0x13
    59d0:	8b 89       	ldd	r24, Y+19	; 0x13
    59d2:	9c 89       	ldd	r25, Y+20	; 0x14
    59d4:	98 8b       	std	Y+16, r25	; 0x10
    59d6:	8f 87       	std	Y+15, r24	; 0x0f
    59d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    59da:	98 89       	ldd	r25, Y+16	; 0x10
    59dc:	01 97       	sbiw	r24, 0x01	; 1
    59de:	f1 f7       	brne	.-4      	; 0x59dc <main+0x3246>
    59e0:	98 8b       	std	Y+16, r25	; 0x10
    59e2:	8f 87       	std	Y+15, r24	; 0x0f
									while(KEYPAD_getPressedKey() != 'e');
									_delay_ms(500);
									LCD_clearScreen();
									LCD_displayString("Plz re-enter the");
									LCD_displayStringRowColumn(1, 0, "same pass: ");
									for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    59e4:	80 91 3a 01 	lds	r24, 0x013A
    59e8:	8f 5f       	subi	r24, 0xFF	; 255
    59ea:	80 93 3a 01 	sts	0x013A, r24
    59ee:	80 91 3a 01 	lds	r24, 0x013A
    59f2:	85 30       	cpi	r24, 0x05	; 5
    59f4:	08 f4       	brcc	.+2      	; 0x59f8 <main+0x3262>
    59f6:	77 cf       	rjmp	.-274    	; 0x58e6 <main+0x3150>
									{
										pass_2[counter] = KEYPAD_getPressedKey();
										LCD_displayCharacter('*');
										_delay_ms(500);
									}
									while(KEYPAD_getPressedKey() != 'e');
    59f8:	0e 94 92 12 	call	0x2524	; 0x2524 <KEYPAD_getPressedKey>
    59fc:	85 36       	cpi	r24, 0x65	; 101
    59fe:	e1 f7       	brne	.-8      	; 0x59f8 <main+0x3262>
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	aa ef       	ldi	r26, 0xFA	; 250
    5a06:	b3 e4       	ldi	r27, 0x43	; 67
    5a08:	8b 87       	std	Y+11, r24	; 0x0b
    5a0a:	9c 87       	std	Y+12, r25	; 0x0c
    5a0c:	ad 87       	std	Y+13, r26	; 0x0d
    5a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	4a ef       	ldi	r20, 0xFA	; 250
    5a1e:	54 e4       	ldi	r21, 0x44	; 68
    5a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	8f 83       	std	Y+7, r24	; 0x07
    5a2a:	98 87       	std	Y+8, r25	; 0x08
    5a2c:	a9 87       	std	Y+9, r26	; 0x09
    5a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a30:	6f 81       	ldd	r22, Y+7	; 0x07
    5a32:	78 85       	ldd	r23, Y+8	; 0x08
    5a34:	89 85       	ldd	r24, Y+9	; 0x09
    5a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	40 e8       	ldi	r20, 0x80	; 128
    5a3e:	5f e3       	ldi	r21, 0x3F	; 63
    5a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a44:	88 23       	and	r24, r24
    5a46:	2c f4       	brge	.+10     	; 0x5a52 <main+0x32bc>
		__ticks = 1;
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	9e 83       	std	Y+6, r25	; 0x06
    5a4e:	8d 83       	std	Y+5, r24	; 0x05
    5a50:	3f c0       	rjmp	.+126    	; 0x5ad0 <main+0x333a>
	else if (__tmp > 65535)
    5a52:	6f 81       	ldd	r22, Y+7	; 0x07
    5a54:	78 85       	ldd	r23, Y+8	; 0x08
    5a56:	89 85       	ldd	r24, Y+9	; 0x09
    5a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	3f ef       	ldi	r19, 0xFF	; 255
    5a5e:	4f e7       	ldi	r20, 0x7F	; 127
    5a60:	57 e4       	ldi	r21, 0x47	; 71
    5a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a66:	18 16       	cp	r1, r24
    5a68:	4c f5       	brge	.+82     	; 0x5abc <main+0x3326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	40 e2       	ldi	r20, 0x20	; 32
    5a78:	51 e4       	ldi	r21, 0x41	; 65
    5a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7e:	dc 01       	movw	r26, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	bc 01       	movw	r22, r24
    5a84:	cd 01       	movw	r24, r26
    5a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	9e 83       	std	Y+6, r25	; 0x06
    5a90:	8d 83       	std	Y+5, r24	; 0x05
    5a92:	0f c0       	rjmp	.+30     	; 0x5ab2 <main+0x331c>
    5a94:	88 ec       	ldi	r24, 0xC8	; 200
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	9c 83       	std	Y+4, r25	; 0x04
    5a9a:	8b 83       	std	Y+3, r24	; 0x03
    5a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    5aa0:	01 97       	sbiw	r24, 0x01	; 1
    5aa2:	f1 f7       	brne	.-4      	; 0x5aa0 <main+0x330a>
    5aa4:	9c 83       	std	Y+4, r25	; 0x04
    5aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    5aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    5aac:	01 97       	sbiw	r24, 0x01	; 1
    5aae:	9e 83       	std	Y+6, r25	; 0x06
    5ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab6:	00 97       	sbiw	r24, 0x00	; 0
    5ab8:	69 f7       	brne	.-38     	; 0x5a94 <main+0x32fe>
    5aba:	14 c0       	rjmp	.+40     	; 0x5ae4 <main+0x334e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5abc:	6f 81       	ldd	r22, Y+7	; 0x07
    5abe:	78 85       	ldd	r23, Y+8	; 0x08
    5ac0:	89 85       	ldd	r24, Y+9	; 0x09
    5ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	9e 83       	std	Y+6, r25	; 0x06
    5ace:	8d 83       	std	Y+5, r24	; 0x05
    5ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ad4:	9a 83       	std	Y+2, r25	; 0x02
    5ad6:	89 83       	std	Y+1, r24	; 0x01
    5ad8:	89 81       	ldd	r24, Y+1	; 0x01
    5ada:	9a 81       	ldd	r25, Y+2	; 0x02
    5adc:	01 97       	sbiw	r24, 0x01	; 1
    5ade:	f1 f7       	brne	.-4      	; 0x5adc <main+0x3346>
    5ae0:	9a 83       	std	Y+2, r25	; 0x02
    5ae2:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(500);
									/* send the two passwords to the control ecu */
									for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    5ae4:	10 92 3a 01 	sts	0x013A, r1
    5ae8:	0f c0       	rjmp	.+30     	; 0x5b08 <main+0x3372>
									{
										UART_sendByte(pass_1[counter]);
    5aea:	80 91 3a 01 	lds	r24, 0x013A
    5aee:	88 2f       	mov	r24, r24
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	fc 01       	movw	r30, r24
    5af4:	e0 5c       	subi	r30, 0xC0	; 192
    5af6:	fe 4f       	sbci	r31, 0xFE	; 254
    5af8:	80 81       	ld	r24, Z
    5afa:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
										_delay_ms(500);
									}
									while(KEYPAD_getPressedKey() != 'e');
									_delay_ms(500);
									/* send the two passwords to the control ecu */
									for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    5afe:	80 91 3a 01 	lds	r24, 0x013A
    5b02:	8f 5f       	subi	r24, 0xFF	; 255
    5b04:	80 93 3a 01 	sts	0x013A, r24
    5b08:	80 91 3a 01 	lds	r24, 0x013A
    5b0c:	85 30       	cpi	r24, 0x05	; 5
    5b0e:	68 f3       	brcs	.-38     	; 0x5aea <main+0x3354>
									{
										UART_sendByte(pass_1[counter]);
									}
									for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    5b10:	10 92 3a 01 	sts	0x013A, r1
    5b14:	0f c0       	rjmp	.+30     	; 0x5b34 <main+0x339e>
									{
										UART_sendByte(pass_2[counter]);
    5b16:	80 91 3a 01 	lds	r24, 0x013A
    5b1a:	88 2f       	mov	r24, r24
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	fc 01       	movw	r30, r24
    5b20:	eb 5b       	subi	r30, 0xBB	; 187
    5b22:	fe 4f       	sbci	r31, 0xFE	; 254
    5b24:	80 81       	ld	r24, Z
    5b26:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
									/* send the two passwords to the control ecu */
									for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
									{
										UART_sendByte(pass_1[counter]);
									}
									for(counter= 0; counter < PASSWORD_LENGTH; ++counter)
    5b2a:	80 91 3a 01 	lds	r24, 0x013A
    5b2e:	8f 5f       	subi	r24, 0xFF	; 255
    5b30:	80 93 3a 01 	sts	0x013A, r24
    5b34:	80 91 3a 01 	lds	r24, 0x013A
    5b38:	85 30       	cpi	r24, 0x05	; 5
    5b3a:	68 f3       	brcs	.-38     	; 0x5b16 <main+0x3380>
									{
										UART_sendByte(pass_2[counter]);
									}
									pass_state = UART_recieveByte();
    5b3c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_recieveByte>
    5b40:	80 93 3b 01 	sts	0x013B, r24
									if(pass_state == CORRECT_PASS)
    5b44:	80 91 3b 01 	lds	r24, 0x013B
    5b48:	81 30       	cpi	r24, 0x01	; 1
    5b4a:	11 f4       	brne	.+4      	; 0x5b50 <main+0x33ba>
									{
										LCD_clearScreen();
    5b4c:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									}
								}while(pass_state != CORRECT_PASS);
    5b50:	80 91 3b 01 	lds	r24, 0x013B
    5b54:	81 30       	cpi	r24, 0x01	; 1
    5b56:	09 f0       	breq	.+2      	; 0x5b5a <main+0x33c4>
    5b58:	a7 cd       	rjmp	.-1202   	; 0x56a8 <main+0x2f12>
    5b5a:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
							}
							else if(pass_state == WRONG_PASS)
    5b5e:	80 91 3b 01 	lds	r24, 0x013B
    5b62:	88 23       	and	r24, r24
    5b64:	11 f0       	breq	.+4      	; 0x5b6a <main+0x33d4>
    5b66:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
							{
								++update_fail;
    5b6a:	80 91 3e 01 	lds	r24, 0x013E
    5b6e:	8f 5f       	subi	r24, 0xFF	; 255
    5b70:	80 93 3e 01 	sts	0x013E, r24
								if(update_fail == 3)
    5b74:	80 91 3e 01 	lds	r24, 0x013E
    5b78:	83 30       	cpi	r24, 0x03	; 3
    5b7a:	e9 f4       	brne	.+58     	; 0x5bb6 <main+0x3420>
								{
									UART_sendByte(ALARM_ON);
    5b7c:	84 e0       	ldi	r24, 0x04	; 4
    5b7e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <UART_sendByte>
									LCD_clearScreen();
    5b82:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_clearScreen>
									LCD_displayStringRowColumn(0, 1, "System LOCKED");
    5b86:	21 e0       	ldi	r18, 0x01	; 1
    5b88:	31 e0       	ldi	r19, 0x01	; 1
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	61 e0       	ldi	r22, 0x01	; 1
    5b8e:	a9 01       	movw	r20, r18
    5b90:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
								    LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    5b94:	2f e0       	ldi	r18, 0x0F	; 15
    5b96:	31 e0       	ldi	r19, 0x01	; 1
    5b98:	81 e0       	ldi	r24, 0x01	; 1
    5b9a:	60 e0       	ldi	r22, 0x00	; 0
    5b9c:	a9 01       	movw	r20, r18
    5b9e:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_displayStringRowColumn>
									seconds = 0;
    5ba2:	10 92 4a 01 	sts	0x014A, r1
									while(seconds < 60);
    5ba6:	80 91 4a 01 	lds	r24, 0x014A
    5baa:	8c 33       	cpi	r24, 0x3C	; 60
    5bac:	e0 f3       	brcs	.-8      	; 0x5ba6 <main+0x3410>
									enter_fail = 0;
    5bae:	10 92 3d 01 	sts	0x013D, r1
    5bb2:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <main+0x844>
    5bb6:	80 e0       	ldi	r24, 0x00	; 0
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
		}
	}
}
    5bba:	c2 55       	subi	r28, 0x52	; 82
    5bbc:	de 4f       	sbci	r29, 0xFE	; 254
    5bbe:	0f b6       	in	r0, 0x3f	; 63
    5bc0:	f8 94       	cli
    5bc2:	de bf       	out	0x3e, r29	; 62
    5bc4:	0f be       	out	0x3f, r0	; 63
    5bc6:	cd bf       	out	0x3d, r28	; 61
    5bc8:	cf 91       	pop	r28
    5bca:	df 91       	pop	r29
    5bcc:	1f 91       	pop	r17
    5bce:	0f 91       	pop	r16
    5bd0:	08 95       	ret

00005bd2 <timer_handler>:



/**************************************************************************/
void timer_handler(void)
{
    5bd2:	df 93       	push	r29
    5bd4:	cf 93       	push	r28
    5bd6:	cd b7       	in	r28, 0x3d	; 61
    5bd8:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    5bda:	80 91 4a 01 	lds	r24, 0x014A
    5bde:	8f 5f       	subi	r24, 0xFF	; 255
    5be0:	80 93 4a 01 	sts	0x014A, r24
}
    5be4:	cf 91       	pop	r28
    5be6:	df 91       	pop	r29
    5be8:	08 95       	ret

00005bea <__udivmodsi4>:
    5bea:	a1 e2       	ldi	r26, 0x21	; 33
    5bec:	1a 2e       	mov	r1, r26
    5bee:	aa 1b       	sub	r26, r26
    5bf0:	bb 1b       	sub	r27, r27
    5bf2:	fd 01       	movw	r30, r26
    5bf4:	0d c0       	rjmp	.+26     	; 0x5c10 <__udivmodsi4_ep>

00005bf6 <__udivmodsi4_loop>:
    5bf6:	aa 1f       	adc	r26, r26
    5bf8:	bb 1f       	adc	r27, r27
    5bfa:	ee 1f       	adc	r30, r30
    5bfc:	ff 1f       	adc	r31, r31
    5bfe:	a2 17       	cp	r26, r18
    5c00:	b3 07       	cpc	r27, r19
    5c02:	e4 07       	cpc	r30, r20
    5c04:	f5 07       	cpc	r31, r21
    5c06:	20 f0       	brcs	.+8      	; 0x5c10 <__udivmodsi4_ep>
    5c08:	a2 1b       	sub	r26, r18
    5c0a:	b3 0b       	sbc	r27, r19
    5c0c:	e4 0b       	sbc	r30, r20
    5c0e:	f5 0b       	sbc	r31, r21

00005c10 <__udivmodsi4_ep>:
    5c10:	66 1f       	adc	r22, r22
    5c12:	77 1f       	adc	r23, r23
    5c14:	88 1f       	adc	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	1a 94       	dec	r1
    5c1a:	69 f7       	brne	.-38     	; 0x5bf6 <__udivmodsi4_loop>
    5c1c:	60 95       	com	r22
    5c1e:	70 95       	com	r23
    5c20:	80 95       	com	r24
    5c22:	90 95       	com	r25
    5c24:	9b 01       	movw	r18, r22
    5c26:	ac 01       	movw	r20, r24
    5c28:	bd 01       	movw	r22, r26
    5c2a:	cf 01       	movw	r24, r30
    5c2c:	08 95       	ret

00005c2e <__prologue_saves__>:
    5c2e:	2f 92       	push	r2
    5c30:	3f 92       	push	r3
    5c32:	4f 92       	push	r4
    5c34:	5f 92       	push	r5
    5c36:	6f 92       	push	r6
    5c38:	7f 92       	push	r7
    5c3a:	8f 92       	push	r8
    5c3c:	9f 92       	push	r9
    5c3e:	af 92       	push	r10
    5c40:	bf 92       	push	r11
    5c42:	cf 92       	push	r12
    5c44:	df 92       	push	r13
    5c46:	ef 92       	push	r14
    5c48:	ff 92       	push	r15
    5c4a:	0f 93       	push	r16
    5c4c:	1f 93       	push	r17
    5c4e:	cf 93       	push	r28
    5c50:	df 93       	push	r29
    5c52:	cd b7       	in	r28, 0x3d	; 61
    5c54:	de b7       	in	r29, 0x3e	; 62
    5c56:	ca 1b       	sub	r28, r26
    5c58:	db 0b       	sbc	r29, r27
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	09 94       	ijmp

00005c66 <__epilogue_restores__>:
    5c66:	2a 88       	ldd	r2, Y+18	; 0x12
    5c68:	39 88       	ldd	r3, Y+17	; 0x11
    5c6a:	48 88       	ldd	r4, Y+16	; 0x10
    5c6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c70:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c72:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c74:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c76:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c78:	b9 84       	ldd	r11, Y+9	; 0x09
    5c7a:	c8 84       	ldd	r12, Y+8	; 0x08
    5c7c:	df 80       	ldd	r13, Y+7	; 0x07
    5c7e:	ee 80       	ldd	r14, Y+6	; 0x06
    5c80:	fd 80       	ldd	r15, Y+5	; 0x05
    5c82:	0c 81       	ldd	r16, Y+4	; 0x04
    5c84:	1b 81       	ldd	r17, Y+3	; 0x03
    5c86:	aa 81       	ldd	r26, Y+2	; 0x02
    5c88:	b9 81       	ldd	r27, Y+1	; 0x01
    5c8a:	ce 0f       	add	r28, r30
    5c8c:	d1 1d       	adc	r29, r1
    5c8e:	0f b6       	in	r0, 0x3f	; 63
    5c90:	f8 94       	cli
    5c92:	de bf       	out	0x3e, r29	; 62
    5c94:	0f be       	out	0x3f, r0	; 63
    5c96:	cd bf       	out	0x3d, r28	; 61
    5c98:	ed 01       	movw	r28, r26
    5c9a:	08 95       	ret

00005c9c <itoa>:
    5c9c:	fb 01       	movw	r30, r22
    5c9e:	9f 01       	movw	r18, r30
    5ca0:	e8 94       	clt
    5ca2:	42 30       	cpi	r20, 0x02	; 2
    5ca4:	c4 f0       	brlt	.+48     	; 0x5cd6 <itoa+0x3a>
    5ca6:	45 32       	cpi	r20, 0x25	; 37
    5ca8:	b4 f4       	brge	.+44     	; 0x5cd6 <itoa+0x3a>
    5caa:	4a 30       	cpi	r20, 0x0A	; 10
    5cac:	29 f4       	brne	.+10     	; 0x5cb8 <itoa+0x1c>
    5cae:	97 fb       	bst	r25, 7
    5cb0:	1e f4       	brtc	.+6      	; 0x5cb8 <itoa+0x1c>
    5cb2:	90 95       	com	r25
    5cb4:	81 95       	neg	r24
    5cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb8:	64 2f       	mov	r22, r20
    5cba:	77 27       	eor	r23, r23
    5cbc:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__udivmodhi4>
    5cc0:	80 5d       	subi	r24, 0xD0	; 208
    5cc2:	8a 33       	cpi	r24, 0x3A	; 58
    5cc4:	0c f0       	brlt	.+2      	; 0x5cc8 <itoa+0x2c>
    5cc6:	89 5d       	subi	r24, 0xD9	; 217
    5cc8:	81 93       	st	Z+, r24
    5cca:	cb 01       	movw	r24, r22
    5ccc:	00 97       	sbiw	r24, 0x00	; 0
    5cce:	a1 f7       	brne	.-24     	; 0x5cb8 <itoa+0x1c>
    5cd0:	16 f4       	brtc	.+4      	; 0x5cd6 <itoa+0x3a>
    5cd2:	5d e2       	ldi	r21, 0x2D	; 45
    5cd4:	51 93       	st	Z+, r21
    5cd6:	10 82       	st	Z, r1
    5cd8:	c9 01       	movw	r24, r18
    5cda:	0c 94 6f 2e 	jmp	0x5cde	; 0x5cde <strrev>

00005cde <strrev>:
    5cde:	dc 01       	movw	r26, r24
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	67 2f       	mov	r22, r23
    5ce4:	71 91       	ld	r23, Z+
    5ce6:	77 23       	and	r23, r23
    5ce8:	e1 f7       	brne	.-8      	; 0x5ce2 <strrev+0x4>
    5cea:	32 97       	sbiw	r30, 0x02	; 2
    5cec:	04 c0       	rjmp	.+8      	; 0x5cf6 <strrev+0x18>
    5cee:	7c 91       	ld	r23, X
    5cf0:	6d 93       	st	X+, r22
    5cf2:	70 83       	st	Z, r23
    5cf4:	62 91       	ld	r22, -Z
    5cf6:	ae 17       	cp	r26, r30
    5cf8:	bf 07       	cpc	r27, r31
    5cfa:	c8 f3       	brcs	.-14     	; 0x5cee <strrev+0x10>
    5cfc:	08 95       	ret

00005cfe <__udivmodhi4>:
    5cfe:	aa 1b       	sub	r26, r26
    5d00:	bb 1b       	sub	r27, r27
    5d02:	51 e1       	ldi	r21, 0x11	; 17
    5d04:	07 c0       	rjmp	.+14     	; 0x5d14 <__udivmodhi4_ep>

00005d06 <__udivmodhi4_loop>:
    5d06:	aa 1f       	adc	r26, r26
    5d08:	bb 1f       	adc	r27, r27
    5d0a:	a6 17       	cp	r26, r22
    5d0c:	b7 07       	cpc	r27, r23
    5d0e:	10 f0       	brcs	.+4      	; 0x5d14 <__udivmodhi4_ep>
    5d10:	a6 1b       	sub	r26, r22
    5d12:	b7 0b       	sbc	r27, r23

00005d14 <__udivmodhi4_ep>:
    5d14:	88 1f       	adc	r24, r24
    5d16:	99 1f       	adc	r25, r25
    5d18:	5a 95       	dec	r21
    5d1a:	a9 f7       	brne	.-22     	; 0x5d06 <__udivmodhi4_loop>
    5d1c:	80 95       	com	r24
    5d1e:	90 95       	com	r25
    5d20:	bc 01       	movw	r22, r24
    5d22:	cd 01       	movw	r24, r26
    5d24:	08 95       	ret

00005d26 <_exit>:
    5d26:	f8 94       	cli

00005d28 <__stop_program>:
    5d28:	ff cf       	rjmp	.-2      	; 0x5d28 <__stop_program>
