
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000039fc  00003a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800180  00800180  00003bb0  2**0
                  ALLOC
  3 .stab         0000303c  00000000  00000000  00003bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a52  00000000  00000000  00006bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000863e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  000087be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000258f  00000000  00000000  0000898e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c4  00000000  00000000  0000af1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  0000c0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000336  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  0000d692  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000edcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__vector_4>
      14:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_9>
      28:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_10>
      2c:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <main>
      8a:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 92 1c 	call	0x3924	; 0x3924 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a0 e6       	ldi	r26, 0x60	; 96
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__epilogue_restores__>

0000141a <__gtsf2>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	e8 2e       	mov	r14, r24
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	40 f0       	brcs	.+16     	; 0x1470 <__gtsf2+0x56>
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__gtsf2+0x56>
    1466:	c7 01       	movw	r24, r14
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__gtsf2+0x58>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	68 96       	adiw	r28, 0x18	; 24
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x18>

0000147a <__gesf2>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x18>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	e8 2e       	mov	r14, r24
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__gesf2+0x56>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__gesf2+0x56>
    14c6:	c7 01       	movw	r24, r14
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__gesf2+0x58>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	68 96       	adiw	r28, 0x18	; 24
    14d4:	e6 e0       	ldi	r30, 0x06	; 6
    14d6:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x18>

000014da <__ltsf2>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__ltsf2+0x56>
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	28 f0       	brcs	.+10     	; 0x1530 <__ltsf2+0x56>
    1526:	c7 01       	movw	r24, r14
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__ltsf2+0x58>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	e6 e0       	ldi	r30, 0x06	; 6
    1536:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x18>

0000153a <__fixsfsi>:
    153a:	ac e0       	ldi	r26, 0x0C	; 12
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__prologue_saves__+0x20>
    1546:	69 83       	std	Y+1, r22	; 0x01
    1548:	7a 83       	std	Y+2, r23	; 0x02
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	61 f1       	breq	.+88     	; 0x15ba <__fixsfsi+0x80>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	50 f1       	brcs	.+84     	; 0x15ba <__fixsfsi+0x80>
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f4       	brne	.+8      	; 0x1572 <__fixsfsi+0x38>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	88 23       	and	r24, r24
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__fixsfsi+0x8a>
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <__fixsfsi+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	37 fd       	sbrc	r19, 7
    1578:	20 c0       	rjmp	.+64     	; 0x15ba <__fixsfsi+0x80>
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	2f 31       	cpi	r18, 0x1F	; 31
    157e:	31 05       	cpc	r19, r1
    1580:	1c f0       	brlt	.+6      	; 0x1588 <__fixsfsi+0x4e>
    1582:	66 23       	and	r22, r22
    1584:	f9 f0       	breq	.+62     	; 0x15c4 <__fixsfsi+0x8a>
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <__fixsfsi+0x94>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	4b 85       	ldd	r20, Y+11	; 0x0b
    1596:	5c 85       	ldd	r21, Y+12	; 0x0c
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__fixsfsi+0x68>
    159a:	56 95       	lsr	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fixsfsi+0x60>
    15a6:	66 23       	and	r22, r22
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <__fixsfsi+0x9c>
    15aa:	50 95       	com	r21
    15ac:	40 95       	com	r20
    15ae:	30 95       	com	r19
    15b0:	21 95       	neg	r18
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	4f 4f       	sbci	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__fixsfsi+0x9c>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__fixsfsi+0x9c>
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f ef       	ldi	r20, 0xFF	; 255
    15ca:	5f e7       	ldi	r21, 0x7F	; 127
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fixsfsi+0x9c>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e8       	ldi	r21, 0x80	; 128
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	2c 96       	adiw	r28, 0x0c	; 12
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <__epilogue_restores__+0x20>

000015e2 <__pack_f>:
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 80       	ldd	r14, Z+4	; 0x04
    15f0:	f5 80       	ldd	r15, Z+5	; 0x05
    15f2:	06 81       	ldd	r16, Z+6	; 0x06
    15f4:	17 81       	ldd	r17, Z+7	; 0x07
    15f6:	d1 80       	ldd	r13, Z+1	; 0x01
    15f8:	80 81       	ld	r24, Z
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	48 f4       	brcc	.+18     	; 0x1610 <__pack_f+0x2e>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e1       	ldi	r26, 0x10	; 16
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <__pack_f+0x178>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	09 f4       	brne	.+2      	; 0x1616 <__pack_f+0x34>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <__pack_f+0x172>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	21 f4       	brne	.+8      	; 0x1622 <__pack_f+0x40>
    161a:	ee 24       	eor	r14, r14
    161c:	ff 24       	eor	r15, r15
    161e:	87 01       	movw	r16, r14
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__pack_f+0x4a>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 05       	cpc	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__pack_f+0x50>
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	96 c0       	rjmp	.+300    	; 0x175e <__pack_f+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	62 38       	cpi	r22, 0x82	; 130
    163a:	79 07       	cpc	r23, r25
    163c:	0c f0       	brlt	.+2      	; 0x1640 <__pack_f+0x5e>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <__pack_f+0x114>
    1640:	22 e8       	ldi	r18, 0x82	; 130
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	26 1b       	sub	r18, r22
    1646:	37 0b       	sbc	r19, r23
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	31 05       	cpc	r19, r1
    164c:	2c f0       	brlt	.+10     	; 0x1658 <__pack_f+0x76>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <__pack_f+0xca>
    1658:	b8 01       	movw	r22, r16
    165a:	a7 01       	movw	r20, r14
    165c:	02 2e       	mov	r0, r18
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x86>
    1660:	76 95       	lsr	r23
    1662:	67 95       	ror	r22
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__pack_f+0x7e>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__pack_f+0x9c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	2a 95       	dec	r18
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__pack_f+0x94>
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	8e 21       	and	r24, r14
    168a:	9f 21       	and	r25, r15
    168c:	a0 23       	and	r26, r16
    168e:	b1 23       	and	r27, r17
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <__pack_f+0xbe>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	9a 01       	movw	r18, r20
    16a2:	ab 01       	movw	r20, r22
    16a4:	28 2b       	or	r18, r24
    16a6:	39 2b       	or	r19, r25
    16a8:	4a 2b       	or	r20, r26
    16aa:	5b 2b       	or	r21, r27
    16ac:	da 01       	movw	r26, r20
    16ae:	c9 01       	movw	r24, r18
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	a0 70       	andi	r26, 0x00	; 0
    16b6:	b0 70       	andi	r27, 0x00	; 0
    16b8:	80 34       	cpi	r24, 0x40	; 64
    16ba:	91 05       	cpc	r25, r1
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <__pack_f+0xee>
    16c2:	27 ff       	sbrs	r18, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__pack_f+0xf6>
    16c6:	20 5c       	subi	r18, 0xC0	; 192
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	4f 4f       	sbci	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__pack_f+0xf6>
    16d0:	21 5c       	subi	r18, 0xC1	; 193
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 30       	cpi	r18, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	3a 07       	cpc	r19, r26
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	4a 07       	cpc	r20, r26
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	5a 07       	cpc	r21, r26
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__pack_f+0x10e>
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <__pack_f+0x162>
    16f6:	60 38       	cpi	r22, 0x80	; 128
    16f8:	71 05       	cpc	r23, r1
    16fa:	64 f5       	brge	.+88     	; 0x1754 <__pack_f+0x172>
    16fc:	fb 01       	movw	r30, r22
    16fe:	e1 58       	subi	r30, 0x81	; 129
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	c7 01       	movw	r24, r14
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	a0 70       	andi	r26, 0x00	; 0
    170c:	b0 70       	andi	r27, 0x00	; 0
    170e:	80 34       	cpi	r24, 0x40	; 64
    1710:	91 05       	cpc	r25, r1
    1712:	a1 05       	cpc	r26, r1
    1714:	b1 05       	cpc	r27, r1
    1716:	39 f4       	brne	.+14     	; 0x1726 <__pack_f+0x144>
    1718:	e7 fe       	sbrs	r14, 7
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__pack_f+0x154>
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x14c>
    1726:	8f e3       	ldi	r24, 0x3F	; 63
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 0e       	add	r14, r24
    1730:	f9 1e       	adc	r15, r25
    1732:	0a 1f       	adc	r16, r26
    1734:	1b 1f       	adc	r17, r27
    1736:	17 ff       	sbrs	r17, 7
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__pack_f+0x162>
    173a:	16 95       	lsr	r17
    173c:	07 95       	ror	r16
    173e:	f7 94       	ror	r15
    1740:	e7 94       	ror	r14
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__pack_f+0x164>
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__pack_f+0x17c>
    1754:	ee 24       	eor	r14, r14
    1756:	ff 24       	eor	r15, r15
    1758:	87 01       	movw	r16, r14
    175a:	ef ef       	ldi	r30, 0xFF	; 255
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	6e 2f       	mov	r22, r30
    1760:	67 95       	ror	r22
    1762:	66 27       	eor	r22, r22
    1764:	67 95       	ror	r22
    1766:	90 2f       	mov	r25, r16
    1768:	9f 77       	andi	r25, 0x7F	; 127
    176a:	d7 94       	ror	r13
    176c:	dd 24       	eor	r13, r13
    176e:	d7 94       	ror	r13
    1770:	8e 2f       	mov	r24, r30
    1772:	86 95       	lsr	r24
    1774:	49 2f       	mov	r20, r25
    1776:	46 2b       	or	r20, r22
    1778:	58 2f       	mov	r21, r24
    177a:	5d 29       	or	r21, r13
    177c:	b7 01       	movw	r22, r14
    177e:	ca 01       	movw	r24, r20
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	08 95       	ret

0000178c <__unpack_f>:
    178c:	fc 01       	movw	r30, r24
    178e:	db 01       	movw	r26, r22
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	62 2f       	mov	r22, r18
    1798:	6f 77       	andi	r22, 0x7F	; 127
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	22 1f       	adc	r18, r18
    179e:	22 27       	eor	r18, r18
    17a0:	22 1f       	adc	r18, r18
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	89 2f       	mov	r24, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	99 1f       	adc	r25, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	99 1f       	adc	r25, r25
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	a9 f5       	brne	.+106    	; 0x182a <__unpack_f+0x9e>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__unpack_f+0x42>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <__unpack_f+0xb0>
    17ce:	82 e8       	ldi	r24, 0x82	; 130
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	12 97       	sbiw	r26, 0x02	; 2
    17da:	9a 01       	movw	r18, r20
    17dc:	ab 01       	movw	r20, r22
    17de:	67 e0       	ldi	r22, 0x07	; 7
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	6a 95       	dec	r22
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__unpack_f+0x54>
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	8c 93       	st	X, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__unpack_f+0x80>
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	20 30       	cpi	r18, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	38 07       	cpc	r19, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	48 07       	cpc	r20, r24
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	58 07       	cpc	r21, r24
    181a:	58 f3       	brcs	.-42     	; 0x17f2 <__unpack_f+0x66>
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	2d 93       	st	X+, r18
    1820:	3d 93       	st	X+, r19
    1822:	4d 93       	st	X+, r20
    1824:	5c 93       	st	X, r21
    1826:	17 97       	sbiw	r26, 0x07	; 7
    1828:	08 95       	ret
    182a:	2f 3f       	cpi	r18, 0xFF	; 255
    182c:	31 05       	cpc	r19, r1
    182e:	79 f4       	brne	.+30     	; 0x184e <__unpack_f+0xc2>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__unpack_f+0xb4>
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	8c 93       	st	X, r24
    183e:	08 95       	ret
    1840:	64 ff       	sbrs	r22, 4
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__unpack_f+0xbe>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8c 93       	st	X, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__unpack_f+0xe2>
    184a:	1c 92       	st	X, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <__unpack_f+0xe2>
    184e:	2f 57       	subi	r18, 0x7F	; 127
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
    1858:	12 97       	sbiw	r26, 0x02	; 2
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	8c 93       	st	X, r24
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	8a 95       	dec	r24
    186a:	d1 f7       	brne	.-12     	; 0x1860 <__unpack_f+0xd4>
    186c:	70 64       	ori	r23, 0x40	; 64
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	4d 93       	st	X+, r20
    1872:	5d 93       	st	X+, r21
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	1f 93       	push	r17
    187e:	dc 01       	movw	r26, r24
    1880:	fb 01       	movw	r30, r22
    1882:	9c 91       	ld	r25, X
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <__fpcmp_parts_f+0x9c>
    188a:	80 81       	ld	r24, Z
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <__fpcmp_parts_f+0x9c>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	51 f4       	brne	.+20     	; 0x18aa <__fpcmp_parts_f+0x2e>
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	1c 91       	ld	r17, X
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	99 f5       	brne	.+102    	; 0x1904 <__fpcmp_parts_f+0x88>
    189e:	81 81       	ldd	r24, Z+1	; 0x01
    18a0:	68 2f       	mov	r22, r24
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	61 1b       	sub	r22, r17
    18a6:	71 09       	sbc	r23, r1
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <__fpcmp_parts_f+0xac>
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <__fpcmp_parts_f+0x3a>
    18ae:	92 30       	cpi	r25, 0x02	; 2
    18b0:	31 f4       	brne	.+12     	; 0x18be <__fpcmp_parts_f+0x42>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	b9 f1       	breq	.+110    	; 0x1924 <__fpcmp_parts_f+0xa8>
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	88 23       	and	r24, r24
    18ba:	89 f1       	breq	.+98     	; 0x191e <__fpcmp_parts_f+0xa2>
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <__fpcmp_parts_f+0x9c>
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	1c 91       	ld	r17, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <__fpcmp_parts_f+0x88>
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	18 17       	cp	r17, r24
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__fpcmp_parts_f+0x88>
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	94 f0       	brlt	.+36     	; 0x1904 <__fpcmp_parts_f+0x88>
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	bc f0       	brlt	.+46     	; 0x1914 <__fpcmp_parts_f+0x98>
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	8d 91       	ld	r24, X+
    18ea:	9d 91       	ld	r25, X+
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	4a 07       	cpc	r20, r26
    1900:	5b 07       	cpc	r21, r27
    1902:	18 f4       	brcc	.+6      	; 0x190a <__fpcmp_parts_f+0x8e>
    1904:	11 23       	and	r17, r17
    1906:	41 f0       	breq	.+16     	; 0x1918 <__fpcmp_parts_f+0x9c>
    1908:	0a c0       	rjmp	.+20     	; 0x191e <__fpcmp_parts_f+0xa2>
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a4 07       	cpc	r26, r20
    1910:	b5 07       	cpc	r27, r21
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fpcmp_parts_f+0xa8>
    1914:	11 23       	and	r17, r17
    1916:	19 f0       	breq	.+6      	; 0x191e <__fpcmp_parts_f+0xa2>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__fpcmp_parts_f+0xac>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	1f 91       	pop	r17
    192c:	08 95       	ret

0000192e <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	28 97       	sbiw	r28, 0x08	; 8
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
	/*Check if the pointer is valid*/
	if (Config_Ptr == NULL)
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	09 f4       	brne	.+2      	; 0x1950 <UART_init+0x22>
    194e:	2b c1       	rjmp	.+598    	; 0x1ba6 <UART_init+0x278>
	{
		return; // Handle error appropriately }
	}

	uint16 ubrr_value = 0;
    1950:	1a 82       	std	Y+2, r1	; 0x02
    1952:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1954:	eb 81       	ldd	r30, Y+3	; 0x03
    1956:	fc 81       	ldd	r31, Y+4	; 0x04
    1958:	83 81       	ldd	r24, Z+3	; 0x03
    195a:	94 81       	ldd	r25, Z+4	; 0x04
    195c:	a5 81       	ldd	r26, Z+5	; 0x05
    195e:	b6 81       	ldd	r27, Z+6	; 0x06
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	aa 1f       	adc	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	aa 1f       	adc	r26, r26
    196e:	bb 1f       	adc	r27, r27
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	aa 1f       	adc	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	9c 01       	movw	r18, r24
    197a:	ad 01       	movw	r20, r26
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	92 e1       	ldi	r25, 0x12	; 18
    1980:	aa e7       	ldi	r26, 0x7A	; 122
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__udivmodsi4>
    198c:	da 01       	movw	r26, r20
    198e:	c9 01       	movw	r24, r18
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UCSRC=0;
    1996:	e0 e4       	ldi	r30, 0x40	; 64
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	10 82       	st	Z, r1
	UBRRH = ubrr_value>>8;
    199c:	e0 e4       	ldi	r30, 0x40	; 64
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	89 2f       	mov	r24, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    19aa:	e9 e2       	ldi	r30, 0x29	; 41
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	80 83       	st	Z, r24

	/*to write on UCSRC*/
	UCSRC |= (1 << URSEL);
    19b2:	a0 e4       	ldi	r26, 0x40	; 64
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e0 e4       	ldi	r30, 0x40	; 64
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 68       	ori	r24, 0x80	; 128
    19be:	8c 93       	st	X, r24

	/*Configure stop bits*/
	if (Config_Ptr->stop_bit == TWO_STOP_BITS)
    19c0:	eb 81       	ldd	r30, Y+3	; 0x03
    19c2:	fc 81       	ldd	r31, Y+4	; 0x04
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	41 f4       	brne	.+16     	; 0x19da <UART_init+0xac>
	{
		UCSRC |= (1 << USBS); // Set for 2 stop bits
    19ca:	a0 e4       	ldi	r26, 0x40	; 64
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e0 e4       	ldi	r30, 0x40	; 64
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 60       	ori	r24, 0x08	; 8
    19d6:	8c 93       	st	X, r24
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <UART_init+0xba>
	}
	else
	{
		UCSRC &= ~(1 << USBS); // Set for 1 stop bit
    19da:	a0 e4       	ldi	r26, 0x40	; 64
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e0 e4       	ldi	r30, 0x40	; 64
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	87 7f       	andi	r24, 0xF7	; 247
    19e6:	8c 93       	st	X, r24
	}

	/* Set parity */
	switch(Config_Ptr->parity)
    19e8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ea:	fc 81       	ldd	r31, Y+4	; 0x04
    19ec:	81 81       	ldd	r24, Z+1	; 0x01
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	38 87       	std	Y+8, r19	; 0x08
    19f4:	2f 83       	std	Y+7, r18	; 0x07
    19f6:	8f 81       	ldd	r24, Y+7	; 0x07
    19f8:	98 85       	ldd	r25, Y+8	; 0x08
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	89 f0       	breq	.+34     	; 0x1a22 <UART_init+0xf4>
    1a00:	2f 81       	ldd	r18, Y+7	; 0x07
    1a02:	38 85       	ldd	r19, Y+8	; 0x08
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	d9 f0       	breq	.+54     	; 0x1a40 <UART_init+0x112>
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	29 f5       	brne	.+74     	; 0x1a5c <UART_init+0x12e>
	{
	case NO_PARITY:
		UCSRC &= ~(1 << UPM0) & ~(1 << UPM1);
    1a12:	a0 e4       	ldi	r26, 0x40	; 64
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e0 e4       	ldi	r30, 0x40	; 64
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 7c       	andi	r24, 0xCF	; 207
    1a1e:	8c 93       	st	X, r24
    1a20:	1d c0       	rjmp	.+58     	; 0x1a5c <UART_init+0x12e>
		break;
	case EVEN_PARITY:
		UCSRC &= ~(1 << UPM0);
    1a22:	a0 e4       	ldi	r26, 0x40	; 64
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e0 e4       	ldi	r30, 0x40	; 64
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 7e       	andi	r24, 0xEF	; 239
    1a2e:	8c 93       	st	X, r24
		UCSRC |= (1 << UPM1);
    1a30:	a0 e4       	ldi	r26, 0x40	; 64
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e0 e4       	ldi	r30, 0x40	; 64
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 62       	ori	r24, 0x20	; 32
    1a3c:	8c 93       	st	X, r24
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <UART_init+0x12e>
		break;
	case  ODD_PARITY:
		UCSRC |= (1 << UPM0);
    1a40:	a0 e4       	ldi	r26, 0x40	; 64
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e0 e4       	ldi	r30, 0x40	; 64
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	8c 93       	st	X, r24
		UCSRC |= (1 << UPM1);
    1a4e:	a0 e4       	ldi	r26, 0x40	; 64
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e0 e4       	ldi	r30, 0x40	; 64
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 62       	ori	r24, 0x20	; 32
    1a5a:	8c 93       	st	X, r24
	}
	/* set data bits*/
	switch(Config_Ptr->bit_data)
    1a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a60:	80 81       	ld	r24, Z
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3e 83       	std	Y+6, r19	; 0x06
    1a68:	2d 83       	std	Y+5, r18	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	87 30       	cpi	r24, 0x07	; 7
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <UART_init+0x148>
    1a74:	49 c0       	rjmp	.+146    	; 0x1b08 <UART_init+0x1da>
    1a76:	2d 81       	ldd	r18, Y+5	; 0x05
    1a78:	3e 81       	ldd	r19, Y+6	; 0x06
    1a7a:	28 30       	cpi	r18, 0x08	; 8
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	5c f4       	brge	.+22     	; 0x1a96 <UART_init+0x168>
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	85 30       	cpi	r24, 0x05	; 5
    1a86:	91 05       	cpc	r25, r1
    1a88:	99 f0       	breq	.+38     	; 0x1ab0 <UART_init+0x182>
    1a8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a8e:	26 30       	cpi	r18, 0x06	; 6
    1a90:	31 05       	cpc	r19, r1
    1a92:	21 f1       	breq	.+72     	; 0x1adc <UART_init+0x1ae>
    1a94:	7a c0       	rjmp	.+244    	; 0x1b8a <UART_init+0x25c>
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	88 30       	cpi	r24, 0x08	; 8
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <UART_init+0x174>
    1aa0:	49 c0       	rjmp	.+146    	; 0x1b34 <UART_init+0x206>
    1aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa4:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa6:	29 30       	cpi	r18, 0x09	; 9
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <UART_init+0x180>
    1aac:	59 c0       	rjmp	.+178    	; 0x1b60 <UART_init+0x232>
    1aae:	6d c0       	rjmp	.+218    	; 0x1b8a <UART_init+0x25c>
	{
	case _5_DATA_BITS:
		UCSRC &= ~(1 << UCSZ0);
    1ab0:	a0 e4       	ldi	r26, 0x40	; 64
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e0 e4       	ldi	r30, 0x40	; 64
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	8c 93       	st	X, r24
		UCSRC &= ~(1 << UCSZ1);
    1abe:	a0 e4       	ldi	r26, 0x40	; 64
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e0 e4       	ldi	r30, 0x40	; 64
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8b 7f       	andi	r24, 0xFB	; 251
    1aca:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
    1acc:	aa e2       	ldi	r26, 0x2A	; 42
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ea e2       	ldi	r30, 0x2A	; 42
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8b 7f       	andi	r24, 0xFB	; 251
    1ad8:	8c 93       	st	X, r24
    1ada:	57 c0       	rjmp	.+174    	; 0x1b8a <UART_init+0x25c>
		break;
	case _6_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
    1adc:	a0 e4       	ldi	r26, 0x40	; 64
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e0 e4       	ldi	r30, 0x40	; 64
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
		UCSRC &= ~(1 << UCSZ1);
    1aea:	a0 e4       	ldi	r26, 0x40	; 64
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e0 e4       	ldi	r30, 0x40	; 64
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	8b 7f       	andi	r24, 0xFB	; 251
    1af6:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
    1af8:	aa e2       	ldi	r26, 0x2A	; 42
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	ea e2       	ldi	r30, 0x2A	; 42
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8b 7f       	andi	r24, 0xFB	; 251
    1b04:	8c 93       	st	X, r24
    1b06:	41 c0       	rjmp	.+130    	; 0x1b8a <UART_init+0x25c>
		break;
	case _7_DATA_BITS:
		UCSRC &= ~(1 << UCSZ0);
    1b08:	a0 e4       	ldi	r26, 0x40	; 64
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e0 e4       	ldi	r30, 0x40	; 64
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8d 7f       	andi	r24, 0xFD	; 253
    1b14:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
    1b16:	a0 e4       	ldi	r26, 0x40	; 64
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e0 e4       	ldi	r30, 0x40	; 64
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	84 60       	ori	r24, 0x04	; 4
    1b22:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
    1b24:	aa e2       	ldi	r26, 0x2A	; 42
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ea e2       	ldi	r30, 0x2A	; 42
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24
    1b32:	2b c0       	rjmp	.+86     	; 0x1b8a <UART_init+0x25c>
		break;
	case _8_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
    1b34:	a0 e4       	ldi	r26, 0x40	; 64
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e0 e4       	ldi	r30, 0x40	; 64
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	82 60       	ori	r24, 0x02	; 2
    1b40:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
    1b42:	a0 e4       	ldi	r26, 0x40	; 64
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e0 e4       	ldi	r30, 0x40	; 64
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	84 60       	ori	r24, 0x04	; 4
    1b4e:	8c 93       	st	X, r24
		UCSRB &= ~(1 << UCSZ2);
    1b50:	aa e2       	ldi	r26, 0x2A	; 42
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ea e2       	ldi	r30, 0x2A	; 42
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8b 7f       	andi	r24, 0xFB	; 251
    1b5c:	8c 93       	st	X, r24
    1b5e:	15 c0       	rjmp	.+42     	; 0x1b8a <UART_init+0x25c>
		break;
	case  _9_DATA_BITS:
		UCSRC |= (1 << UCSZ0);
    1b60:	a0 e4       	ldi	r26, 0x40	; 64
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e0 e4       	ldi	r30, 0x40	; 64
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	82 60       	ori	r24, 0x02	; 2
    1b6c:	8c 93       	st	X, r24
		UCSRC |= (1 << UCSZ1);
    1b6e:	a0 e4       	ldi	r26, 0x40	; 64
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e0 e4       	ldi	r30, 0x40	; 64
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	84 60       	ori	r24, 0x04	; 4
    1b7a:	8c 93       	st	X, r24
		UCSRB |= (1 << UCSZ2);
    1b7c:	aa e2       	ldi	r26, 0x2A	; 42
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ea e2       	ldi	r30, 0x2A	; 42
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	84 60       	ori	r24, 0x04	; 4
    1b88:	8c 93       	st	X, r24
		break;
	}

	/* U2X = 1 for double transmission speed */
		UCSRA |= (1<<U2X);
    1b8a:	ab e2       	ldi	r26, 0x2B	; 43
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	eb e2       	ldi	r30, 0x2B	; 43
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	82 60       	ori	r24, 0x02	; 2
    1b96:	8c 93       	st	X, r24
		/* Enable receiver and transmitter*/
		UCSRB |= (1<<RXEN) | (1<<TXEN);
    1b98:	aa e2       	ldi	r26, 0x2A	; 42
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ea e2       	ldi	r30, 0x2A	; 42
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 61       	ori	r24, 0x18	; 24
    1ba4:	8c 93       	st	X, r24


}
    1ba6:	28 96       	adiw	r28, 0x08	; 8
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	0f 92       	push	r0
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1bc4:	eb e2       	ldi	r30, 0x2B	; 43
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	80 72       	andi	r24, 0x20	; 32
    1bd0:	90 70       	andi	r25, 0x00	; 0
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	b9 f3       	breq	.-18     	; 0x1bc4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1bd6:	ec e2       	ldi	r30, 0x2C	; 44
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1bee:	eb e2       	ldi	r30, 0x2B	; 43
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	88 23       	and	r24, r24
    1bf6:	dc f7       	brge	.-10     	; 0x1bee <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1bf8:	ec e2       	ldi	r30, 0x2C	; 44
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <UART_sendString+0x6>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	0e c0       	rjmp	.+28     	; 0x1c34 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	fc 01       	movw	r30, r24
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	80 81       	ld	r24, Z
    1c2a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
		i++;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e2 0f       	add	r30, r18
    1c42:	f3 1f       	adc	r31, r19
    1c44:	80 81       	ld	r24, Z
    1c46:	88 23       	and	r24, r24
    1c48:	39 f7       	brne	.-50     	; 0x1c18 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <UART_receiveString+0xa>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9b 83       	std	Y+3, r25	; 0x03
    1c68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	8c 01       	movw	r16, r24
    1c78:	02 0f       	add	r16, r18
    1c7a:	13 1f       	adc	r17, r19
    1c7c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    1c80:	f8 01       	movw	r30, r16
    1c82:	80 83       	st	Z, r24
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	8c 01       	movw	r16, r24
    1c98:	02 0f       	add	r16, r18
    1c9a:	13 1f       	adc	r17, r19
    1c9c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	80 81       	ld	r24, Z
    1cb6:	83 32       	cpi	r24, 0x23	; 35
    1cb8:	31 f7       	brne	.-52     	; 0x1c86 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	10 82       	st	Z, r1
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <Timer_init>:
static void (*g_Timer0_CallBack)(void) = NULL;
static void (*g_Timer1_CallBack)(void) = NULL;
static void (*g_Timer2_CallBack)(void) = NULL;

/* Function to initialize the Timer*/
void Timer_init(const Timer_ConfigType * Config_Ptr) {
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <Timer_init+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <Timer_init+0x8>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) {
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	84 81       	ldd	r24, Z+4	; 0x04
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3c 83       	std	Y+4, r19	; 0x04
    1cf8:	2b 83       	std	Y+3, r18	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <Timer_init+0x2a>
    1d04:	55 c0       	rjmp	.+170    	; 0x1db0 <Timer_init+0xd4>
    1d06:	2b 81       	ldd	r18, Y+3	; 0x03
    1d08:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0a:	22 30       	cpi	r18, 0x02	; 2
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <Timer_init+0x36>
    1d10:	a0 c0       	rjmp	.+320    	; 0x1e52 <Timer_init+0x176>
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <Timer_init+0x40>
    1d1a:	da c0       	rjmp	.+436    	; 0x1ed0 <Timer_init+0x1f4>
        case TIMER0:
            /* Set Timer0 mode (Normal or Compare)*/
        	TCCR0=0;
    1d1c:	e3 e5       	ldi	r30, 0x53	; 83
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	86 81       	ldd	r24, Z+6	; 0x06
    1d28:	88 23       	and	r24, r24
    1d2a:	79 f4       	brne	.+30     	; 0x1d4a <Timer_init+0x6e>
                TCCR0 |= (1 << FOC0);  /* no PWM*/
    1d2c:	a3 e5       	ldi	r26, 0x53	; 83
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	8c 93       	st	X, r24
                TIMSK |= (1 << TOIE0); /*Enable overflow interrupt forTimer0 */
    1d3a:	a9 e5       	ldi	r26, 0x59	; 89
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e9 e5       	ldi	r30, 0x59	; 89
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	8c 93       	st	X, r24
    1d48:	21 c0       	rjmp	.+66     	; 0x1d8c <Timer_init+0xb0>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    1d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4e:	86 81       	ldd	r24, Z+6	; 0x06
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	e1 f4       	brne	.+56     	; 0x1d8c <Timer_init+0xb0>
            	TCCR0 |= (1 << FOC0);  /* no PWM*/
    1d54:	a3 e5       	ldi	r26, 0x53	; 83
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e3 e5       	ldi	r30, 0x53	; 83
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 68       	ori	r24, 0x80	; 128
    1d60:	8c 93       	st	X, r24
                TCCR0 |= (1 << WGM01) ;  /* CTC mode */
    1d62:	a3 e5       	ldi	r26, 0x53	; 83
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e3 e5       	ldi	r30, 0x53	; 83
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 60       	ori	r24, 0x08	; 8
    1d6e:	8c 93       	st	X, r24
                OCR0 = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value */
    1d70:	ac e5       	ldi	r26, 0x5C	; 92
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /*Enable compare interrupt forTimer0 */
    1d7e:	a9 e5       	ldi	r26, 0x59	; 89
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e9 e5       	ldi	r30, 0x59	; 89
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	82 60       	ori	r24, 0x02	; 2
    1d8a:	8c 93       	st	X, r24
            }
            TCNT0 = Config_Ptr->timer_InitialValue;  /* Set initial value */
    1d8c:	a2 e5       	ldi	r26, 0x52	; 82
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	8c 93       	st	X, r24
            TCCR0 |= Config_Ptr->timer_clock;        /* Set clock/prescaler*/
    1d9a:	a3 e5       	ldi	r26, 0x53	; 83
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 e5       	ldi	r30, 0x53	; 83
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	90 81       	ld	r25, Z
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	85 81       	ldd	r24, Z+5	; 0x05
    1daa:	89 2b       	or	r24, r25
    1dac:	8c 93       	st	X, r24
    1dae:	90 c0       	rjmp	.+288    	; 0x1ed0 <Timer_init+0x1f4>
            break;

        case TIMER1:
        	/* Set Timer1 mode (Normal or Compare)*/
        	TCCR1A=0;
    1db0:	ef e4       	ldi	r30, 0x4F	; 79
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	10 82       	st	Z, r1
        	TCCR1B=0;
    1db6:	ee e4       	ldi	r30, 0x4E	; 78
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	86 81       	ldd	r24, Z+6	; 0x06
    1dc2:	88 23       	and	r24, r24
    1dc4:	79 f4       	brne	.+30     	; 0x1de4 <Timer_init+0x108>
                TCCR1A |= (1 << FOC1A) | (1 << FOC1B);  /*no PWM*/
    1dc6:	af e4       	ldi	r26, 0x4F	; 79
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ef e4       	ldi	r30, 0x4F	; 79
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8c 60       	ori	r24, 0x0C	; 12
    1dd2:	8c 93       	st	X, r24
                /* Normal mode:WGM10 = 0,WGM11 = 0,WGM12 = 0,WGM13 = 0 */
                TIMSK |= (1 << TOIE1); /*Enable overflow interrupt forTimer1 */
    1dd4:	a9 e5       	ldi	r26, 0x59	; 89
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 e5       	ldi	r30, 0x59	; 89
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	8c 93       	st	X, r24
    1de2:	23 c0       	rjmp	.+70     	; 0x1e2a <Timer_init+0x14e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	f1 f4       	brne	.+60     	; 0x1e2a <Timer_init+0x14e>
            	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);  /* no PWM*/
    1dee:	af e4       	ldi	r26, 0x4F	; 79
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ef e4       	ldi	r30, 0x4F	; 79
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8c 60       	ori	r24, 0x0C	; 12
    1dfa:	8c 93       	st	X, r24
            	/* CTC mode:WGM10 = 0,WGM11 = 0,WGM12 = 1,WGM13 = 0 */
                TCCR1B |= (1 << WGM12);
    1dfc:	ae e4       	ldi	r26, 0x4E	; 78
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ee e4       	ldi	r30, 0x4E	; 78
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	88 60       	ori	r24, 0x08	; 8
    1e08:	8c 93       	st	X, r24
                OCR1A = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value */
    1e0a:	aa e4       	ldi	r26, 0x4A	; 74
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	11 96       	adiw	r26, 0x01	; 1
    1e18:	9c 93       	st	X, r25
    1e1a:	8e 93       	st	-X, r24
                TIMSK |= (1 <<OCIE1A); /*Enable compare interrupt forTimer1 */
    1e1c:	a9 e5       	ldi	r26, 0x59	; 89
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e9 e5       	ldi	r30, 0x59	; 89
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 61       	ori	r24, 0x10	; 16
    1e28:	8c 93       	st	X, r24
            }
            TCNT1 = Config_Ptr->timer_InitialValue;  /*Set initial value*/
    1e2a:	ac e4       	ldi	r26, 0x4C	; 76
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e30:	fa 81       	ldd	r31, Y+2	; 0x02
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
            TCCR1B |= Config_Ptr->timer_clock;       /*Set clock/prescaler*/
    1e3c:	ae e4       	ldi	r26, 0x4E	; 78
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ee e4       	ldi	r30, 0x4E	; 78
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	90 81       	ld	r25, Z
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	85 81       	ldd	r24, Z+5	; 0x05
    1e4c:	89 2b       	or	r24, r25
    1e4e:	8c 93       	st	X, r24
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <Timer_init+0x1f4>
            break;

        case TIMER2:
            /* Set Timer2 mode (Normal or Compare)*/
        	TCCR2=0;
    1e52:	e5 e4       	ldi	r30, 0x45	; 69
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	10 82       	st	Z, r1
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	86 81       	ldd	r24, Z+6	; 0x06
    1e5e:	88 23       	and	r24, r24
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <Timer_init+0x190>
                TCCR2 = (1 << FOC2);  /*no PWM*/
    1e62:	e5 e4       	ldi	r30, 0x45	; 69
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 e8       	ldi	r24, 0x80	; 128
    1e68:	80 83       	st	Z, r24
    1e6a:	1a c0       	rjmp	.+52     	; 0x1ea0 <Timer_init+0x1c4>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    1e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e70:	86 81       	ldd	r24, Z+6	; 0x06
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	a9 f4       	brne	.+42     	; 0x1ea0 <Timer_init+0x1c4>
                TCCR2 |= (1 << WGM21) | (1 << FOC2);  /* CTC mode & no PWM*/
    1e76:	a5 e4       	ldi	r26, 0x45	; 69
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e4       	ldi	r30, 0x45	; 69
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 68       	ori	r24, 0x88	; 136
    1e82:	8c 93       	st	X, r24
                OCR2 = Config_Ptr->timer_compare_MatchValue;  /* Set Compare match value*/
    1e84:	a3 e4       	ldi	r26, 0x43	; 67
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /*Enable compare interrupt forTimer2 */
    1e92:	a9 e5       	ldi	r26, 0x59	; 89
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e9 e5       	ldi	r30, 0x59	; 89
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 68       	ori	r24, 0x80	; 128
    1e9e:	8c 93       	st	X, r24
            }
            TCNT2 = Config_Ptr->timer_InitialValue;  /*Set initial value*/
    1ea0:	a4 e4       	ldi	r26, 0x44	; 68
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	8c 93       	st	X, r24
            TCCR2 |= Config_Ptr->timer_clock;        /* Set clock/prescaler*/
    1eae:	a5 e4       	ldi	r26, 0x45	; 69
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e5 e4       	ldi	r30, 0x45	; 69
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	90 81       	ld	r25, Z
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebc:	85 81       	ldd	r24, Z+5	; 0x05
    1ebe:	89 2b       	or	r24, r25
    1ec0:	8c 93       	st	X, r24
            TIMSK |= (1 << TOIE2); /*Enable overflow interrupt forTimer2 */
    1ec2:	a9 e5       	ldi	r26, 0x59	; 89
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e9 e5       	ldi	r30, 0x59	; 89
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 64       	ori	r24, 0x40	; 64
    1ece:	8c 93       	st	X, r24

        default:
            /*Invalid Timer ID*/
            break;
    }
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <Timer_deInit>:

/* Function to de-initialize the Timer*/
void Timer_deInit(Timer_ID_Type timer_type) {
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <Timer_deInit+0x6>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3b 83       	std	Y+3, r19	; 0x03
    1ef4:	2a 83       	std	Y+2, r18	; 0x02
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 05       	cpc	r25, r1
    1efe:	a1 f0       	breq	.+40     	; 0x1f28 <Timer_deInit+0x4a>
    1f00:	2a 81       	ldd	r18, Y+2	; 0x02
    1f02:	3b 81       	ldd	r19, Y+3	; 0x03
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	e9 f0       	breq	.+58     	; 0x1f44 <Timer_deInit+0x66>
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	19 f5       	brne	.+70     	; 0x1f58 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0;  /* Stop Timer0 */
    1f12:	e3 e5       	ldi	r30, 0x53	; 83
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);  /* Disable Timer0 interrupts */
    1f18:	a9 e5       	ldi	r26, 0x59	; 89
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e9 e5       	ldi	r30, 0x59	; 89
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8c 7f       	andi	r24, 0xFC	; 252
    1f24:	8c 93       	st	X, r24
    1f26:	18 c0       	rjmp	.+48     	; 0x1f58 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0;
    1f28:	ef e4       	ldi	r30, 0x4F	; 79
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	10 82       	st	Z, r1
            TCCR1B = 0;  /* Stop Timer1 */
    1f2e:	ee e4       	ldi	r30, 0x4E	; 78
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);  /* Disable Timer1 interrupts*/
    1f34:	a9 e5       	ldi	r26, 0x59	; 89
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e9 e5       	ldi	r30, 0x59	; 89
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8b 7e       	andi	r24, 0xEB	; 235
    1f40:	8c 93       	st	X, r24
    1f42:	0a c0       	rjmp	.+20     	; 0x1f58 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0;  /* Stop Timer2 */
    1f44:	e5 e4       	ldi	r30, 0x45	; 69
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	10 82       	st	Z, r1
            TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);  /* Disable Timer2 interrupts*/
    1f4a:	a9 e5       	ldi	r26, 0x59	; 89
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e9 e5       	ldi	r30, 0x59	; 89
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 73       	andi	r24, 0x3F	; 63
    1f56:	8c 93       	st	X, r24

        default:
            /* Invalid Timer ID*/
            break;
    }
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <Timer_setCallBack>:

/*Function to set the callback function*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <Timer_setCallBack+0x6>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <Timer_setCallBack+0x8>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3d 83       	std	Y+5, r19	; 0x05
    1f80:	2c 83       	std	Y+4, r18	; 0x04
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	81 f0       	breq	.+32     	; 0x1fac <Timer_setCallBack+0x48>
    1f8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	91 f0       	breq	.+36     	; 0x1fba <Timer_setCallBack+0x56>
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	a1 f4       	brne	.+40     	; 0x1fc6 <Timer_setCallBack+0x62>
        case TIMER0:
            g_Timer0_CallBack = a_ptr;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	90 93 81 01 	sts	0x0181, r25
    1fa6:	80 93 80 01 	sts	0x0180, r24
    1faa:	0d c0       	rjmp	.+26     	; 0x1fc6 <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_Timer1_CallBack = a_ptr;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	90 93 83 01 	sts	0x0183, r25
    1fb4:	80 93 82 01 	sts	0x0182, r24
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_Timer2_CallBack = a_ptr;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	90 93 85 01 	sts	0x0185, r25
    1fc2:	80 93 84 01 	sts	0x0184, r24

        default:
            // Invalid Timer ID
            break;
    }
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <__vector_11>:

/* Timer0 Overflow ISR*/
ISR(TIMER0_OVF_vect) {
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	6f 93       	push	r22
    1fea:	7f 93       	push	r23
    1fec:	8f 93       	push	r24
    1fee:	9f 93       	push	r25
    1ff0:	af 93       	push	r26
    1ff2:	bf 93       	push	r27
    1ff4:	ef 93       	push	r30
    1ff6:	ff 93       	push	r31
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0_CallBack != NULL) {
    2000:	80 91 80 01 	lds	r24, 0x0180
    2004:	90 91 81 01 	lds	r25, 0x0181
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <__vector_11+0x40>
        g_Timer0_CallBack();
    200c:	e0 91 80 01 	lds	r30, 0x0180
    2010:	f0 91 81 01 	lds	r31, 0x0181
    2014:	09 95       	icall
    }
}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <__vector_10>:

/* Timer0 Compare Match ISR*/
ISR(TIMER0_COMP_vect) {
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer0_CallBack != NULL) {
    2066:	80 91 80 01 	lds	r24, 0x0180
    206a:	90 91 81 01 	lds	r25, 0x0181
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	29 f0       	breq	.+10     	; 0x207c <__vector_10+0x40>
        g_Timer0_CallBack();
    2072:	e0 91 80 01 	lds	r30, 0x0180
    2076:	f0 91 81 01 	lds	r31, 0x0181
    207a:	09 95       	icall
    }
}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	ff 91       	pop	r31
    2082:	ef 91       	pop	r30
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	7f 91       	pop	r23
    208e:	6f 91       	pop	r22
    2090:	5f 91       	pop	r21
    2092:	4f 91       	pop	r20
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <__vector_9>:

/* Timer1 Overflow ISR*/
ISR(TIMER1_OVF_vect) {
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1_CallBack != NULL) {
    20cc:	80 91 82 01 	lds	r24, 0x0182
    20d0:	90 91 83 01 	lds	r25, 0x0183
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <__vector_9+0x40>
        g_Timer1_CallBack();
    20d8:	e0 91 82 01 	lds	r30, 0x0182
    20dc:	f0 91 83 01 	lds	r31, 0x0183
    20e0:	09 95       	icall
    }
}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <__vector_7>:

/* Timer1 Compare Match ISR */
ISR(TIMER1_COMPA_vect) {
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	4f 93       	push	r20
    2118:	5f 93       	push	r21
    211a:	6f 93       	push	r22
    211c:	7f 93       	push	r23
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
    2126:	ef 93       	push	r30
    2128:	ff 93       	push	r31
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer1_CallBack != NULL) {
    2132:	80 91 82 01 	lds	r24, 0x0182
    2136:	90 91 83 01 	lds	r25, 0x0183
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	29 f0       	breq	.+10     	; 0x2148 <__vector_7+0x40>
        g_Timer1_CallBack();
    213e:	e0 91 82 01 	lds	r30, 0x0182
    2142:	f0 91 83 01 	lds	r31, 0x0183
    2146:	09 95       	icall
    }
}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_5>:

/* Timer2 Overflow ISR*/
ISR(TIMER2_OVF_vect) {
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	2f 93       	push	r18
    217a:	3f 93       	push	r19
    217c:	4f 93       	push	r20
    217e:	5f 93       	push	r21
    2180:	6f 93       	push	r22
    2182:	7f 93       	push	r23
    2184:	8f 93       	push	r24
    2186:	9f 93       	push	r25
    2188:	af 93       	push	r26
    218a:	bf 93       	push	r27
    218c:	ef 93       	push	r30
    218e:	ff 93       	push	r31
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2_CallBack != NULL) {
    2198:	80 91 84 01 	lds	r24, 0x0184
    219c:	90 91 85 01 	lds	r25, 0x0185
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	29 f0       	breq	.+10     	; 0x21ae <__vector_5+0x40>
        g_Timer2_CallBack();
    21a4:	e0 91 84 01 	lds	r30, 0x0184
    21a8:	f0 91 85 01 	lds	r31, 0x0185
    21ac:	09 95       	icall
    }
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	9f 91       	pop	r25
    21bc:	8f 91       	pop	r24
    21be:	7f 91       	pop	r23
    21c0:	6f 91       	pop	r22
    21c2:	5f 91       	pop	r21
    21c4:	4f 91       	pop	r20
    21c6:	3f 91       	pop	r19
    21c8:	2f 91       	pop	r18
    21ca:	0f 90       	pop	r0
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	0f 90       	pop	r0
    21d0:	1f 90       	pop	r1
    21d2:	18 95       	reti

000021d4 <__vector_4>:

/* Timer2 Compare Match ISR*/
ISR(TIMER2_COMP_vect) {
    21d4:	1f 92       	push	r1
    21d6:	0f 92       	push	r0
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	0f 92       	push	r0
    21dc:	11 24       	eor	r1, r1
    21de:	2f 93       	push	r18
    21e0:	3f 93       	push	r19
    21e2:	4f 93       	push	r20
    21e4:	5f 93       	push	r21
    21e6:	6f 93       	push	r22
    21e8:	7f 93       	push	r23
    21ea:	8f 93       	push	r24
    21ec:	9f 93       	push	r25
    21ee:	af 93       	push	r26
    21f0:	bf 93       	push	r27
    21f2:	ef 93       	push	r30
    21f4:	ff 93       	push	r31
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer2_CallBack != NULL) {
    21fe:	80 91 84 01 	lds	r24, 0x0184
    2202:	90 91 85 01 	lds	r25, 0x0185
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	29 f0       	breq	.+10     	; 0x2214 <__vector_4+0x40>
        g_Timer2_CallBack();
    220a:	e0 91 84 01 	lds	r30, 0x0184
    220e:	f0 91 85 01 	lds	r31, 0x0185
    2212:	09 95       	icall
    }
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	ff 91       	pop	r31
    221a:	ef 91       	pop	r30
    221c:	bf 91       	pop	r27
    221e:	af 91       	pop	r26
    2220:	9f 91       	pop	r25
    2222:	8f 91       	pop	r24
    2224:	7f 91       	pop	r23
    2226:	6f 91       	pop	r22
    2228:	5f 91       	pop	r21
    222a:	4f 91       	pop	r20
    222c:	3f 91       	pop	r19
    222e:	2f 91       	pop	r18
    2230:	0f 90       	pop	r0
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	0f 90       	pop	r0
    2236:	1f 90       	pop	r1
    2238:	18 95       	reti

0000223a <PWM_Timer0_Start>:
# include "../../MCAL/GPIO/gpio.h"
# include "pwm_timer0.h"
# include "../../common_macros.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	89 83       	std	Y+1, r24	; 0x01
 /*Initializes Timer0 in fast PWM mode --> WGM00 = 1, WGM01 = 1 .*/
	SET_BIT(TCCR0,WGM00);
    2246:	a3 e5       	ldi	r26, 0x53	; 83
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e3 e5       	ldi	r30, 0x53	; 83
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2254:	a3 e5       	ldi	r26, 0x53	; 83
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e3 e5       	ldi	r30, 0x53	; 83
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	88 60       	ori	r24, 0x08	; 8
    2260:	8c 93       	st	X, r24
/* Prescaler: F_CPU/64--> CS00 = 1, CS01 = 1, CS02 = 0*/
	SET_BIT(TCCR0,CS00);
    2262:	a3 e5       	ldi	r26, 0x53	; 83
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e3 e5       	ldi	r30, 0x53	; 83
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	81 60       	ori	r24, 0x01	; 1
    226e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2270:	a3 e5       	ldi	r26, 0x53	; 83
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e3 e5       	ldi	r30, 0x53	; 83
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	82 60       	ori	r24, 0x02	; 2
    227c:	8c 93       	st	X, r24
 /* Non-inverting mode --> COM00  = 0, COM01 = 1*/
	SET_BIT(TCCR0,COM01);
    227e:	a3 e5       	ldi	r26, 0x53	; 83
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e3 e5       	ldi	r30, 0x53	; 83
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	80 62       	ori	r24, 0x20	; 32
    228a:	8c 93       	st	X, r24
 /* The function configures OC0 as the output pin. */
	GPIO_setupPinDirection(PORTD_ID,PIN3_ID , PIN_OUTPUT);
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	63 e0       	ldi	r22, 0x03	; 3
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>
/* Duty_cycle: Percentage (0 to 100%) representing the PWM duty cycle.*/
	OCR0 = (duty_cycle * 255) / 100;
    2296:	ec e5       	ldi	r30, 0x5C	; 92
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	48 2f       	mov	r20, r24
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	ca 01       	movw	r24, r20
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	c9 01       	movw	r24, r18
    22aa:	96 95       	lsr	r25
    22ac:	98 2f       	mov	r25, r24
    22ae:	88 27       	eor	r24, r24
    22b0:	97 95       	ror	r25
    22b2:	87 95       	ror	r24
    22b4:	82 1b       	sub	r24, r18
    22b6:	93 0b       	sbc	r25, r19
    22b8:	84 0f       	add	r24, r20
    22ba:	95 1f       	adc	r25, r21
    22bc:	24 e6       	ldi	r18, 0x64	; 100
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	b9 01       	movw	r22, r18
    22c2:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__divmodhi4>
    22c6:	cb 01       	movw	r24, r22
    22c8:	80 83       	st	Z, r24
}
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <TWI_init>:
#include "twi.h"
#include "../../common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    22d2:	2f 92       	push	r2
    22d4:	3f 92       	push	r3
    22d6:	4f 92       	push	r4
    22d8:	5f 92       	push	r5
    22da:	6f 92       	push	r6
    22dc:	7f 92       	push	r7
    22de:	8f 92       	push	r8
    22e0:	9f 92       	push	r9
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	af 97       	sbiw	r28, 0x2f	; 47
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ((CPU_CLOCK/Config_Ptr->bit_rate)-16)/2;
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 87       	std	Y+12, r25	; 0x0c
    2310:	8b 87       	std	Y+11, r24	; 0x0b
    2312:	e9 81       	ldd	r30, Y+1	; 0x01
    2314:	fa 81       	ldd	r31, Y+2	; 0x02
    2316:	21 80       	ldd	r2, Z+1	; 0x01
    2318:	32 80       	ldd	r3, Z+2	; 0x02
    231a:	43 80       	ldd	r4, Z+3	; 0x03
    231c:	54 80       	ldd	r5, Z+4	; 0x04
    231e:	65 80       	ldd	r6, Z+5	; 0x05
    2320:	76 80       	ldd	r7, Z+6	; 0x06
    2322:	87 80       	ldd	r8, Z+7	; 0x07
    2324:	90 84       	ldd	r9, Z+8	; 0x08
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	32 e1       	ldi	r19, 0x12	; 18
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a2 2c       	mov	r10, r2
    2338:	b3 2c       	mov	r11, r3
    233a:	c4 2c       	mov	r12, r4
    233c:	d5 2c       	mov	r13, r5
    233e:	e6 2c       	mov	r14, r6
    2340:	f7 2c       	mov	r15, r7
    2342:	08 2d       	mov	r16, r8
    2344:	19 2d       	mov	r17, r9
    2346:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    234a:	a2 2e       	mov	r10, r18
    234c:	b3 2e       	mov	r11, r19
    234e:	c4 2e       	mov	r12, r20
    2350:	d5 2e       	mov	r13, r21
    2352:	e6 2e       	mov	r14, r22
    2354:	f7 2e       	mov	r15, r23
    2356:	08 2f       	mov	r16, r24
    2358:	19 2f       	mov	r17, r25
    235a:	ab 82       	std	Y+3, r10	; 0x03
    235c:	bc 82       	std	Y+4, r11	; 0x04
    235e:	cd 82       	std	Y+5, r12	; 0x05
    2360:	de 82       	std	Y+6, r13	; 0x06
    2362:	ef 82       	std	Y+7, r14	; 0x07
    2364:	f8 86       	std	Y+8, r15	; 0x08
    2366:	09 87       	std	Y+9, r16	; 0x09
    2368:	1a 87       	std	Y+10, r17	; 0x0a
    236a:	90 ef       	ldi	r25, 0xF0	; 240
    236c:	9d 87       	std	Y+13, r25	; 0x0d
    236e:	ef ef       	ldi	r30, 0xFF	; 255
    2370:	ee 87       	std	Y+14, r30	; 0x0e
    2372:	ff ef       	ldi	r31, 0xFF	; 255
    2374:	ff 87       	std	Y+15, r31	; 0x0f
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	88 8b       	std	Y+16, r24	; 0x10
    237a:	9f ef       	ldi	r25, 0xFF	; 255
    237c:	99 8b       	std	Y+17, r25	; 0x11
    237e:	ef ef       	ldi	r30, 0xFF	; 255
    2380:	ea 8b       	std	Y+18, r30	; 0x12
    2382:	ff ef       	ldi	r31, 0xFF	; 255
    2384:	fb 8b       	std	Y+19, r31	; 0x13
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	8c 8b       	std	Y+20, r24	; 0x14
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	ed 85       	ldd	r30, Y+13	; 0x0d
    238e:	9e 0f       	add	r25, r30
    2390:	9d 8b       	std	Y+21, r25	; 0x15
    2392:	f1 e0       	ldi	r31, 0x01	; 1
    2394:	fd 8f       	std	Y+29, r31	; 0x1d
    2396:	8d 89       	ldd	r24, Y+21	; 0x15
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	89 17       	cp	r24, r25
    239c:	08 f0       	brcs	.+2      	; 0x23a0 <TWI_init+0xce>
    239e:	1d 8e       	std	Y+29, r1	; 0x1d
    23a0:	ec 81       	ldd	r30, Y+4	; 0x04
    23a2:	fe 85       	ldd	r31, Y+14	; 0x0e
    23a4:	ef 0f       	add	r30, r31
    23a6:	ee 8b       	std	Y+22, r30	; 0x16
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	8e 8f       	std	Y+30, r24	; 0x1e
    23ac:	9e 89       	ldd	r25, Y+22	; 0x16
    23ae:	ec 81       	ldd	r30, Y+4	; 0x04
    23b0:	9e 17       	cp	r25, r30
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <TWI_init+0xe4>
    23b4:	1e 8e       	std	Y+30, r1	; 0x1e
    23b6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    23b8:	8e 89       	ldd	r24, Y+22	; 0x16
    23ba:	f8 0f       	add	r31, r24
    23bc:	ff 8f       	std	Y+31, r31	; 0x1f
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	98 a3       	std	Y+32, r25	; 0x20
    23c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23c4:	fe 89       	ldd	r31, Y+22	; 0x16
    23c6:	ef 17       	cp	r30, r31
    23c8:	08 f0       	brcs	.+2      	; 0x23cc <TWI_init+0xfa>
    23ca:	18 a2       	std	Y+32, r1	; 0x20
    23cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ce:	98 a1       	ldd	r25, Y+32	; 0x20
    23d0:	89 2b       	or	r24, r25
    23d2:	8e 8f       	std	Y+30, r24	; 0x1e
    23d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23d6:	ee 8b       	std	Y+22, r30	; 0x16
    23d8:	fd 81       	ldd	r31, Y+5	; 0x05
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	f8 0f       	add	r31, r24
    23de:	ff 8b       	std	Y+23, r31	; 0x17
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	99 a3       	std	Y+33, r25	; 0x21
    23e4:	ef 89       	ldd	r30, Y+23	; 0x17
    23e6:	fd 81       	ldd	r31, Y+5	; 0x05
    23e8:	ef 17       	cp	r30, r31
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <TWI_init+0x11c>
    23ec:	19 a2       	std	Y+33, r1	; 0x21
    23ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f0:	9f 89       	ldd	r25, Y+23	; 0x17
    23f2:	89 0f       	add	r24, r25
    23f4:	8a a3       	std	Y+34, r24	; 0x22
    23f6:	e1 e0       	ldi	r30, 0x01	; 1
    23f8:	eb a3       	std	Y+35, r30	; 0x23
    23fa:	fa a1       	ldd	r31, Y+34	; 0x22
    23fc:	8f 89       	ldd	r24, Y+23	; 0x17
    23fe:	f8 17       	cp	r31, r24
    2400:	08 f0       	brcs	.+2      	; 0x2404 <TWI_init+0x132>
    2402:	1b a2       	std	Y+35, r1	; 0x23
    2404:	99 a1       	ldd	r25, Y+33	; 0x21
    2406:	eb a1       	ldd	r30, Y+35	; 0x23
    2408:	9e 2b       	or	r25, r30
    240a:	99 a3       	std	Y+33, r25	; 0x21
    240c:	fa a1       	ldd	r31, Y+34	; 0x22
    240e:	ff 8b       	std	Y+23, r31	; 0x17
    2410:	8e 81       	ldd	r24, Y+6	; 0x06
    2412:	98 89       	ldd	r25, Y+16	; 0x10
    2414:	89 0f       	add	r24, r25
    2416:	88 8f       	std	Y+24, r24	; 0x18
    2418:	e1 e0       	ldi	r30, 0x01	; 1
    241a:	ec a3       	std	Y+36, r30	; 0x24
    241c:	f8 8d       	ldd	r31, Y+24	; 0x18
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	f8 17       	cp	r31, r24
    2422:	08 f0       	brcs	.+2      	; 0x2426 <TWI_init+0x154>
    2424:	1c a2       	std	Y+36, r1	; 0x24
    2426:	99 a1       	ldd	r25, Y+33	; 0x21
    2428:	e8 8d       	ldd	r30, Y+24	; 0x18
    242a:	9e 0f       	add	r25, r30
    242c:	9d a3       	std	Y+37, r25	; 0x25
    242e:	f1 e0       	ldi	r31, 0x01	; 1
    2430:	fe a3       	std	Y+38, r31	; 0x26
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	98 8d       	ldd	r25, Y+24	; 0x18
    2436:	89 17       	cp	r24, r25
    2438:	08 f0       	brcs	.+2      	; 0x243c <TWI_init+0x16a>
    243a:	1e a2       	std	Y+38, r1	; 0x26
    243c:	ec a1       	ldd	r30, Y+36	; 0x24
    243e:	fe a1       	ldd	r31, Y+38	; 0x26
    2440:	ef 2b       	or	r30, r31
    2442:	ec a3       	std	Y+36, r30	; 0x24
    2444:	8d a1       	ldd	r24, Y+37	; 0x25
    2446:	88 8f       	std	Y+24, r24	; 0x18
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	e9 89       	ldd	r30, Y+17	; 0x11
    244c:	9e 0f       	add	r25, r30
    244e:	99 8f       	std	Y+25, r25	; 0x19
    2450:	f1 e0       	ldi	r31, 0x01	; 1
    2452:	ff a3       	std	Y+39, r31	; 0x27
    2454:	89 8d       	ldd	r24, Y+25	; 0x19
    2456:	9f 81       	ldd	r25, Y+7	; 0x07
    2458:	89 17       	cp	r24, r25
    245a:	08 f0       	brcs	.+2      	; 0x245e <TWI_init+0x18c>
    245c:	1f a2       	std	Y+39, r1	; 0x27
    245e:	ec a1       	ldd	r30, Y+36	; 0x24
    2460:	f9 8d       	ldd	r31, Y+25	; 0x19
    2462:	ef 0f       	add	r30, r31
    2464:	e8 a7       	std	Y+40, r30	; 0x28
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	89 a7       	std	Y+41, r24	; 0x29
    246a:	98 a5       	ldd	r25, Y+40	; 0x28
    246c:	e9 8d       	ldd	r30, Y+25	; 0x19
    246e:	9e 17       	cp	r25, r30
    2470:	08 f0       	brcs	.+2      	; 0x2474 <TWI_init+0x1a2>
    2472:	19 a6       	std	Y+41, r1	; 0x29
    2474:	ff a1       	ldd	r31, Y+39	; 0x27
    2476:	89 a5       	ldd	r24, Y+41	; 0x29
    2478:	f8 2b       	or	r31, r24
    247a:	ff a3       	std	Y+39, r31	; 0x27
    247c:	98 a5       	ldd	r25, Y+40	; 0x28
    247e:	99 8f       	std	Y+25, r25	; 0x19
    2480:	e8 85       	ldd	r30, Y+8	; 0x08
    2482:	fa 89       	ldd	r31, Y+18	; 0x12
    2484:	ef 0f       	add	r30, r31
    2486:	ea 8f       	std	Y+26, r30	; 0x1a
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8a a7       	std	Y+42, r24	; 0x2a
    248c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    248e:	e8 85       	ldd	r30, Y+8	; 0x08
    2490:	9e 17       	cp	r25, r30
    2492:	08 f0       	brcs	.+2      	; 0x2496 <TWI_init+0x1c4>
    2494:	1a a6       	std	Y+42, r1	; 0x2a
    2496:	ff a1       	ldd	r31, Y+39	; 0x27
    2498:	8a 8d       	ldd	r24, Y+26	; 0x1a
    249a:	f8 0f       	add	r31, r24
    249c:	fb a7       	std	Y+43, r31	; 0x2b
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	9c a7       	std	Y+44, r25	; 0x2c
    24a2:	eb a5       	ldd	r30, Y+43	; 0x2b
    24a4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    24a6:	ef 17       	cp	r30, r31
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <TWI_init+0x1da>
    24aa:	1c a6       	std	Y+44, r1	; 0x2c
    24ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    24ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    24b0:	89 2b       	or	r24, r25
    24b2:	8a a7       	std	Y+42, r24	; 0x2a
    24b4:	eb a5       	ldd	r30, Y+43	; 0x2b
    24b6:	ea 8f       	std	Y+26, r30	; 0x1a
    24b8:	f9 85       	ldd	r31, Y+9	; 0x09
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	f8 0f       	add	r31, r24
    24be:	fb 8f       	std	Y+27, r31	; 0x1b
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	9d a7       	std	Y+45, r25	; 0x2d
    24c4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    24c6:	f9 85       	ldd	r31, Y+9	; 0x09
    24c8:	ef 17       	cp	r30, r31
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <TWI_init+0x1fc>
    24cc:	1d a6       	std	Y+45, r1	; 0x2d
    24ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    24d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24d2:	89 0f       	add	r24, r25
    24d4:	8e a7       	std	Y+46, r24	; 0x2e
    24d6:	e1 e0       	ldi	r30, 0x01	; 1
    24d8:	ef a7       	std	Y+47, r30	; 0x2f
    24da:	fe a5       	ldd	r31, Y+46	; 0x2e
    24dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24de:	f8 17       	cp	r31, r24
    24e0:	08 f0       	brcs	.+2      	; 0x24e4 <TWI_init+0x212>
    24e2:	1f a6       	std	Y+47, r1	; 0x2f
    24e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    24e6:	ef a5       	ldd	r30, Y+47	; 0x2f
    24e8:	9e 2b       	or	r25, r30
    24ea:	9d a7       	std	Y+45, r25	; 0x2d
    24ec:	fe a5       	ldd	r31, Y+46	; 0x2e
    24ee:	fb 8f       	std	Y+27, r31	; 0x1b
    24f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f2:	9c 89       	ldd	r25, Y+20	; 0x14
    24f4:	89 0f       	add	r24, r25
    24f6:	8c 8f       	std	Y+28, r24	; 0x1c
    24f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fa:	ec 8d       	ldd	r30, Y+28	; 0x1c
    24fc:	8e 0f       	add	r24, r30
    24fe:	8c 8f       	std	Y+28, r24	; 0x1c
    2500:	ad 88       	ldd	r10, Y+21	; 0x15
    2502:	be 88       	ldd	r11, Y+22	; 0x16
    2504:	cf 88       	ldd	r12, Y+23	; 0x17
    2506:	d8 8c       	ldd	r13, Y+24	; 0x18
    2508:	e9 8c       	ldd	r14, Y+25	; 0x19
    250a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    250c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    250e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2510:	2a 2d       	mov	r18, r10
    2512:	3b 2d       	mov	r19, r11
    2514:	4c 2d       	mov	r20, r12
    2516:	5d 2d       	mov	r21, r13
    2518:	6e 2d       	mov	r22, r14
    251a:	7f 2d       	mov	r23, r15
    251c:	80 2f       	mov	r24, r16
    251e:	91 2f       	mov	r25, r17
    2520:	01 e0       	ldi	r16, 0x01	; 1
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    2526:	a2 2e       	mov	r10, r18
    2528:	b3 2e       	mov	r11, r19
    252a:	c4 2e       	mov	r12, r20
    252c:	d5 2e       	mov	r13, r21
    252e:	e6 2e       	mov	r14, r22
    2530:	f7 2e       	mov	r15, r23
    2532:	08 2f       	mov	r16, r24
    2534:	19 2f       	mov	r17, r25
    2536:	2a 2d       	mov	r18, r10
    2538:	3b 2d       	mov	r19, r11
    253a:	4c 2d       	mov	r20, r12
    253c:	5d 2d       	mov	r21, r13
    253e:	6e 2d       	mov	r22, r14
    2540:	7f 2d       	mov	r23, r15
    2542:	80 2f       	mov	r24, r16
    2544:	91 2f       	mov	r25, r17
    2546:	82 2f       	mov	r24, r18
    2548:	eb 85       	ldd	r30, Y+11	; 0x0b
    254a:	fc 85       	ldd	r31, Y+12	; 0x0c
    254c:	80 83       	st	Z, r24
	TWSR = 0x00;
    254e:	e1 e2       	ldi	r30, 0x21	; 33
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); // my address = 0x01 :)
    2554:	a2 e2       	ldi	r26, 0x22	; 34
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	80 81       	ld	r24, Z
    255e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2560:	e6 e5       	ldi	r30, 0x56	; 86
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	84 e0       	ldi	r24, 0x04	; 4
    2566:	80 83       	st	Z, r24
}
    2568:	af 96       	adiw	r28, 0x2f	; 47
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	bf 90       	pop	r11
    2586:	af 90       	pop	r10
    2588:	9f 90       	pop	r9
    258a:	8f 90       	pop	r8
    258c:	7f 90       	pop	r7
    258e:	6f 90       	pop	r6
    2590:	5f 90       	pop	r5
    2592:	4f 90       	pop	r4
    2594:	3f 90       	pop	r3
    2596:	2f 90       	pop	r2
    2598:	08 95       	ret

0000259a <TWI_start>:

void TWI_start(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    25a2:	e6 e5       	ldi	r30, 0x56	; 86
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	84 ea       	ldi	r24, 0xA4	; 164
    25a8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25aa:	e6 e5       	ldi	r30, 0x56	; 86
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	88 23       	and	r24, r24
    25b2:	dc f7       	brge	.-10     	; 0x25aa <TWI_start+0x10>
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <TWI_stop>:

void TWI_stop(void)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    25c2:	e6 e5       	ldi	r30, 0x56	; 86
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	84 e9       	ldi	r24, 0x94	; 148
    25c8:	80 83       	st	Z, r24
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    25dc:	e3 e2       	ldi	r30, 0x23	; 35
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    25e4:	e6 e5       	ldi	r30, 0x56	; 86
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	84 e8       	ldi	r24, 0x84	; 132
    25ea:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25ec:	e6 e5       	ldi	r30, 0x56	; 86
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	88 23       	and	r24, r24
    25f4:	dc f7       	brge	.-10     	; 0x25ec <TWI_writeByte+0x1c>
}
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2606:	e6 e5       	ldi	r30, 0x56	; 86
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	84 ec       	ldi	r24, 0xC4	; 196
    260c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    260e:	e6 e5       	ldi	r30, 0x56	; 86
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	dc f7       	brge	.-10     	; 0x260e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2618:	e3 e2       	ldi	r30, 0x23	; 35
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    262c:	e6 e5       	ldi	r30, 0x56	; 86
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	84 e8       	ldi	r24, 0x84	; 132
    2632:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2634:	e6 e5       	ldi	r30, 0x56	; 86
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 23       	and	r24, r24
    263c:	dc f7       	brge	.-10     	; 0x2634 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    263e:	e3 e2       	ldi	r30, 0x23	; 35
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	0f 92       	push	r0
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2654:	e1 e2       	ldi	r30, 0x21	; 33
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	88 7f       	andi	r24, 0xF8	; 248
    265c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    265e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <GPIO_setupPinDirection+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <GPIO_setupPinDirection+0x8>
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	6a 83       	std	Y+2, r22	; 0x02
    267a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	88 30       	cpi	r24, 0x08	; 8
    2680:	08 f0       	brcs	.+2      	; 0x2684 <GPIO_setupPinDirection+0x1c>
    2682:	d5 c0       	rjmp	.+426    	; 0x282e <GPIO_setupPinDirection+0x1c6>
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	84 30       	cpi	r24, 0x04	; 4
    2688:	08 f0       	brcs	.+2      	; 0x268c <GPIO_setupPinDirection+0x24>
    268a:	d1 c0       	rjmp	.+418    	; 0x282e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	3d 83       	std	Y+5, r19	; 0x05
    2694:	2c 83       	std	Y+4, r18	; 0x04
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	91 05       	cpc	r25, r1
    269e:	09 f4       	brne	.+2      	; 0x26a2 <GPIO_setupPinDirection+0x3a>
    26a0:	43 c0       	rjmp	.+134    	; 0x2728 <GPIO_setupPinDirection+0xc0>
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <GPIO_setupPinDirection+0x4e>
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	71 f0       	breq	.+28     	; 0x26d0 <GPIO_setupPinDirection+0x68>
    26b4:	bc c0       	rjmp	.+376    	; 0x282e <GPIO_setupPinDirection+0x1c6>
    26b6:	2c 81       	ldd	r18, Y+4	; 0x04
    26b8:	3d 81       	ldd	r19, Y+5	; 0x05
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	09 f4       	brne	.+2      	; 0x26c2 <GPIO_setupPinDirection+0x5a>
    26c0:	5f c0       	rjmp	.+190    	; 0x2780 <GPIO_setupPinDirection+0x118>
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	9d 81       	ldd	r25, Y+5	; 0x05
    26c6:	83 30       	cpi	r24, 0x03	; 3
    26c8:	91 05       	cpc	r25, r1
    26ca:	09 f4       	brne	.+2      	; 0x26ce <GPIO_setupPinDirection+0x66>
    26cc:	85 c0       	rjmp	.+266    	; 0x27d8 <GPIO_setupPinDirection+0x170>
    26ce:	af c0       	rjmp	.+350    	; 0x282e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	a1 f4       	brne	.+40     	; 0x26fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    26d6:	aa e3       	ldi	r26, 0x3A	; 58
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ea e3       	ldi	r30, 0x3A	; 58
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <GPIO_setupPinDirection+0x8c>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <GPIO_setupPinDirection+0x88>
    26f8:	84 2b       	or	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	98 c0       	rjmp	.+304    	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    26fe:	aa e3       	ldi	r26, 0x3A	; 58
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	ea e3       	ldi	r30, 0x3A	; 58
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <GPIO_setupPinDirection+0xb4>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <GPIO_setupPinDirection+0xb0>
    2720:	80 95       	com	r24
    2722:	84 23       	and	r24, r20
    2724:	8c 93       	st	X, r24
    2726:	83 c0       	rjmp	.+262    	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	a1 f4       	brne	.+40     	; 0x2756 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    272e:	a7 e3       	ldi	r26, 0x37	; 55
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e7 e3       	ldi	r30, 0x37	; 55
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 2e       	mov	r0, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <GPIO_setupPinDirection+0xe4>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	0a 94       	dec	r0
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <GPIO_setupPinDirection+0xe0>
    2750:	84 2b       	or	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	6c c0       	rjmp	.+216    	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2756:	a7 e3       	ldi	r26, 0x37	; 55
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e7 e3       	ldi	r30, 0x37	; 55
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <GPIO_setupPinDirection+0x10c>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <GPIO_setupPinDirection+0x108>
    2778:	80 95       	com	r24
    277a:	84 23       	and	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	57 c0       	rjmp	.+174    	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	a1 f4       	brne	.+40     	; 0x27ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2786:	a4 e3       	ldi	r26, 0x34	; 52
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e4 e3       	ldi	r30, 0x34	; 52
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	48 2f       	mov	r20, r24
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	02 2e       	mov	r0, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <GPIO_setupPinDirection+0x13c>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <GPIO_setupPinDirection+0x138>
    27a8:	84 2b       	or	r24, r20
    27aa:	8c 93       	st	X, r24
    27ac:	40 c0       	rjmp	.+128    	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    27ae:	a4 e3       	ldi	r26, 0x34	; 52
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e4 e3       	ldi	r30, 0x34	; 52
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 2e       	mov	r0, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <GPIO_setupPinDirection+0x164>
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	0a 94       	dec	r0
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <GPIO_setupPinDirection+0x160>
    27d0:	80 95       	com	r24
    27d2:	84 23       	and	r24, r20
    27d4:	8c 93       	st	X, r24
    27d6:	2b c0       	rjmp	.+86     	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	a1 f4       	brne	.+40     	; 0x2806 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    27de:	a1 e3       	ldi	r26, 0x31	; 49
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e1 e3       	ldi	r30, 0x31	; 49
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 2e       	mov	r0, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <GPIO_setupPinDirection+0x194>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <GPIO_setupPinDirection+0x190>
    2800:	84 2b       	or	r24, r20
    2802:	8c 93       	st	X, r24
    2804:	14 c0       	rjmp	.+40     	; 0x282e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2806:	a1 e3       	ldi	r26, 0x31	; 49
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e1 e3       	ldi	r30, 0x31	; 49
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	02 2e       	mov	r0, r18
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <GPIO_setupPinDirection+0x1bc>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <GPIO_setupPinDirection+0x1b8>
    2828:	80 95       	com	r24
    282a:	84 23       	and	r24, r20
    282c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <GPIO_writePin+0x6>
    2844:	00 d0       	rcall	.+0      	; 0x2846 <GPIO_writePin+0x8>
    2846:	0f 92       	push	r0
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	6a 83       	std	Y+2, r22	; 0x02
    2850:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	88 30       	cpi	r24, 0x08	; 8
    2856:	08 f0       	brcs	.+2      	; 0x285a <GPIO_writePin+0x1c>
    2858:	d5 c0       	rjmp	.+426    	; 0x2a04 <GPIO_writePin+0x1c6>
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	84 30       	cpi	r24, 0x04	; 4
    285e:	08 f0       	brcs	.+2      	; 0x2862 <GPIO_writePin+0x24>
    2860:	d1 c0       	rjmp	.+418    	; 0x2a04 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	3d 83       	std	Y+5, r19	; 0x05
    286a:	2c 83       	std	Y+4, r18	; 0x04
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	91 05       	cpc	r25, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <GPIO_writePin+0x3a>
    2876:	43 c0       	rjmp	.+134    	; 0x28fe <GPIO_writePin+0xc0>
    2878:	2c 81       	ldd	r18, Y+4	; 0x04
    287a:	3d 81       	ldd	r19, Y+5	; 0x05
    287c:	22 30       	cpi	r18, 0x02	; 2
    287e:	31 05       	cpc	r19, r1
    2880:	2c f4       	brge	.+10     	; 0x288c <GPIO_writePin+0x4e>
    2882:	8c 81       	ldd	r24, Y+4	; 0x04
    2884:	9d 81       	ldd	r25, Y+5	; 0x05
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	71 f0       	breq	.+28     	; 0x28a6 <GPIO_writePin+0x68>
    288a:	bc c0       	rjmp	.+376    	; 0x2a04 <GPIO_writePin+0x1c6>
    288c:	2c 81       	ldd	r18, Y+4	; 0x04
    288e:	3d 81       	ldd	r19, Y+5	; 0x05
    2890:	22 30       	cpi	r18, 0x02	; 2
    2892:	31 05       	cpc	r19, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <GPIO_writePin+0x5a>
    2896:	5f c0       	rjmp	.+190    	; 0x2956 <GPIO_writePin+0x118>
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	9d 81       	ldd	r25, Y+5	; 0x05
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <GPIO_writePin+0x66>
    28a2:	85 c0       	rjmp	.+266    	; 0x29ae <GPIO_writePin+0x170>
    28a4:	af c0       	rjmp	.+350    	; 0x2a04 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	a1 f4       	brne	.+40     	; 0x28d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    28ac:	ab e3       	ldi	r26, 0x3B	; 59
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	eb e3       	ldi	r30, 0x3B	; 59
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <GPIO_writePin+0x8c>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <GPIO_writePin+0x88>
    28ce:	84 2b       	or	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	98 c0       	rjmp	.+304    	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    28d4:	ab e3       	ldi	r26, 0x3B	; 59
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	eb e3       	ldi	r30, 0x3B	; 59
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <GPIO_writePin+0xb4>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <GPIO_writePin+0xb0>
    28f6:	80 95       	com	r24
    28f8:	84 23       	and	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	83 c0       	rjmp	.+262    	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	a1 f4       	brne	.+40     	; 0x292c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2904:	a8 e3       	ldi	r26, 0x38	; 56
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e8 e3       	ldi	r30, 0x38	; 56
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_writePin+0xe4>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_writePin+0xe0>
    2926:	84 2b       	or	r24, r20
    2928:	8c 93       	st	X, r24
    292a:	6c c0       	rjmp	.+216    	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    292c:	a8 e3       	ldi	r26, 0x38	; 56
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e8 e3       	ldi	r30, 0x38	; 56
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	02 2e       	mov	r0, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <GPIO_writePin+0x10c>
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <GPIO_writePin+0x108>
    294e:	80 95       	com	r24
    2950:	84 23       	and	r24, r20
    2952:	8c 93       	st	X, r24
    2954:	57 c0       	rjmp	.+174    	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	a1 f4       	brne	.+40     	; 0x2984 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    295c:	a5 e3       	ldi	r26, 0x35	; 53
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e3       	ldi	r30, 0x35	; 53
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	48 2f       	mov	r20, r24
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 2e       	mov	r0, r18
    2974:	02 c0       	rjmp	.+4      	; 0x297a <GPIO_writePin+0x13c>
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	0a 94       	dec	r0
    297c:	e2 f7       	brpl	.-8      	; 0x2976 <GPIO_writePin+0x138>
    297e:	84 2b       	or	r24, r20
    2980:	8c 93       	st	X, r24
    2982:	40 c0       	rjmp	.+128    	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2984:	a5 e3       	ldi	r26, 0x35	; 53
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e5 e3       	ldi	r30, 0x35	; 53
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	48 2f       	mov	r20, r24
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	02 2e       	mov	r0, r18
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <GPIO_writePin+0x164>
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	0a 94       	dec	r0
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <GPIO_writePin+0x160>
    29a6:	80 95       	com	r24
    29a8:	84 23       	and	r24, r20
    29aa:	8c 93       	st	X, r24
    29ac:	2b c0       	rjmp	.+86     	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	81 30       	cpi	r24, 0x01	; 1
    29b2:	a1 f4       	brne	.+40     	; 0x29dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    29b4:	a2 e3       	ldi	r26, 0x32	; 50
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e2 e3       	ldi	r30, 0x32	; 50
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	48 2f       	mov	r20, r24
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	02 2e       	mov	r0, r18
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <GPIO_writePin+0x194>
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	0a 94       	dec	r0
    29d4:	e2 f7       	brpl	.-8      	; 0x29ce <GPIO_writePin+0x190>
    29d6:	84 2b       	or	r24, r20
    29d8:	8c 93       	st	X, r24
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    29dc:	a2 e3       	ldi	r26, 0x32	; 50
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e2 e3       	ldi	r30, 0x32	; 50
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	48 2f       	mov	r20, r24
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 2e       	mov	r0, r18
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <GPIO_writePin+0x1bc>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <GPIO_writePin+0x1b8>
    29fe:	80 95       	com	r24
    2a00:	84 23       	and	r24, r20
    2a02:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <GPIO_readPin+0x6>
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <GPIO_readPin+0x8>
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	8a 83       	std	Y+2, r24	; 0x02
    2a24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2a26:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	88 30       	cpi	r24, 0x08	; 8
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <GPIO_readPin+0x1c>
    2a2e:	84 c0       	rjmp	.+264    	; 0x2b38 <GPIO_readPin+0x124>
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	84 30       	cpi	r24, 0x04	; 4
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <GPIO_readPin+0x24>
    2a36:	80 c0       	rjmp	.+256    	; 0x2b38 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	3d 83       	std	Y+5, r19	; 0x05
    2a40:	2c 83       	std	Y+4, r18	; 0x04
    2a42:	4c 81       	ldd	r20, Y+4	; 0x04
    2a44:	5d 81       	ldd	r21, Y+5	; 0x05
    2a46:	41 30       	cpi	r20, 0x01	; 1
    2a48:	51 05       	cpc	r21, r1
    2a4a:	79 f1       	breq	.+94     	; 0x2aaa <GPIO_readPin+0x96>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	91 05       	cpc	r25, r1
    2a54:	34 f4       	brge	.+12     	; 0x2a62 <GPIO_readPin+0x4e>
    2a56:	2c 81       	ldd	r18, Y+4	; 0x04
    2a58:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5a:	21 15       	cp	r18, r1
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <GPIO_readPin+0x66>
    2a60:	6b c0       	rjmp	.+214    	; 0x2b38 <GPIO_readPin+0x124>
    2a62:	4c 81       	ldd	r20, Y+4	; 0x04
    2a64:	5d 81       	ldd	r21, Y+5	; 0x05
    2a66:	42 30       	cpi	r20, 0x02	; 2
    2a68:	51 05       	cpc	r21, r1
    2a6a:	b9 f1       	breq	.+110    	; 0x2ada <GPIO_readPin+0xc6>
    2a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a70:	83 30       	cpi	r24, 0x03	; 3
    2a72:	91 05       	cpc	r25, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <GPIO_readPin+0x64>
    2a76:	49 c0       	rjmp	.+146    	; 0x2b0a <GPIO_readPin+0xf6>
    2a78:	5f c0       	rjmp	.+190    	; 0x2b38 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2a7a:	e9 e3       	ldi	r30, 0x39	; 57
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a9 01       	movw	r20, r18
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <GPIO_readPin+0x7e>
    2a8e:	55 95       	asr	r21
    2a90:	47 95       	ror	r20
    2a92:	8a 95       	dec	r24
    2a94:	e2 f7       	brpl	.-8      	; 0x2a8e <GPIO_readPin+0x7a>
    2a96:	ca 01       	movw	r24, r20
    2a98:	81 70       	andi	r24, 0x01	; 1
    2a9a:	90 70       	andi	r25, 0x00	; 0
    2a9c:	88 23       	and	r24, r24
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	49 c0       	rjmp	.+146    	; 0x2b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	47 c0       	rjmp	.+142    	; 0x2b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2aaa:	e6 e3       	ldi	r30, 0x36	; 54
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a9 01       	movw	r20, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <GPIO_readPin+0xae>
    2abe:	55 95       	asr	r21
    2ac0:	47 95       	ror	r20
    2ac2:	8a 95       	dec	r24
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <GPIO_readPin+0xaa>
    2ac6:	ca 01       	movw	r24, r20
    2ac8:	81 70       	andi	r24, 0x01	; 1
    2aca:	90 70       	andi	r25, 0x00	; 0
    2acc:	88 23       	and	r24, r24
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	31 c0       	rjmp	.+98     	; 0x2b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2ad6:	19 82       	std	Y+1, r1	; 0x01
    2ad8:	2f c0       	rjmp	.+94     	; 0x2b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2ada:	e3 e3       	ldi	r30, 0x33	; 51
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a9 01       	movw	r20, r18
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <GPIO_readPin+0xde>
    2aee:	55 95       	asr	r21
    2af0:	47 95       	ror	r20
    2af2:	8a 95       	dec	r24
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <GPIO_readPin+0xda>
    2af6:	ca 01       	movw	r24, r20
    2af8:	81 70       	andi	r24, 0x01	; 1
    2afa:	90 70       	andi	r25, 0x00	; 0
    2afc:	88 23       	and	r24, r24
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	19 c0       	rjmp	.+50     	; 0x2b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	17 c0       	rjmp	.+46     	; 0x2b38 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2b0a:	e0 e3       	ldi	r30, 0x30	; 48
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a9 01       	movw	r20, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <GPIO_readPin+0x10e>
    2b1e:	55 95       	asr	r21
    2b20:	47 95       	ror	r20
    2b22:	8a 95       	dec	r24
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <GPIO_readPin+0x10a>
    2b26:	ca 01       	movw	r24, r20
    2b28:	81 70       	andi	r24, 0x01	; 1
    2b2a:	90 70       	andi	r25, 0x00	; 0
    2b2c:	88 23       	and	r24, r24
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2b36:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <GPIO_setupPortDirection+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <GPIO_setupPortDirection+0x8>
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	84 30       	cpi	r24, 0x04	; 4
    2b5e:	90 f5       	brcc	.+100    	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	3c 83       	std	Y+4, r19	; 0x04
    2b68:	2b 83       	std	Y+3, r18	; 0x03
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	81 30       	cpi	r24, 0x01	; 1
    2b70:	91 05       	cpc	r25, r1
    2b72:	d1 f0       	breq	.+52     	; 0x2ba8 <GPIO_setupPortDirection+0x5e>
    2b74:	2b 81       	ldd	r18, Y+3	; 0x03
    2b76:	3c 81       	ldd	r19, Y+4	; 0x04
    2b78:	22 30       	cpi	r18, 0x02	; 2
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <GPIO_setupPortDirection+0x3e>
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	9c 81       	ldd	r25, Y+4	; 0x04
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	61 f0       	breq	.+24     	; 0x2b9e <GPIO_setupPortDirection+0x54>
    2b86:	1e c0       	rjmp	.+60     	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
    2b88:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8c:	22 30       	cpi	r18, 0x02	; 2
    2b8e:	31 05       	cpc	r19, r1
    2b90:	81 f0       	breq	.+32     	; 0x2bb2 <GPIO_setupPortDirection+0x68>
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	83 30       	cpi	r24, 0x03	; 3
    2b98:	91 05       	cpc	r25, r1
    2b9a:	81 f0       	breq	.+32     	; 0x2bbc <GPIO_setupPortDirection+0x72>
    2b9c:	13 c0       	rjmp	.+38     	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2b9e:	ea e3       	ldi	r30, 0x3A	; 58
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	80 83       	st	Z, r24
    2ba6:	0e c0       	rjmp	.+28     	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2ba8:	e7 e3       	ldi	r30, 0x37	; 55
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	80 83       	st	Z, r24
    2bb0:	09 c0       	rjmp	.+18     	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2bb2:	e4 e3       	ldi	r30, 0x34	; 52
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	80 83       	st	Z, r24
    2bba:	04 c0       	rjmp	.+8      	; 0x2bc4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2bbc:	e1 e3       	ldi	r30, 0x31	; 49
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	80 83       	st	Z, r24
			break;
		}
	}
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <GPIO_writePort+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <GPIO_writePort+0x8>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	84 30       	cpi	r24, 0x04	; 4
    2be6:	90 f5       	brcc	.+100    	; 0x2c4c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	3c 83       	std	Y+4, r19	; 0x04
    2bf0:	2b 83       	std	Y+3, r18	; 0x03
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	d1 f0       	breq	.+52     	; 0x2c30 <GPIO_writePort+0x5e>
    2bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    2c00:	22 30       	cpi	r18, 0x02	; 2
    2c02:	31 05       	cpc	r19, r1
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <GPIO_writePort+0x3e>
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	61 f0       	breq	.+24     	; 0x2c26 <GPIO_writePort+0x54>
    2c0e:	1e c0       	rjmp	.+60     	; 0x2c4c <GPIO_writePort+0x7a>
    2c10:	2b 81       	ldd	r18, Y+3	; 0x03
    2c12:	3c 81       	ldd	r19, Y+4	; 0x04
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	81 f0       	breq	.+32     	; 0x2c3a <GPIO_writePort+0x68>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	83 30       	cpi	r24, 0x03	; 3
    2c20:	91 05       	cpc	r25, r1
    2c22:	81 f0       	breq	.+32     	; 0x2c44 <GPIO_writePort+0x72>
    2c24:	13 c0       	rjmp	.+38     	; 0x2c4c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2c26:	eb e3       	ldi	r30, 0x3B	; 59
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	80 83       	st	Z, r24
    2c2e:	0e c0       	rjmp	.+28     	; 0x2c4c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2c30:	e8 e3       	ldi	r30, 0x38	; 56
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	80 83       	st	Z, r24
    2c38:	09 c0       	rjmp	.+18     	; 0x2c4c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2c3a:	e5 e3       	ldi	r30, 0x35	; 53
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	80 83       	st	Z, r24
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2c44:	e2 e3       	ldi	r30, 0x32	; 50
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <GPIO_readPort+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <GPIO_readPort+0x8>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2c68:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	84 30       	cpi	r24, 0x04	; 4
    2c6e:	90 f5       	brcc	.+100    	; 0x2cd4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	28 2f       	mov	r18, r24
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	3c 83       	std	Y+4, r19	; 0x04
    2c78:	2b 83       	std	Y+3, r18	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	91 05       	cpc	r25, r1
    2c82:	d1 f0       	breq	.+52     	; 0x2cb8 <GPIO_readPort+0x5e>
    2c84:	2b 81       	ldd	r18, Y+3	; 0x03
    2c86:	3c 81       	ldd	r19, Y+4	; 0x04
    2c88:	22 30       	cpi	r18, 0x02	; 2
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	2c f4       	brge	.+10     	; 0x2c98 <GPIO_readPort+0x3e>
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	61 f0       	breq	.+24     	; 0x2cae <GPIO_readPort+0x54>
    2c96:	1e c0       	rjmp	.+60     	; 0x2cd4 <GPIO_readPort+0x7a>
    2c98:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9c:	22 30       	cpi	r18, 0x02	; 2
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	81 f0       	breq	.+32     	; 0x2cc2 <GPIO_readPort+0x68>
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	83 30       	cpi	r24, 0x03	; 3
    2ca8:	91 05       	cpc	r25, r1
    2caa:	81 f0       	breq	.+32     	; 0x2ccc <GPIO_readPort+0x72>
    2cac:	13 c0       	rjmp	.+38     	; 0x2cd4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2cae:	e9 e3       	ldi	r30, 0x39	; 57
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	0e c0       	rjmp	.+28     	; 0x2cd4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2cb8:	e6 e3       	ldi	r30, 0x36	; 54
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	89 83       	std	Y+1, r24	; 0x01
    2cc0:	09 c0       	rjmp	.+18     	; 0x2cd4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2cc2:	e3 e3       	ldi	r30, 0x33	; 51
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2ccc:	e0 e3       	ldi	r30, 0x30	; 48
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <PIR_init>:
#include "../../MCAL/GPIO/gpio.h"


/*Initializes the PIR sensor pin direction.*/
void PIR_init(void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_SENSOR_PORT_ID,  PIR_SENSOR_PIN_ID, PIN_INPUT);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>
}
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <PIR_getState>:

/*Reads the value from the PIR sensor and returns it.*/
uint8 PIR_getState(void)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
	return (GPIO_readPin(PIR_SENSOR_PORT_ID,  PIR_SENSOR_PIN_ID));
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	62 e0       	ldi	r22, 0x02	; 2
    2d08:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <GPIO_readPin>
}
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <DcMotor_Init>:


/* Initializes the DC motor by setting the direction for the motor pins and stopping the
motor at the beginning.*/
void DcMotor_Init(void)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
	/*setting the direction for the motor pins*/
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    2d1a:	83 e0       	ldi	r24, 0x03	; 3
    2d1c:	66 e0       	ldi	r22, 0x06	; 6
    2d1e:	41 e0       	ldi	r20, 0x01	; 1
    2d20:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	67 e0       	ldi	r22, 0x07	; 7
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_ENABLE_PORT_ID, MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	63 e0       	ldi	r22, 0x03	; 3
    2d32:	41 e0       	ldi	r20, 0x01	; 1
    2d34:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>

	/*stopping the motor at the beginning*/
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2d38:	83 e0       	ldi	r24, 0x03	; 3
    2d3a:	66 e0       	ldi	r22, 0x06	; 6
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	67 e0       	ldi	r22, 0x07	; 7
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
	GPIO_writePin(MOTOR_ENABLE_PORT_ID, MOTOR_ENABLE_PIN_ID, LOGIC_HIGH);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	63 e0       	ldi	r22, 0x03	; 3
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <DcMotor_Rotate>:

/*Controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based
on the input duty cycle. */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <DcMotor_Rotate+0x6>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <DcMotor_Rotate+0x8>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	3c 83       	std	Y+4, r19	; 0x04
    2d74:	2b 83       	std	Y+3, r18	; 0x03
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	a1 f0       	breq	.+40     	; 0x2da8 <DcMotor_Rotate+0x4c>
    2d80:	2b 81       	ldd	r18, Y+3	; 0x03
    2d82:	3c 81       	ldd	r19, Y+4	; 0x04
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	31 05       	cpc	r19, r1
    2d88:	d1 f0       	breq	.+52     	; 0x2dbe <DcMotor_Rotate+0x62>
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	01 f5       	brne	.+64     	; 0x2dd2 <DcMotor_Rotate+0x76>
	{
	case CW:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    2d92:	83 e0       	ldi	r24, 0x03	; 3
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	67 e0       	ldi	r22, 0x07	; 7
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
    2da6:	15 c0       	rjmp	.+42     	; 0x2dd2 <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	66 e0       	ldi	r22, 0x06	; 6
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	67 e0       	ldi	r22, 0x07	; 7
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
    2dbc:	0a c0       	rjmp	.+20     	; 0x2dd2 <DcMotor_Rotate+0x76>
		break;
	case Stop:
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	66 e0       	ldi	r22, 0x06	; 6
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2dc8:	83 e0       	ldi	r24, 0x03	; 3
    2dca:	67 e0       	ldi	r22, 0x07	; 7
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
		break;
	}
	 /*Motor speed in percentage (0 to 100%)*/
	PWM_Timer0_Start(speed);
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	0e 94 1d 11 	call	0x223a	; 0x223a <PWM_Timer0_Start>

}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../../MCAL/I2C/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <EEPROM_writeByte+0x6>
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <EEPROM_writeByte+0x8>
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2df8:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2dfc:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2e00:	88 30       	cpi	r24, 0x08	; 8
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <EEPROM_writeByte+0x22>
        return ERROR;
    2e04:	1c 82       	std	Y+4, r1	; 0x04
    2e06:	28 c0       	rjmp	.+80     	; 0x2e58 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	80 70       	andi	r24, 0x00	; 0
    2e0e:	97 70       	andi	r25, 0x07	; 7
    2e10:	88 0f       	add	r24, r24
    2e12:	89 2f       	mov	r24, r25
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 0b       	sbc	r25, r25
    2e18:	91 95       	neg	r25
    2e1a:	80 6a       	ori	r24, 0xA0	; 160
    2e1c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2e20:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2e24:	88 31       	cpi	r24, 0x18	; 24
    2e26:	11 f0       	breq	.+4      	; 0x2e2c <EEPROM_writeByte+0x46>
        return ERROR; 
    2e28:	1c 82       	std	Y+4, r1	; 0x04
    2e2a:	16 c0       	rjmp	.+44     	; 0x2e58 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e32:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2e36:	88 32       	cpi	r24, 0x28	; 40
    2e38:	11 f0       	breq	.+4      	; 0x2e3e <EEPROM_writeByte+0x58>
        return ERROR;
    2e3a:	1c 82       	std	Y+4, r1	; 0x04
    2e3c:	0d c0       	rjmp	.+26     	; 0x2e58 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e44:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2e48:	88 32       	cpi	r24, 0x28	; 40
    2e4a:	11 f0       	breq	.+4      	; 0x2e50 <EEPROM_writeByte+0x6a>
        return ERROR;
    2e4c:	1c 82       	std	Y+4, r1	; 0x04
    2e4e:	04 c0       	rjmp	.+8      	; 0x2e58 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2e50:	0e 94 dd 12 	call	0x25ba	; 0x25ba <TWI_stop>
	
    return SUCCESS;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	8c 83       	std	Y+4, r24	; 0x04
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <EEPROM_readByte+0x6>
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <EEPROM_readByte+0x8>
    2e70:	0f 92       	push	r0
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	7c 83       	std	Y+4, r23	; 0x04
    2e7c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2e7e:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2e82:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2e86:	88 30       	cpi	r24, 0x08	; 8
    2e88:	11 f0       	breq	.+4      	; 0x2e8e <EEPROM_readByte+0x26>
        return ERROR;
    2e8a:	1d 82       	std	Y+5, r1	; 0x05
    2e8c:	44 c0       	rjmp	.+136    	; 0x2f16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	80 70       	andi	r24, 0x00	; 0
    2e94:	97 70       	andi	r25, 0x07	; 7
    2e96:	88 0f       	add	r24, r24
    2e98:	89 2f       	mov	r24, r25
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	99 0b       	sbc	r25, r25
    2e9e:	91 95       	neg	r25
    2ea0:	80 6a       	ori	r24, 0xA0	; 160
    2ea2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2ea6:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2eaa:	88 31       	cpi	r24, 0x18	; 24
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <EEPROM_readByte+0x4a>
        return ERROR;
    2eae:	1d 82       	std	Y+5, r1	; 0x05
    2eb0:	32 c0       	rjmp	.+100    	; 0x2f16 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2eb8:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2ebc:	88 32       	cpi	r24, 0x28	; 40
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <EEPROM_readByte+0x5c>
        return ERROR;
    2ec0:	1d 82       	std	Y+5, r1	; 0x05
    2ec2:	29 c0       	rjmp	.+82     	; 0x2f16 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2ec4:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2ec8:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2ecc:	80 31       	cpi	r24, 0x10	; 16
    2ece:	11 f0       	breq	.+4      	; 0x2ed4 <EEPROM_readByte+0x6c>
        return ERROR;
    2ed0:	1d 82       	std	Y+5, r1	; 0x05
    2ed2:	21 c0       	rjmp	.+66     	; 0x2f16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed8:	80 70       	andi	r24, 0x00	; 0
    2eda:	97 70       	andi	r25, 0x07	; 7
    2edc:	88 0f       	add	r24, r24
    2ede:	89 2f       	mov	r24, r25
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	99 0b       	sbc	r25, r25
    2ee4:	91 95       	neg	r25
    2ee6:	81 6a       	ori	r24, 0xA1	; 161
    2ee8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2eec:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2ef0:	80 34       	cpi	r24, 0x40	; 64
    2ef2:	11 f0       	breq	.+4      	; 0x2ef8 <EEPROM_readByte+0x90>
        return ERROR;
    2ef4:	1d 82       	std	Y+5, r1	; 0x05
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2ef8:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_readByteWithNACK>
    2efc:	eb 81       	ldd	r30, Y+3	; 0x03
    2efe:	fc 81       	ldd	r31, Y+4	; 0x04
    2f00:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2f02:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_getStatus>
    2f06:	88 35       	cpi	r24, 0x58	; 88
    2f08:	11 f0       	breq	.+4      	; 0x2f0e <EEPROM_readByte+0xa6>
        return ERROR;
    2f0a:	1d 82       	std	Y+5, r1	; 0x05
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2f0e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <TWI_stop>

    return SUCCESS;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <Buzzer_init>:
#include "buzzer.h"


/*Initializes the buzzer pin direction and turn off the buzzer.*/
void Buzzer_init(void)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID , PIN_OUTPUT);
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	67 e0       	ldi	r22, 0x07	; 7
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 34 13 	call	0x2668	; 0x2668 <GPIO_setupPinDirection>
	Buzzer_off();
    2f3a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Buzzer_off>
}
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <Buzzer_off>:
/* Activates the buzzer. */
void Buzzer_off(void)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW);
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	67 e0       	ldi	r22, 0x07	; 7
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
}
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <Buzzer_on>:
/*Deactivates the buzzer.*/
void Buzzer_on(void)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_HIGH);
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	67 e0       	ldi	r22, 0x07	; 7
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 1f 14 	call	0x283e	; 0x283e <GPIO_writePin>
}
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <main>:
uint8 peopleIN=0;
/************************************************************/
void timer_handler(void);
/************************************************************/
int main()
{
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	ce 55       	subi	r28, 0x5E	; 94
    2f82:	d0 40       	sbci	r29, 0x00	; 0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_seting={_8_DATA_BITS,NO_PARITY,ONE_STOP_BIT,9600};
    2f8e:	ce 01       	movw	r24, r28
    2f90:	c9 96       	adiw	r24, 0x39	; 57
    2f92:	62 96       	adiw	r28, 0x12	; 18
    2f94:	9f af       	std	Y+63, r25	; 0x3f
    2f96:	8e af       	std	Y+62, r24	; 0x3e
    2f98:	62 97       	sbiw	r28, 0x12	; 18
    2f9a:	e9 e7       	ldi	r30, 0x79	; 121
    2f9c:	f1 e0       	ldi	r31, 0x01	; 1
    2f9e:	64 96       	adiw	r28, 0x14	; 20
    2fa0:	ff af       	std	Y+63, r31	; 0x3f
    2fa2:	ee af       	std	Y+62, r30	; 0x3e
    2fa4:	64 97       	sbiw	r28, 0x14	; 20
    2fa6:	f7 e0       	ldi	r31, 0x07	; 7
    2fa8:	65 96       	adiw	r28, 0x15	; 21
    2faa:	ff af       	std	Y+63, r31	; 0x3f
    2fac:	65 97       	sbiw	r28, 0x15	; 21
    2fae:	64 96       	adiw	r28, 0x14	; 20
    2fb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fb4:	64 97       	sbiw	r28, 0x14	; 20
    2fb6:	00 80       	ld	r0, Z
    2fb8:	64 96       	adiw	r28, 0x14	; 20
    2fba:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fbe:	64 97       	sbiw	r28, 0x14	; 20
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	64 96       	adiw	r28, 0x14	; 20
    2fc4:	9f af       	std	Y+63, r25	; 0x3f
    2fc6:	8e af       	std	Y+62, r24	; 0x3e
    2fc8:	64 97       	sbiw	r28, 0x14	; 20
    2fca:	62 96       	adiw	r28, 0x12	; 18
    2fcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fce:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fd0:	62 97       	sbiw	r28, 0x12	; 18
    2fd2:	00 82       	st	Z, r0
    2fd4:	62 96       	adiw	r28, 0x12	; 18
    2fd6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fda:	62 97       	sbiw	r28, 0x12	; 18
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	62 96       	adiw	r28, 0x12	; 18
    2fe0:	9f af       	std	Y+63, r25	; 0x3f
    2fe2:	8e af       	std	Y+62, r24	; 0x3e
    2fe4:	62 97       	sbiw	r28, 0x12	; 18
    2fe6:	65 96       	adiw	r28, 0x15	; 21
    2fe8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fea:	65 97       	sbiw	r28, 0x15	; 21
    2fec:	91 50       	subi	r25, 0x01	; 1
    2fee:	65 96       	adiw	r28, 0x15	; 21
    2ff0:	9f af       	std	Y+63, r25	; 0x3f
    2ff2:	65 97       	sbiw	r28, 0x15	; 21
    2ff4:	65 96       	adiw	r28, 0x15	; 21
    2ff6:	ef ad       	ldd	r30, Y+63	; 0x3f
    2ff8:	65 97       	sbiw	r28, 0x15	; 21
    2ffa:	ee 23       	and	r30, r30
    2ffc:	c1 f6       	brne	.-80     	; 0x2fae <main+0x3a>
	UART_init(&uart_seting);
    2ffe:	ce 01       	movw	r24, r28
    3000:	c9 96       	adiw	r24, 0x39	; 57
    3002:	0e 94 97 0c 	call	0x192e	; 0x192e <UART_init>
	/********************************************************/
	Buzzer_init();
    3006:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Buzzer_init>
	PIR_init();
    300a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <PIR_init>
	/********************************************************/
	TWI_ConfigType i2c_cfg = {0b00000001, 400000};
    300e:	ce 01       	movw	r24, r28
    3010:	80 5c       	subi	r24, 0xC0	; 192
    3012:	9f 4f       	sbci	r25, 0xFF	; 255
    3014:	67 96       	adiw	r28, 0x17	; 23
    3016:	9f af       	std	Y+63, r25	; 0x3f
    3018:	8e af       	std	Y+62, r24	; 0x3e
    301a:	67 97       	sbiw	r28, 0x17	; 23
    301c:	e0 e7       	ldi	r30, 0x70	; 112
    301e:	f1 e0       	ldi	r31, 0x01	; 1
    3020:	69 96       	adiw	r28, 0x19	; 25
    3022:	ff af       	std	Y+63, r31	; 0x3f
    3024:	ee af       	std	Y+62, r30	; 0x3e
    3026:	69 97       	sbiw	r28, 0x19	; 25
    3028:	f9 e0       	ldi	r31, 0x09	; 9
    302a:	6a 96       	adiw	r28, 0x1a	; 26
    302c:	ff af       	std	Y+63, r31	; 0x3f
    302e:	6a 97       	sbiw	r28, 0x1a	; 26
    3030:	69 96       	adiw	r28, 0x19	; 25
    3032:	ee ad       	ldd	r30, Y+62	; 0x3e
    3034:	ff ad       	ldd	r31, Y+63	; 0x3f
    3036:	69 97       	sbiw	r28, 0x19	; 25
    3038:	00 80       	ld	r0, Z
    303a:	69 96       	adiw	r28, 0x19	; 25
    303c:	8e ad       	ldd	r24, Y+62	; 0x3e
    303e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3040:	69 97       	sbiw	r28, 0x19	; 25
    3042:	01 96       	adiw	r24, 0x01	; 1
    3044:	69 96       	adiw	r28, 0x19	; 25
    3046:	9f af       	std	Y+63, r25	; 0x3f
    3048:	8e af       	std	Y+62, r24	; 0x3e
    304a:	69 97       	sbiw	r28, 0x19	; 25
    304c:	67 96       	adiw	r28, 0x17	; 23
    304e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3050:	ff ad       	ldd	r31, Y+63	; 0x3f
    3052:	67 97       	sbiw	r28, 0x17	; 23
    3054:	00 82       	st	Z, r0
    3056:	67 96       	adiw	r28, 0x17	; 23
    3058:	8e ad       	ldd	r24, Y+62	; 0x3e
    305a:	9f ad       	ldd	r25, Y+63	; 0x3f
    305c:	67 97       	sbiw	r28, 0x17	; 23
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	67 96       	adiw	r28, 0x17	; 23
    3062:	9f af       	std	Y+63, r25	; 0x3f
    3064:	8e af       	std	Y+62, r24	; 0x3e
    3066:	67 97       	sbiw	r28, 0x17	; 23
    3068:	6a 96       	adiw	r28, 0x1a	; 26
    306a:	9f ad       	ldd	r25, Y+63	; 0x3f
    306c:	6a 97       	sbiw	r28, 0x1a	; 26
    306e:	91 50       	subi	r25, 0x01	; 1
    3070:	6a 96       	adiw	r28, 0x1a	; 26
    3072:	9f af       	std	Y+63, r25	; 0x3f
    3074:	6a 97       	sbiw	r28, 0x1a	; 26
    3076:	6a 96       	adiw	r28, 0x1a	; 26
    3078:	ef ad       	ldd	r30, Y+63	; 0x3f
    307a:	6a 97       	sbiw	r28, 0x1a	; 26
    307c:	ee 23       	and	r30, r30
    307e:	c1 f6       	brne	.-80     	; 0x3030 <main+0xbc>
	TWI_init(&i2c_cfg);
    3080:	ce 01       	movw	r24, r28
    3082:	80 5c       	subi	r24, 0xC0	; 192
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TWI_init>
	/********************************************************/
	DcMotor_Init();
    308a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DcMotor_Init>

	/********************************************************/
	sei();
    308e:	78 94       	sei
	Timer_ConfigType time1_setting = {0, 31250, TIMER1, F_CPU_256, COMPARE_MODE};
    3090:	ce 01       	movw	r24, r28
    3092:	87 5b       	subi	r24, 0xB7	; 183
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	6c 96       	adiw	r28, 0x1c	; 28
    3098:	9f af       	std	Y+63, r25	; 0x3f
    309a:	8e af       	std	Y+62, r24	; 0x3e
    309c:	6c 97       	sbiw	r28, 0x1c	; 28
    309e:	89 e6       	ldi	r24, 0x69	; 105
    30a0:	91 e0       	ldi	r25, 0x01	; 1
    30a2:	6e 96       	adiw	r28, 0x1e	; 30
    30a4:	9f af       	std	Y+63, r25	; 0x3f
    30a6:	8e af       	std	Y+62, r24	; 0x3e
    30a8:	6e 97       	sbiw	r28, 0x1e	; 30
    30aa:	97 e0       	ldi	r25, 0x07	; 7
    30ac:	6f 96       	adiw	r28, 0x1f	; 31
    30ae:	9f af       	std	Y+63, r25	; 0x3f
    30b0:	6f 97       	sbiw	r28, 0x1f	; 31
    30b2:	6e 96       	adiw	r28, 0x1e	; 30
    30b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    30b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    30b8:	6e 97       	sbiw	r28, 0x1e	; 30
    30ba:	00 80       	ld	r0, Z
    30bc:	6e 96       	adiw	r28, 0x1e	; 30
    30be:	8e ad       	ldd	r24, Y+62	; 0x3e
    30c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30c2:	6e 97       	sbiw	r28, 0x1e	; 30
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	6e 96       	adiw	r28, 0x1e	; 30
    30c8:	9f af       	std	Y+63, r25	; 0x3f
    30ca:	8e af       	std	Y+62, r24	; 0x3e
    30cc:	6e 97       	sbiw	r28, 0x1e	; 30
    30ce:	6c 96       	adiw	r28, 0x1c	; 28
    30d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    30d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    30d4:	6c 97       	sbiw	r28, 0x1c	; 28
    30d6:	00 82       	st	Z, r0
    30d8:	6c 96       	adiw	r28, 0x1c	; 28
    30da:	8e ad       	ldd	r24, Y+62	; 0x3e
    30dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    30de:	6c 97       	sbiw	r28, 0x1c	; 28
    30e0:	01 96       	adiw	r24, 0x01	; 1
    30e2:	6c 96       	adiw	r28, 0x1c	; 28
    30e4:	9f af       	std	Y+63, r25	; 0x3f
    30e6:	8e af       	std	Y+62, r24	; 0x3e
    30e8:	6c 97       	sbiw	r28, 0x1c	; 28
    30ea:	6f 96       	adiw	r28, 0x1f	; 31
    30ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ee:	6f 97       	sbiw	r28, 0x1f	; 31
    30f0:	91 50       	subi	r25, 0x01	; 1
    30f2:	6f 96       	adiw	r28, 0x1f	; 31
    30f4:	9f af       	std	Y+63, r25	; 0x3f
    30f6:	6f 97       	sbiw	r28, 0x1f	; 31
    30f8:	6f 96       	adiw	r28, 0x1f	; 31
    30fa:	ef ad       	ldd	r30, Y+63	; 0x3f
    30fc:	6f 97       	sbiw	r28, 0x1f	; 31
    30fe:	ee 23       	and	r30, r30
    3100:	c1 f6       	brne	.-80     	; 0x30b2 <main+0x13e>
	Timer_init(&time1_setting);
    3102:	ce 01       	movw	r24, r28
    3104:	87 5b       	subi	r24, 0xB7	; 183
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Timer_init>
	Timer_setCallBack(timer_handler, TIMER1);
    310c:	81 e5       	ldi	r24, 0x51	; 81
    310e:	9c e1       	ldi	r25, 0x1C	; 28
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <Timer_setCallBack>
	/*********************************************************/

	while(1)
	{
		state = UART_recieveByte();
    3116:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    311a:	80 93 92 01 	sts	0x0192, r24
		if(state == PASS_LOADING)
    311e:	80 91 92 01 	lds	r24, 0x0192
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	09 f0       	breq	.+2      	; 0x3128 <main+0x1b4>
    3126:	ea c0       	rjmp	.+468    	; 0x32fc <main+0x388>
		{
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    3128:	10 92 90 01 	sts	0x0190, r1
    312c:	0f c0       	rjmp	.+30     	; 0x314c <main+0x1d8>
			{
				pass_1[counter] = UART_recieveByte();
    312e:	80 91 90 01 	lds	r24, 0x0190
    3132:	08 2f       	mov	r16, r24
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    313a:	f8 01       	movw	r30, r16
    313c:	ea 57       	subi	r30, 0x7A	; 122
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	80 83       	st	Z, r24
	while(1)
	{
		state = UART_recieveByte();
		if(state == PASS_LOADING)
		{
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    3142:	80 91 90 01 	lds	r24, 0x0190
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	80 93 90 01 	sts	0x0190, r24
    314c:	80 91 90 01 	lds	r24, 0x0190
    3150:	85 30       	cpi	r24, 0x05	; 5
    3152:	68 f3       	brcs	.-38     	; 0x312e <main+0x1ba>
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    3154:	10 92 90 01 	sts	0x0190, r1
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <main+0x204>
			{
				pass_2[counter] = UART_recieveByte();
    315a:	80 91 90 01 	lds	r24, 0x0190
    315e:	08 2f       	mov	r16, r24
    3160:	10 e0       	ldi	r17, 0x00	; 0
    3162:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    3166:	f8 01       	movw	r30, r16
    3168:	e5 57       	subi	r30, 0x75	; 117
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	80 83       	st	Z, r24
		{
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    316e:	80 91 90 01 	lds	r24, 0x0190
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	80 93 90 01 	sts	0x0190, r24
    3178:	80 91 90 01 	lds	r24, 0x0190
    317c:	85 30       	cpi	r24, 0x05	; 5
    317e:	68 f3       	brcs	.-38     	; 0x315a <main+0x1e6>
			{
				pass_2[counter] = UART_recieveByte();
			}
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    3180:	10 92 90 01 	sts	0x0190, r1
    3184:	1b c0       	rjmp	.+54     	; 0x31bc <main+0x248>
			{
				if(pass_1[counter] != pass_2[counter])
    3186:	80 91 90 01 	lds	r24, 0x0190
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	fc 01       	movw	r30, r24
    3190:	ea 57       	subi	r30, 0x7A	; 122
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	20 81       	ld	r18, Z
    3196:	80 91 90 01 	lds	r24, 0x0190
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	fc 01       	movw	r30, r24
    31a0:	e5 57       	subi	r30, 0x75	; 117
    31a2:	fe 4f       	sbci	r31, 0xFE	; 254
    31a4:	80 81       	ld	r24, Z
    31a6:	28 17       	cp	r18, r24
    31a8:	21 f0       	breq	.+8      	; 0x31b2 <main+0x23e>
				{
					UART_sendByte(WRONG_PASS);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
    31b0:	09 c0       	rjmp	.+18     	; 0x31c4 <main+0x250>
			}
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
			{
				pass_2[counter] = UART_recieveByte();
			}
			for(counter = 0; counter< PASSWORD_LENGTH; ++counter)
    31b2:	80 91 90 01 	lds	r24, 0x0190
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	80 93 90 01 	sts	0x0190, r24
    31bc:	80 91 90 01 	lds	r24, 0x0190
    31c0:	85 30       	cpi	r24, 0x05	; 5
    31c2:	08 f3       	brcs	.-62     	; 0x3186 <main+0x212>
				{
					UART_sendByte(WRONG_PASS);
					break;
				}
			}
			if(counter==PASSWORD_LENGTH)
    31c4:	80 91 90 01 	lds	r24, 0x0190
    31c8:	85 30       	cpi	r24, 0x05	; 5
    31ca:	09 f0       	breq	.+2      	; 0x31ce <main+0x25a>
    31cc:	a4 cf       	rjmp	.-184    	; 0x3116 <main+0x1a2>
			{
				UART_sendByte(CORRECT_PASS);
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
				for(counter =0;counter<PASSWORD_LENGTH; ++counter)
    31d4:	10 92 90 01 	sts	0x0190, r1
    31d8:	8b c0       	rjmp	.+278    	; 0x32f0 <main+0x37c>
				{
					status =EEPROM_writeByte(start_address + counter, pass_1[counter]);
    31da:	80 91 90 01 	lds	r24, 0x0190
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	05 96       	adiw	r24, 0x05	; 5
    31e4:	ac 01       	movw	r20, r24
    31e6:	80 91 90 01 	lds	r24, 0x0190
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	fc 01       	movw	r30, r24
    31f0:	ea 57       	subi	r30, 0x7A	; 122
    31f2:	fe 4f       	sbci	r31, 0xFE	; 254
    31f4:	20 81       	ld	r18, Z
    31f6:	ca 01       	movw	r24, r20
    31f8:	62 2f       	mov	r22, r18
    31fa:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <EEPROM_writeByte>
    31fe:	80 93 93 01 	sts	0x0193, r24
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 ea       	ldi	r26, 0xA0	; 160
    3208:	b1 e4       	ldi	r27, 0x41	; 65
    320a:	8d ab       	std	Y+53, r24	; 0x35
    320c:	9e ab       	std	Y+54, r25	; 0x36
    320e:	af ab       	std	Y+55, r26	; 0x37
    3210:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6d a9       	ldd	r22, Y+53	; 0x35
    3214:	7e a9       	ldd	r23, Y+54	; 0x36
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	89 ab       	std	Y+49, r24	; 0x31
    322c:	9a ab       	std	Y+50, r25	; 0x32
    322e:	ab ab       	std	Y+51, r26	; 0x33
    3230:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3232:	69 a9       	ldd	r22, Y+49	; 0x31
    3234:	7a a9       	ldd	r23, Y+50	; 0x32
    3236:	8b a9       	ldd	r24, Y+51	; 0x33
    3238:	9c a9       	ldd	r25, Y+52	; 0x34
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <main+0x2e0>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 ab       	std	Y+48, r25	; 0x30
    3250:	8f a7       	std	Y+47, r24	; 0x2f
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <main+0x35e>
	else if (__tmp > 65535)
    3254:	69 a9       	ldd	r22, Y+49	; 0x31
    3256:	7a a9       	ldd	r23, Y+50	; 0x32
    3258:	8b a9       	ldd	r24, Y+51	; 0x33
    325a:	9c a9       	ldd	r25, Y+52	; 0x34
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <main+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6d a9       	ldd	r22, Y+53	; 0x35
    326e:	7e a9       	ldd	r23, Y+54	; 0x36
    3270:	8f a9       	ldd	r24, Y+55	; 0x37
    3272:	98 ad       	ldd	r25, Y+56	; 0x38
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <main+0x340>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    329e:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <main+0x32e>
    32a6:	9e a7       	std	Y+46, r25	; 0x2e
    32a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ac:	98 a9       	ldd	r25, Y+48	; 0x30
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	98 ab       	std	Y+48, r25	; 0x30
    32b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b6:	98 a9       	ldd	r25, Y+48	; 0x30
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <main+0x322>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	69 a9       	ldd	r22, Y+49	; 0x31
    32c0:	7a a9       	ldd	r23, Y+50	; 0x32
    32c2:	8b a9       	ldd	r24, Y+51	; 0x33
    32c4:	9c a9       	ldd	r25, Y+52	; 0x34
    32c6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	98 ab       	std	Y+48, r25	; 0x30
    32d0:	8f a7       	std	Y+47, r24	; 0x2f
    32d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d4:	98 a9       	ldd	r25, Y+48	; 0x30
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
    32da:	8b a5       	ldd	r24, Y+43	; 0x2b
    32dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <main+0x36a>
    32e2:	9c a7       	std	Y+44, r25	; 0x2c
    32e4:	8b a7       	std	Y+43, r24	; 0x2b
				}
			}
			if(counter==PASSWORD_LENGTH)
			{
				UART_sendByte(CORRECT_PASS);
				for(counter =0;counter<PASSWORD_LENGTH; ++counter)
    32e6:	80 91 90 01 	lds	r24, 0x0190
    32ea:	8f 5f       	subi	r24, 0xFF	; 255
    32ec:	80 93 90 01 	sts	0x0190, r24
    32f0:	80 91 90 01 	lds	r24, 0x0190
    32f4:	85 30       	cpi	r24, 0x05	; 5
    32f6:	08 f4       	brcc	.+2      	; 0x32fa <main+0x386>
    32f8:	70 cf       	rjmp	.-288    	; 0x31da <main+0x266>
    32fa:	0d cf       	rjmp	.-486    	; 0x3116 <main+0x1a2>
					_delay_ms(20);
				}
			}

		}
		else if(state == PASS_IN)
    32fc:	80 91 92 01 	lds	r24, 0x0192
    3300:	82 30       	cpi	r24, 0x02	; 2
    3302:	09 f0       	breq	.+2      	; 0x3306 <main+0x392>
    3304:	fd c0       	rjmp	.+506    	; 0x3500 <main+0x58c>
		{
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3306:	10 92 90 01 	sts	0x0190, r1
    330a:	0f c0       	rjmp	.+30     	; 0x332a <main+0x3b6>
			{
				pass_1[counter] = UART_recieveByte();
    330c:	80 91 90 01 	lds	r24, 0x0190
    3310:	08 2f       	mov	r16, r24
    3312:	10 e0       	ldi	r17, 0x00	; 0
    3314:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    3318:	f8 01       	movw	r30, r16
    331a:	ea 57       	subi	r30, 0x7A	; 122
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	80 83       	st	Z, r24
			}

		}
		else if(state == PASS_IN)
		{
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3320:	80 91 90 01 	lds	r24, 0x0190
    3324:	8f 5f       	subi	r24, 0xFF	; 255
    3326:	80 93 90 01 	sts	0x0190, r24
    332a:	80 91 90 01 	lds	r24, 0x0190
    332e:	85 30       	cpi	r24, 0x05	; 5
    3330:	68 f3       	brcs	.-38     	; 0x330c <main+0x398>
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3332:	10 92 90 01 	sts	0x0190, r1
    3336:	8a c0       	rjmp	.+276    	; 0x344c <main+0x4d8>
			{
				status = EEPROM_readByte(start_address + counter, &pass_2[counter]);
    3338:	80 91 90 01 	lds	r24, 0x0190
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	05 96       	adiw	r24, 0x05	; 5
    3342:	ac 01       	movw	r20, r24
    3344:	80 91 90 01 	lds	r24, 0x0190
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9c 01       	movw	r18, r24
    334e:	25 57       	subi	r18, 0x75	; 117
    3350:	3e 4f       	sbci	r19, 0xFE	; 254
    3352:	ca 01       	movw	r24, r20
    3354:	b9 01       	movw	r22, r18
    3356:	0e 94 34 17 	call	0x2e68	; 0x2e68 <EEPROM_readByte>
    335a:	80 93 93 01 	sts	0x0193, r24
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a0 ea       	ldi	r26, 0xA0	; 160
    3364:	b1 e4       	ldi	r27, 0x41	; 65
    3366:	8f a3       	std	Y+39, r24	; 0x27
    3368:	98 a7       	std	Y+40, r25	; 0x28
    336a:	a9 a7       	std	Y+41, r26	; 0x29
    336c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	6f a1       	ldd	r22, Y+39	; 0x27
    3370:	78 a5       	ldd	r23, Y+40	; 0x28
    3372:	89 a5       	ldd	r24, Y+41	; 0x29
    3374:	9a a5       	ldd	r25, Y+42	; 0x2a
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	4a ef       	ldi	r20, 0xFA	; 250
    337c:	54 e4       	ldi	r21, 0x44	; 68
    337e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	8b a3       	std	Y+35, r24	; 0x23
    3388:	9c a3       	std	Y+36, r25	; 0x24
    338a:	ad a3       	std	Y+37, r26	; 0x25
    338c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    338e:	6b a1       	ldd	r22, Y+35	; 0x23
    3390:	7c a1       	ldd	r23, Y+36	; 0x24
    3392:	8d a1       	ldd	r24, Y+37	; 0x25
    3394:	9e a1       	ldd	r25, Y+38	; 0x26
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	2c f4       	brge	.+10     	; 0x33b0 <main+0x43c>
		__ticks = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9a a3       	std	Y+34, r25	; 0x22
    33ac:	89 a3       	std	Y+33, r24	; 0x21
    33ae:	3f c0       	rjmp	.+126    	; 0x342e <main+0x4ba>
	else if (__tmp > 65535)
    33b0:	6b a1       	ldd	r22, Y+35	; 0x23
    33b2:	7c a1       	ldd	r23, Y+36	; 0x24
    33b4:	8d a1       	ldd	r24, Y+37	; 0x25
    33b6:	9e a1       	ldd	r25, Y+38	; 0x26
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	3f ef       	ldi	r19, 0xFF	; 255
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	57 e4       	ldi	r21, 0x47	; 71
    33c0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	4c f5       	brge	.+82     	; 0x341a <main+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c8:	6f a1       	ldd	r22, Y+39	; 0x27
    33ca:	78 a5       	ldd	r23, Y+40	; 0x28
    33cc:	89 a5       	ldd	r24, Y+41	; 0x29
    33ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e2       	ldi	r20, 0x20	; 32
    33d6:	51 e4       	ldi	r21, 0x41	; 65
    33d8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9a a3       	std	Y+34, r25	; 0x22
    33ee:	89 a3       	std	Y+33, r24	; 0x21
    33f0:	0f c0       	rjmp	.+30     	; 0x3410 <main+0x49c>
    33f2:	88 ec       	ldi	r24, 0xC8	; 200
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	98 a3       	std	Y+32, r25	; 0x20
    33f8:	8f 8f       	std	Y+31, r24	; 0x1f
    33fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33fc:	98 a1       	ldd	r25, Y+32	; 0x20
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <main+0x48a>
    3402:	98 a3       	std	Y+32, r25	; 0x20
    3404:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3406:	89 a1       	ldd	r24, Y+33	; 0x21
    3408:	9a a1       	ldd	r25, Y+34	; 0x22
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	9a a3       	std	Y+34, r25	; 0x22
    340e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3410:	89 a1       	ldd	r24, Y+33	; 0x21
    3412:	9a a1       	ldd	r25, Y+34	; 0x22
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	69 f7       	brne	.-38     	; 0x33f2 <main+0x47e>
    3418:	14 c0       	rjmp	.+40     	; 0x3442 <main+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341a:	6b a1       	ldd	r22, Y+35	; 0x23
    341c:	7c a1       	ldd	r23, Y+36	; 0x24
    341e:	8d a1       	ldd	r24, Y+37	; 0x25
    3420:	9e a1       	ldd	r25, Y+38	; 0x26
    3422:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9a a3       	std	Y+34, r25	; 0x22
    342c:	89 a3       	std	Y+33, r24	; 0x21
    342e:	89 a1       	ldd	r24, Y+33	; 0x21
    3430:	9a a1       	ldd	r25, Y+34	; 0x22
    3432:	9e 8f       	std	Y+30, r25	; 0x1e
    3434:	8d 8f       	std	Y+29, r24	; 0x1d
    3436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3438:	9e 8d       	ldd	r25, Y+30	; 0x1e
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <main+0x4c6>
    343e:	9e 8f       	std	Y+30, r25	; 0x1e
    3440:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3442:	80 91 90 01 	lds	r24, 0x0190
    3446:	8f 5f       	subi	r24, 0xFF	; 255
    3448:	80 93 90 01 	sts	0x0190, r24
    344c:	80 91 90 01 	lds	r24, 0x0190
    3450:	85 30       	cpi	r24, 0x05	; 5
    3452:	08 f4       	brcc	.+2      	; 0x3456 <main+0x4e2>
    3454:	71 cf       	rjmp	.-286    	; 0x3338 <main+0x3c4>
			{
				status = EEPROM_readByte(start_address + counter, &pass_2[counter]);
				_delay_ms(20);
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3456:	10 92 90 01 	sts	0x0190, r1
    345a:	1b c0       	rjmp	.+54     	; 0x3492 <main+0x51e>
			{
				if(pass_1[counter] != pass_2[counter])
    345c:	80 91 90 01 	lds	r24, 0x0190
    3460:	88 2f       	mov	r24, r24
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	fc 01       	movw	r30, r24
    3466:	ea 57       	subi	r30, 0x7A	; 122
    3468:	fe 4f       	sbci	r31, 0xFE	; 254
    346a:	20 81       	ld	r18, Z
    346c:	80 91 90 01 	lds	r24, 0x0190
    3470:	88 2f       	mov	r24, r24
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	fc 01       	movw	r30, r24
    3476:	e5 57       	subi	r30, 0x75	; 117
    3478:	fe 4f       	sbci	r31, 0xFE	; 254
    347a:	80 81       	ld	r24, Z
    347c:	28 17       	cp	r18, r24
    347e:	21 f0       	breq	.+8      	; 0x3488 <main+0x514>
				{
					UART_sendByte(WRONG_PASS);
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
    3486:	09 c0       	rjmp	.+18     	; 0x349a <main+0x526>
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
			{
				status = EEPROM_readByte(start_address + counter, &pass_2[counter]);
				_delay_ms(20);
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3488:	80 91 90 01 	lds	r24, 0x0190
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	80 93 90 01 	sts	0x0190, r24
    3492:	80 91 90 01 	lds	r24, 0x0190
    3496:	85 30       	cpi	r24, 0x05	; 5
    3498:	08 f3       	brcs	.-62     	; 0x345c <main+0x4e8>
				{
					UART_sendByte(WRONG_PASS);
					break;
				}
			}
			if(counter == PASSWORD_LENGTH)
    349a:	80 91 90 01 	lds	r24, 0x0190
    349e:	85 30       	cpi	r24, 0x05	; 5
    34a0:	09 f0       	breq	.+2      	; 0x34a4 <main+0x530>
    34a2:	39 ce       	rjmp	.-910    	; 0x3116 <main+0x1a2>
			{
				UART_sendByte(CORRECT_PASS);
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
				DcMotor_Rotate(CW, 100);
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	64 e6       	ldi	r22, 0x64	; 100
    34ae:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DcMotor_Rotate>
				seconds = 0;
    34b2:	10 92 95 01 	sts	0x0195, r1
				while(seconds < UNLOCK_DURATION);
    34b6:	80 91 95 01 	lds	r24, 0x0195
    34ba:	8f 30       	cpi	r24, 0x0F	; 15
    34bc:	e0 f3       	brcs	.-8      	; 0x34b6 <main+0x542>
				DcMotor_Rotate(Stop, 0);
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DcMotor_Rotate>
				do{
					peopleIN = PIR_getState();
    34c6:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <PIR_getState>
    34ca:	80 93 94 01 	sts	0x0194, r24
					UART_sendByte(PEOPLE_ON);
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
				 }while(peopleIN);
    34d4:	80 91 94 01 	lds	r24, 0x0194
    34d8:	88 23       	and	r24, r24
    34da:	a9 f7       	brne	.-22     	; 0x34c6 <main+0x552>
				UART_sendByte(PEOPLE_OFF);
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
				DcMotor_Rotate(A_CW, 100);
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	64 e6       	ldi	r22, 0x64	; 100
    34e6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DcMotor_Rotate>
				seconds = 0;
    34ea:	10 92 95 01 	sts	0x0195, r1
				while(seconds < UNLOCK_DURATION);
    34ee:	80 91 95 01 	lds	r24, 0x0195
    34f2:	8f 30       	cpi	r24, 0x0F	; 15
    34f4:	e0 f3       	brcs	.-8      	; 0x34ee <main+0x57a>
				DcMotor_Rotate(Stop, 0);
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <DcMotor_Rotate>
    34fe:	0b ce       	rjmp	.-1002   	; 0x3116 <main+0x1a2>
			}
		}
		else if(state ==  PASS_UPDATE )
    3500:	80 91 92 01 	lds	r24, 0x0192
    3504:	83 30       	cpi	r24, 0x03	; 3
    3506:	09 f0       	breq	.+2      	; 0x350a <main+0x596>
    3508:	bc c1       	rjmp	.+888    	; 0x3882 <main+0x90e>
		{
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    350a:	10 92 90 01 	sts	0x0190, r1
    350e:	0f c0       	rjmp	.+30     	; 0x352e <main+0x5ba>
			{
				pass_1[counter] = UART_recieveByte();
    3510:	80 91 90 01 	lds	r24, 0x0190
    3514:	08 2f       	mov	r16, r24
    3516:	10 e0       	ldi	r17, 0x00	; 0
    3518:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    351c:	f8 01       	movw	r30, r16
    351e:	ea 57       	subi	r30, 0x7A	; 122
    3520:	fe 4f       	sbci	r31, 0xFE	; 254
    3522:	80 83       	st	Z, r24
				DcMotor_Rotate(Stop, 0);
			}
		}
		else if(state ==  PASS_UPDATE )
		{
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    3524:	80 91 90 01 	lds	r24, 0x0190
    3528:	8f 5f       	subi	r24, 0xFF	; 255
    352a:	80 93 90 01 	sts	0x0190, r24
    352e:	80 91 90 01 	lds	r24, 0x0190
    3532:	85 30       	cpi	r24, 0x05	; 5
    3534:	68 f3       	brcs	.-38     	; 0x3510 <main+0x59c>
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3536:	10 92 90 01 	sts	0x0190, r1
    353a:	8a c0       	rjmp	.+276    	; 0x3650 <main+0x6dc>
			{
				status = EEPROM_readByte(start_address + counter , &pass_2[counter]);
    353c:	80 91 90 01 	lds	r24, 0x0190
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	05 96       	adiw	r24, 0x05	; 5
    3546:	ac 01       	movw	r20, r24
    3548:	80 91 90 01 	lds	r24, 0x0190
    354c:	88 2f       	mov	r24, r24
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	9c 01       	movw	r18, r24
    3552:	25 57       	subi	r18, 0x75	; 117
    3554:	3e 4f       	sbci	r19, 0xFE	; 254
    3556:	ca 01       	movw	r24, r20
    3558:	b9 01       	movw	r22, r18
    355a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <EEPROM_readByte>
    355e:	80 93 93 01 	sts	0x0193, r24
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e2       	ldi	r26, 0x20	; 32
    3568:	b1 e4       	ldi	r27, 0x41	; 65
    356a:	89 8f       	std	Y+25, r24	; 0x19
    356c:	9a 8f       	std	Y+26, r25	; 0x1a
    356e:	ab 8f       	std	Y+27, r26	; 0x1b
    3570:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3572:	69 8d       	ldd	r22, Y+25	; 0x19
    3574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a ef       	ldi	r20, 0xFA	; 250
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8d 8b       	std	Y+21, r24	; 0x15
    358c:	9e 8b       	std	Y+22, r25	; 0x16
    358e:	af 8b       	std	Y+23, r26	; 0x17
    3590:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	5f e3       	ldi	r21, 0x3F	; 63
    35a2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <main+0x640>
		__ticks = 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <main+0x6be>
	else if (__tmp > 65535)
    35b4:	6d 89       	ldd	r22, Y+21	; 0x15
    35b6:	7e 89       	ldd	r23, Y+22	; 0x16
    35b8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ba:	98 8d       	ldd	r25, Y+24	; 0x18
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	3f ef       	ldi	r19, 0xFF	; 255
    35c0:	4f e7       	ldi	r20, 0x7F	; 127
    35c2:	57 e4       	ldi	r21, 0x47	; 71
    35c4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	69 8d       	ldd	r22, Y+25	; 0x19
    35ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9c 8b       	std	Y+20, r25	; 0x14
    35f2:	8b 8b       	std	Y+19, r24	; 0x13
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <main+0x6a0>
    35f6:	88 ec       	ldi	r24, 0xC8	; 200
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9a 8b       	std	Y+18, r25	; 0x12
    35fc:	89 8b       	std	Y+17, r24	; 0x11
    35fe:	89 89       	ldd	r24, Y+17	; 0x11
    3600:	9a 89       	ldd	r25, Y+18	; 0x12
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <main+0x68e>
    3606:	9a 8b       	std	Y+18, r25	; 0x12
    3608:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	8b 89       	ldd	r24, Y+19	; 0x13
    360c:	9c 89       	ldd	r25, Y+20	; 0x14
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9c 8b       	std	Y+20, r25	; 0x14
    3612:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	8b 89       	ldd	r24, Y+19	; 0x13
    3616:	9c 89       	ldd	r25, Y+20	; 0x14
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <main+0x682>
    361c:	14 c0       	rjmp	.+40     	; 0x3646 <main+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	6d 89       	ldd	r22, Y+21	; 0x15
    3620:	7e 89       	ldd	r23, Y+22	; 0x16
    3622:	8f 89       	ldd	r24, Y+23	; 0x17
    3624:	98 8d       	ldd	r25, Y+24	; 0x18
    3626:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9c 8b       	std	Y+20, r25	; 0x14
    3630:	8b 8b       	std	Y+19, r24	; 0x13
    3632:	8b 89       	ldd	r24, Y+19	; 0x13
    3634:	9c 89       	ldd	r25, Y+20	; 0x14
    3636:	98 8b       	std	Y+16, r25	; 0x10
    3638:	8f 87       	std	Y+15, r24	; 0x0f
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	98 89       	ldd	r25, Y+16	; 0x10
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <main+0x6ca>
    3642:	98 8b       	std	Y+16, r25	; 0x10
    3644:	8f 87       	std	Y+15, r24	; 0x0f
		{
			for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
			{
				pass_1[counter] = UART_recieveByte();
			}
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
    3646:	80 91 90 01 	lds	r24, 0x0190
    364a:	8f 5f       	subi	r24, 0xFF	; 255
    364c:	80 93 90 01 	sts	0x0190, r24
    3650:	80 91 90 01 	lds	r24, 0x0190
    3654:	85 30       	cpi	r24, 0x05	; 5
    3656:	08 f4       	brcc	.+2      	; 0x365a <main+0x6e6>
    3658:	71 cf       	rjmp	.-286    	; 0x353c <main+0x5c8>
			{
				status = EEPROM_readByte(start_address + counter , &pass_2[counter]);
				_delay_ms(10);
			}
			for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    365a:	10 92 90 01 	sts	0x0190, r1
    365e:	1b c0       	rjmp	.+54     	; 0x3696 <main+0x722>
			{
				if(pass_1[counter] != pass_2[counter])
    3660:	80 91 90 01 	lds	r24, 0x0190
    3664:	88 2f       	mov	r24, r24
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	fc 01       	movw	r30, r24
    366a:	ea 57       	subi	r30, 0x7A	; 122
    366c:	fe 4f       	sbci	r31, 0xFE	; 254
    366e:	20 81       	ld	r18, Z
    3670:	80 91 90 01 	lds	r24, 0x0190
    3674:	88 2f       	mov	r24, r24
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	fc 01       	movw	r30, r24
    367a:	e5 57       	subi	r30, 0x75	; 117
    367c:	fe 4f       	sbci	r31, 0xFE	; 254
    367e:	80 81       	ld	r24, Z
    3680:	28 17       	cp	r18, r24
    3682:	21 f0       	breq	.+8      	; 0x368c <main+0x718>
				{
					UART_sendByte(WRONG_PASS);
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
    368a:	09 c0       	rjmp	.+18     	; 0x369e <main+0x72a>
			for(counter = 0;counter< PASSWORD_LENGTH; ++counter)
			{
				status = EEPROM_readByte(start_address + counter , &pass_2[counter]);
				_delay_ms(10);
			}
			for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    368c:	80 91 90 01 	lds	r24, 0x0190
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	80 93 90 01 	sts	0x0190, r24
    3696:	80 91 90 01 	lds	r24, 0x0190
    369a:	85 30       	cpi	r24, 0x05	; 5
    369c:	08 f3       	brcs	.-62     	; 0x3660 <main+0x6ec>
				{
					UART_sendByte(WRONG_PASS);
					break;
				}
			}
			if(counter == PASSWORD_LENGTH)
    369e:	80 91 90 01 	lds	r24, 0x0190
    36a2:	85 30       	cpi	r24, 0x05	; 5
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <main+0x734>
    36a6:	37 cd       	rjmp	.-1426   	; 0x3116 <main+0x1a2>
			{
				UART_sendByte(CORRECT_PASS);
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    36ae:	10 92 90 01 	sts	0x0190, r1
    36b2:	0f c0       	rjmp	.+30     	; 0x36d2 <main+0x75e>
				{
					pass_1[counter] = UART_recieveByte();
    36b4:	80 91 90 01 	lds	r24, 0x0190
    36b8:	08 2f       	mov	r16, r24
    36ba:	10 e0       	ldi	r17, 0x00	; 0
    36bc:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    36c0:	f8 01       	movw	r30, r16
    36c2:	ea 57       	subi	r30, 0x7A	; 122
    36c4:	fe 4f       	sbci	r31, 0xFE	; 254
    36c6:	80 83       	st	Z, r24
				}
			}
			if(counter == PASSWORD_LENGTH)
			{
				UART_sendByte(CORRECT_PASS);
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    36c8:	80 91 90 01 	lds	r24, 0x0190
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	80 93 90 01 	sts	0x0190, r24
    36d2:	80 91 90 01 	lds	r24, 0x0190
    36d6:	85 30       	cpi	r24, 0x05	; 5
    36d8:	68 f3       	brcs	.-38     	; 0x36b4 <main+0x740>
				{
					pass_1[counter] = UART_recieveByte();
				}
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    36da:	10 92 90 01 	sts	0x0190, r1
    36de:	0f c0       	rjmp	.+30     	; 0x36fe <main+0x78a>
				{
					pass_2[counter] = UART_recieveByte();
    36e0:	80 91 90 01 	lds	r24, 0x0190
    36e4:	08 2f       	mov	r16, r24
    36e6:	10 e0       	ldi	r17, 0x00	; 0
    36e8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_recieveByte>
    36ec:	f8 01       	movw	r30, r16
    36ee:	e5 57       	subi	r30, 0x75	; 117
    36f0:	fe 4f       	sbci	r31, 0xFE	; 254
    36f2:	80 83       	st	Z, r24
				UART_sendByte(CORRECT_PASS);
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
				{
					pass_1[counter] = UART_recieveByte();
				}
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
    36f4:	80 91 90 01 	lds	r24, 0x0190
    36f8:	8f 5f       	subi	r24, 0xFF	; 255
    36fa:	80 93 90 01 	sts	0x0190, r24
    36fe:	80 91 90 01 	lds	r24, 0x0190
    3702:	85 30       	cpi	r24, 0x05	; 5
    3704:	68 f3       	brcs	.-38     	; 0x36e0 <main+0x76c>
				{
					pass_2[counter] = UART_recieveByte();
				}
				for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    3706:	10 92 90 01 	sts	0x0190, r1
    370a:	1b c0       	rjmp	.+54     	; 0x3742 <main+0x7ce>
				{
					if(pass_1[counter] != pass_2[counter])
    370c:	80 91 90 01 	lds	r24, 0x0190
    3710:	88 2f       	mov	r24, r24
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	fc 01       	movw	r30, r24
    3716:	ea 57       	subi	r30, 0x7A	; 122
    3718:	fe 4f       	sbci	r31, 0xFE	; 254
    371a:	20 81       	ld	r18, Z
    371c:	80 91 90 01 	lds	r24, 0x0190
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	e5 57       	subi	r30, 0x75	; 117
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 81       	ld	r24, Z
    372c:	28 17       	cp	r18, r24
    372e:	21 f0       	breq	.+8      	; 0x3738 <main+0x7c4>
					{
						UART_sendByte(WRONG_PASS);
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
    3736:	09 c0       	rjmp	.+18     	; 0x374a <main+0x7d6>
				}
				for(counter = 0; counter < PASSWORD_LENGTH; ++counter)
				{
					pass_2[counter] = UART_recieveByte();
				}
				for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    3738:	80 91 90 01 	lds	r24, 0x0190
    373c:	8f 5f       	subi	r24, 0xFF	; 255
    373e:	80 93 90 01 	sts	0x0190, r24
    3742:	80 91 90 01 	lds	r24, 0x0190
    3746:	85 30       	cpi	r24, 0x05	; 5
    3748:	08 f3       	brcs	.-62     	; 0x370c <main+0x798>
					{
						UART_sendByte(WRONG_PASS);
						break;
					}
				}
				if(counter ==PASSWORD_LENGTH )
    374a:	80 91 90 01 	lds	r24, 0x0190
    374e:	85 30       	cpi	r24, 0x05	; 5
    3750:	09 f0       	breq	.+2      	; 0x3754 <main+0x7e0>
    3752:	e1 cc       	rjmp	.-1598   	; 0x3116 <main+0x1a2>
				{
					UART_sendByte(CORRECT_PASS);
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <UART_sendByte>
					for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    375a:	10 92 90 01 	sts	0x0190, r1
    375e:	8b c0       	rjmp	.+278    	; 0x3876 <main+0x902>
					{
						status =EEPROM_writeByte(start_address + counter, pass_1[counter]);
    3760:	80 91 90 01 	lds	r24, 0x0190
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	05 96       	adiw	r24, 0x05	; 5
    376a:	ac 01       	movw	r20, r24
    376c:	80 91 90 01 	lds	r24, 0x0190
    3770:	88 2f       	mov	r24, r24
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	fc 01       	movw	r30, r24
    3776:	ea 57       	subi	r30, 0x7A	; 122
    3778:	fe 4f       	sbci	r31, 0xFE	; 254
    377a:	20 81       	ld	r18, Z
    377c:	ca 01       	movw	r24, r20
    377e:	62 2f       	mov	r22, r18
    3780:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <EEPROM_writeByte>
    3784:	80 93 93 01 	sts	0x0193, r24
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	a0 e2       	ldi	r26, 0x20	; 32
    378e:	b1 e4       	ldi	r27, 0x41	; 65
    3790:	8b 87       	std	Y+11, r24	; 0x0b
    3792:	9c 87       	std	Y+12, r25	; 0x0c
    3794:	ad 87       	std	Y+13, r26	; 0x0d
    3796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3798:	6b 85       	ldd	r22, Y+11	; 0x0b
    379a:	7c 85       	ldd	r23, Y+12	; 0x0c
    379c:	8d 85       	ldd	r24, Y+13	; 0x0d
    379e:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	4a ef       	ldi	r20, 0xFA	; 250
    37a6:	54 e4       	ldi	r21, 0x44	; 68
    37a8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	8f 83       	std	Y+7, r24	; 0x07
    37b2:	98 87       	std	Y+8, r25	; 0x08
    37b4:	a9 87       	std	Y+9, r26	; 0x09
    37b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37b8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ba:	78 85       	ldd	r23, Y+8	; 0x08
    37bc:	89 85       	ldd	r24, Y+9	; 0x09
    37be:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e8       	ldi	r20, 0x80	; 128
    37c6:	5f e3       	ldi	r21, 0x3F	; 63
    37c8:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    37cc:	88 23       	and	r24, r24
    37ce:	2c f4       	brge	.+10     	; 0x37da <main+0x866>
		__ticks = 1;
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
    37d8:	3f c0       	rjmp	.+126    	; 0x3858 <main+0x8e4>
	else if (__tmp > 65535)
    37da:	6f 81       	ldd	r22, Y+7	; 0x07
    37dc:	78 85       	ldd	r23, Y+8	; 0x08
    37de:	89 85       	ldd	r24, Y+9	; 0x09
    37e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	3f ef       	ldi	r19, 0xFF	; 255
    37e6:	4f e7       	ldi	r20, 0x7F	; 127
    37e8:	57 e4       	ldi	r21, 0x47	; 71
    37ea:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    37ee:	18 16       	cp	r1, r24
    37f0:	4c f5       	brge	.+82     	; 0x3844 <main+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e2       	ldi	r20, 0x20	; 32
    3800:	51 e4       	ldi	r21, 0x41	; 65
    3802:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9e 83       	std	Y+6, r25	; 0x06
    3818:	8d 83       	std	Y+5, r24	; 0x05
    381a:	0f c0       	rjmp	.+30     	; 0x383a <main+0x8c6>
    381c:	88 ec       	ldi	r24, 0xC8	; 200
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9c 83       	std	Y+4, r25	; 0x04
    3822:	8b 83       	std	Y+3, r24	; 0x03
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <main+0x8b4>
    382c:	9c 83       	std	Y+4, r25	; 0x04
    382e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	9e 81       	ldd	r25, Y+6	; 0x06
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383a:	8d 81       	ldd	r24, Y+5	; 0x05
    383c:	9e 81       	ldd	r25, Y+6	; 0x06
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	69 f7       	brne	.-38     	; 0x381c <main+0x8a8>
    3842:	14 c0       	rjmp	.+40     	; 0x386c <main+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3844:	6f 81       	ldd	r22, Y+7	; 0x07
    3846:	78 85       	ldd	r23, Y+8	; 0x08
    3848:	89 85       	ldd	r24, Y+9	; 0x09
    384a:	9a 85       	ldd	r25, Y+10	; 0x0a
    384c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	8d 81       	ldd	r24, Y+5	; 0x05
    385a:	9e 81       	ldd	r25, Y+6	; 0x06
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	9a 81       	ldd	r25, Y+2	; 0x02
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <main+0x8f0>
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if(counter ==PASSWORD_LENGTH )
				{
					UART_sendByte(CORRECT_PASS);
					for(counter= 0; counter< PASSWORD_LENGTH; ++counter)
    386c:	80 91 90 01 	lds	r24, 0x0190
    3870:	8f 5f       	subi	r24, 0xFF	; 255
    3872:	80 93 90 01 	sts	0x0190, r24
    3876:	80 91 90 01 	lds	r24, 0x0190
    387a:	85 30       	cpi	r24, 0x05	; 5
    387c:	08 f4       	brcc	.+2      	; 0x3880 <main+0x90c>
    387e:	70 cf       	rjmp	.-288    	; 0x3760 <main+0x7ec>
    3880:	4a cc       	rjmp	.-1900   	; 0x3116 <main+0x1a2>
						_delay_ms(10);
					}
				}
			}
		}
		else if (state == ALARM_ON)
    3882:	80 91 92 01 	lds	r24, 0x0192
    3886:	84 30       	cpi	r24, 0x04	; 4
    3888:	09 f0       	breq	.+2      	; 0x388c <main+0x918>
    388a:	45 cc       	rjmp	.-1910   	; 0x3116 <main+0x1a2>
		{
			Buzzer_on();
    388c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <Buzzer_on>
			seconds = 0;
    3890:	10 92 95 01 	sts	0x0195, r1
			while(seconds < BUZZER_DURATION);
    3894:	80 91 95 01 	lds	r24, 0x0195
    3898:	8c 33       	cpi	r24, 0x3C	; 60
    389a:	e0 f3       	brcs	.-8      	; 0x3894 <main+0x920>
			Buzzer_off();
    389c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Buzzer_off>
    38a0:	3a cc       	rjmp	.-1932   	; 0x3116 <main+0x1a2>

000038a2 <timer_handler>:


	}
}
void timer_handler(void)
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    38aa:	80 91 95 01 	lds	r24, 0x0195
    38ae:	8f 5f       	subi	r24, 0xFF	; 255
    38b0:	80 93 95 01 	sts	0x0195, r24
}
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <__divmodhi4>:
    38ba:	97 fb       	bst	r25, 7
    38bc:	09 2e       	mov	r0, r25
    38be:	07 26       	eor	r0, r23
    38c0:	0a d0       	rcall	.+20     	; 0x38d6 <__divmodhi4_neg1>
    38c2:	77 fd       	sbrc	r23, 7
    38c4:	04 d0       	rcall	.+8      	; 0x38ce <__divmodhi4_neg2>
    38c6:	4d d0       	rcall	.+154    	; 0x3962 <__udivmodhi4>
    38c8:	06 d0       	rcall	.+12     	; 0x38d6 <__divmodhi4_neg1>
    38ca:	00 20       	and	r0, r0
    38cc:	1a f4       	brpl	.+6      	; 0x38d4 <__divmodhi4_exit>

000038ce <__divmodhi4_neg2>:
    38ce:	70 95       	com	r23
    38d0:	61 95       	neg	r22
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255

000038d4 <__divmodhi4_exit>:
    38d4:	08 95       	ret

000038d6 <__divmodhi4_neg1>:
    38d6:	f6 f7       	brtc	.-4      	; 0x38d4 <__divmodhi4_exit>
    38d8:	90 95       	com	r25
    38da:	81 95       	neg	r24
    38dc:	9f 4f       	sbci	r25, 0xFF	; 255
    38de:	08 95       	ret

000038e0 <__udivmodsi4>:
    38e0:	a1 e2       	ldi	r26, 0x21	; 33
    38e2:	1a 2e       	mov	r1, r26
    38e4:	aa 1b       	sub	r26, r26
    38e6:	bb 1b       	sub	r27, r27
    38e8:	fd 01       	movw	r30, r26
    38ea:	0d c0       	rjmp	.+26     	; 0x3906 <__udivmodsi4_ep>

000038ec <__udivmodsi4_loop>:
    38ec:	aa 1f       	adc	r26, r26
    38ee:	bb 1f       	adc	r27, r27
    38f0:	ee 1f       	adc	r30, r30
    38f2:	ff 1f       	adc	r31, r31
    38f4:	a2 17       	cp	r26, r18
    38f6:	b3 07       	cpc	r27, r19
    38f8:	e4 07       	cpc	r30, r20
    38fa:	f5 07       	cpc	r31, r21
    38fc:	20 f0       	brcs	.+8      	; 0x3906 <__udivmodsi4_ep>
    38fe:	a2 1b       	sub	r26, r18
    3900:	b3 0b       	sbc	r27, r19
    3902:	e4 0b       	sbc	r30, r20
    3904:	f5 0b       	sbc	r31, r21

00003906 <__udivmodsi4_ep>:
    3906:	66 1f       	adc	r22, r22
    3908:	77 1f       	adc	r23, r23
    390a:	88 1f       	adc	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	1a 94       	dec	r1
    3910:	69 f7       	brne	.-38     	; 0x38ec <__udivmodsi4_loop>
    3912:	60 95       	com	r22
    3914:	70 95       	com	r23
    3916:	80 95       	com	r24
    3918:	90 95       	com	r25
    391a:	9b 01       	movw	r18, r22
    391c:	ac 01       	movw	r20, r24
    391e:	bd 01       	movw	r22, r26
    3920:	cf 01       	movw	r24, r30
    3922:	08 95       	ret

00003924 <__mulsi3>:
    3924:	62 9f       	mul	r22, r18
    3926:	d0 01       	movw	r26, r0
    3928:	73 9f       	mul	r23, r19
    392a:	f0 01       	movw	r30, r0
    392c:	82 9f       	mul	r24, r18
    392e:	e0 0d       	add	r30, r0
    3930:	f1 1d       	adc	r31, r1
    3932:	64 9f       	mul	r22, r20
    3934:	e0 0d       	add	r30, r0
    3936:	f1 1d       	adc	r31, r1
    3938:	92 9f       	mul	r25, r18
    393a:	f0 0d       	add	r31, r0
    393c:	83 9f       	mul	r24, r19
    393e:	f0 0d       	add	r31, r0
    3940:	74 9f       	mul	r23, r20
    3942:	f0 0d       	add	r31, r0
    3944:	65 9f       	mul	r22, r21
    3946:	f0 0d       	add	r31, r0
    3948:	99 27       	eor	r25, r25
    394a:	72 9f       	mul	r23, r18
    394c:	b0 0d       	add	r27, r0
    394e:	e1 1d       	adc	r30, r1
    3950:	f9 1f       	adc	r31, r25
    3952:	63 9f       	mul	r22, r19
    3954:	b0 0d       	add	r27, r0
    3956:	e1 1d       	adc	r30, r1
    3958:	f9 1f       	adc	r31, r25
    395a:	bd 01       	movw	r22, r26
    395c:	cf 01       	movw	r24, r30
    395e:	11 24       	eor	r1, r1
    3960:	08 95       	ret

00003962 <__udivmodhi4>:
    3962:	aa 1b       	sub	r26, r26
    3964:	bb 1b       	sub	r27, r27
    3966:	51 e1       	ldi	r21, 0x11	; 17
    3968:	07 c0       	rjmp	.+14     	; 0x3978 <__udivmodhi4_ep>

0000396a <__udivmodhi4_loop>:
    396a:	aa 1f       	adc	r26, r26
    396c:	bb 1f       	adc	r27, r27
    396e:	a6 17       	cp	r26, r22
    3970:	b7 07       	cpc	r27, r23
    3972:	10 f0       	brcs	.+4      	; 0x3978 <__udivmodhi4_ep>
    3974:	a6 1b       	sub	r26, r22
    3976:	b7 0b       	sbc	r27, r23

00003978 <__udivmodhi4_ep>:
    3978:	88 1f       	adc	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	5a 95       	dec	r21
    397e:	a9 f7       	brne	.-22     	; 0x396a <__udivmodhi4_loop>
    3980:	80 95       	com	r24
    3982:	90 95       	com	r25
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	08 95       	ret

0000398a <__prologue_saves__>:
    398a:	2f 92       	push	r2
    398c:	3f 92       	push	r3
    398e:	4f 92       	push	r4
    3990:	5f 92       	push	r5
    3992:	6f 92       	push	r6
    3994:	7f 92       	push	r7
    3996:	8f 92       	push	r8
    3998:	9f 92       	push	r9
    399a:	af 92       	push	r10
    399c:	bf 92       	push	r11
    399e:	cf 92       	push	r12
    39a0:	df 92       	push	r13
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	ca 1b       	sub	r28, r26
    39b4:	db 0b       	sbc	r29, r27
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	09 94       	ijmp

000039c2 <__epilogue_restores__>:
    39c2:	2a 88       	ldd	r2, Y+18	; 0x12
    39c4:	39 88       	ldd	r3, Y+17	; 0x11
    39c6:	48 88       	ldd	r4, Y+16	; 0x10
    39c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    39cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    39d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39d4:	b9 84       	ldd	r11, Y+9	; 0x09
    39d6:	c8 84       	ldd	r12, Y+8	; 0x08
    39d8:	df 80       	ldd	r13, Y+7	; 0x07
    39da:	ee 80       	ldd	r14, Y+6	; 0x06
    39dc:	fd 80       	ldd	r15, Y+5	; 0x05
    39de:	0c 81       	ldd	r16, Y+4	; 0x04
    39e0:	1b 81       	ldd	r17, Y+3	; 0x03
    39e2:	aa 81       	ldd	r26, Y+2	; 0x02
    39e4:	b9 81       	ldd	r27, Y+1	; 0x01
    39e6:	ce 0f       	add	r28, r30
    39e8:	d1 1d       	adc	r29, r1
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	ed 01       	movw	r28, r26
    39f6:	08 95       	ret

000039f8 <_exit>:
    39f8:	f8 94       	cli

000039fa <__stop_program>:
    39fa:	ff cf       	rjmp	.-2      	; 0x39fa <__stop_program>
